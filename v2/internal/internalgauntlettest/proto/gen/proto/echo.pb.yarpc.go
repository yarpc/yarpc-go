// Code generated by protoc-gen-yarpc-go
// source: echo.proto
// DO NOT EDIT!

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package generatedpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	fx "go.uber.org/fx"
	yarpc "go.uber.org/yarpc/v2"
	yarpcprotobuf "go.uber.org/yarpc/v2/yarpcprotobuf"
	reflection "go.uber.org/yarpc/v2/yarpcprotobuf/reflection"
)

// EchoYARPCClient is the Echo service's client interface.
type EchoYARPCClient interface {
	Echo(
		context.Context,
		*EchoRequest,
		...yarpc.CallOption,
	) (*EchoResponse, error)
}

// NewEchoYARPCClient builds a new YARPC client for the Echo service.
func NewEchoYARPCClient(c yarpc.Client, opts ...yarpcprotobuf.ClientOption) EchoYARPCClient {
	return &_EchoYARPCClient{stream: yarpcprotobuf.NewStreamClient(c, "uber.prototool.generated.Echo", opts...)}
}

type _EchoYARPCClient struct {
	stream yarpcprotobuf.StreamClient
}

var _ EchoYARPCClient = (*_EchoYARPCClient)(nil)

func (c *_EchoYARPCClient) Echo(ctx context.Context, req *EchoRequest, opts ...yarpc.CallOption) (*EchoResponse, error) {
	msg, err := c.stream.Call(ctx, "Echo", req, new(EchoResponse), opts...)
	if err != nil {
		return nil, err
	}
	res, ok := msg.(*EchoResponse)
	if !ok {
		return nil, yarpcprotobuf.CastError(new(EchoResponse), res)
	}
	return res, nil
}

// EchoYARPCServer is the Echo service's server interface.
type EchoYARPCServer interface {
	Echo(
		context.Context,
		*EchoRequest,
	) (*EchoResponse, error)
}

// BuildUnaryEchoYARPCProcedures constructs the YARPC unary procedures for the Echo service.
func BuildUnaryEchoYARPCProcedures(s EchoYARPCServer) []yarpc.EncodingProcedure {
	h := &_EchoYARPCServer{server: s}
	return yarpcprotobuf.UnaryProcedures(
		yarpcprotobuf.UnaryProceduresParams{
			Service: "uber.prototool.generated.Echo",
			Unary: []yarpcprotobuf.UnaryProcedure{
				{
					Method: "Echo",
					Handler: yarpcprotobuf.NewUnaryHandler(
						yarpcprotobuf.UnaryHandlerParams{
							Handle: h.Echo,
						},
					),
					RequestType: func() proto.Message { return new(EchoRequest) },
				},
			},
		},
	)
}

type _EchoYARPCServer struct {
	server EchoYARPCServer
}

func (h *_EchoYARPCServer) Echo(ctx context.Context, m proto.Message) (proto.Message, error) {
	req, _ := m.(*EchoRequest)
	if req == nil {
		return nil, yarpcprotobuf.CastError(new(EchoRequest), m)
	}
	return h.server.Echo(ctx, req)
}

// FxEchoYARPCClientParams defines the parameters
// required to provide a EchoYARPCClient into an
// Fx application.
type FxEchoYARPCClientParams struct {
	fx.In

	ClientProvider yarpc.ClientProvider
}

// FxEchoYARPCClientResult provides a EchoYARPCClient
// into an Fx application.
type FxEchoYARPCClientResult struct {
	fx.Out

	Client EchoYARPCClient
}

// NewFxEchoYARPCClient provides a EchoYARPCClient
// into an Fx application, using the given
// name for routing.
//
//  fx.Provide(
//    generatedpb.NewFxEchoYARPCClient("service-name"),
//    ...
//  )
func NewFxEchoYARPCClient(name string, opts ...yarpcprotobuf.ClientOption) interface{} {
	return func(p FxEchoYARPCClientParams) (FxEchoYARPCClientResult, error) {
		client, ok := p.ClientProvider.Client(name)
		if !ok {
			return FxEchoYARPCClientResult{},
				fmt.Errorf("generated code could not retrieve client for %q", name)
		}
		return FxEchoYARPCClientResult{
			Client: NewEchoYARPCClient(client, opts...),
		}, nil
	}
}

// FxEchoYARPCServerParams defines the paramaters
// required to provide the EchoYARPCServer procedures
// into an Fx application.
type FxEchoYARPCServerParams struct {
	fx.In

	Server EchoYARPCServer
}

// FxEchoYARPCServerResult provides the EchoYARPCServer
// procedures into an Fx application.
type FxEchoYARPCServerResult struct {
	fx.Out

	UnaryProcedures []yarpc.EncodingProcedure `group:"yarpcfx"`

	ReflectionMeta reflection.ServerMeta `group:"yarpcfx"`
}

// NewFxEchoYARPCServer provides the EchoYARPCServer
// procedures to an Fx application. It expects
// a EchoYARPCServer to be present in the container.
//
//  fx.Provide(
//    generatedpb.NewFxEchoYARPCServer(),
//    ...
//  )
func NewFxEchoYARPCServer() interface{} {
	return func(p FxEchoYARPCServerParams) FxEchoYARPCServerResult {
		return FxEchoYARPCServerResult{
			UnaryProcedures: BuildUnaryEchoYARPCProcedures(p.Server),

			ReflectionMeta: reflection.ServerMeta{
				ServiceName:     "uber.prototool.generated.Echo",
				FileDescriptors: yarpcFileDescriptorClosure08134aea513e0001,
			},
		}
	}
}

var yarpcFileDescriptorClosure08134aea513e0001 = [][]byte{
	// echo.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4d, 0xce, 0xc8,
		0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x28, 0x4d, 0x4a, 0x2d, 0x82, 0xb0, 0x4b, 0xf2,
		0xf3, 0x73, 0xf4, 0xd2, 0x53, 0xf3, 0x52, 0x8b, 0x12, 0x4b, 0x52, 0x53, 0x94, 0xd4, 0xb9, 0xb8,
		0x5d, 0x93, 0x33, 0xf2, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x24, 0xb8, 0xd8, 0x73,
		0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0x25,
		0x0d, 0x2e, 0x1e, 0x88, 0xc2, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0xdc, 0x2a, 0x8d, 0x62, 0xb9,
		0x58, 0x40, 0x2a, 0x85, 0x42, 0xa1, 0xb4, 0xaa, 0x1e, 0x2e, 0xdb, 0xf5, 0x90, 0xac, 0x96, 0x52,
		0x23, 0xa4, 0x0c, 0x62, 0xb1, 0x93, 0x05, 0x97, 0x4c, 0x72, 0x7e, 0x2e, 0x4e, 0xc5, 0x4e, 0x9c,
		0x20, 0xd5, 0x01, 0x20, 0x89, 0x00, 0xc6, 0x28, 0x6e, 0xb8, 0x78, 0x41, 0x52, 0x12, 0x1b, 0x58,
		0xb9, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x38, 0xc1, 0x10, 0x82, 0x1a, 0x01, 0x00, 0x00,
	},
}
