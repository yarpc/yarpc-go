// Code generated by protoc-gen-yarpc-go
// source: reflection.proto
// DO NOT EDIT!

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package grpc_reflection_v1alpha

import (
	context "context"
	fmt "fmt"
	fx "go.uber.org/fx"
	yarpc "go.uber.org/yarpc/v2"
	yarpcprotobuf "go.uber.org/yarpc/v2/yarpcprotobuf"
	reflection "go.uber.org/yarpc/v2/yarpcprotobuf/reflection"
)

// ServerReflectionYARPCClient is the ServerReflection service's client interface.
type ServerReflectionYARPCClient interface {
	ServerReflectionInfo(
		context.Context,
		...yarpc.CallOption,
	) (ServerReflectionServerReflectionInfoYARPCStreamClient, error)
}

// NewServerReflectionYARPCClient builds a new YARPC client for the ServerReflection service.
func NewServerReflectionYARPCClient(c yarpc.Client, opts ...yarpcprotobuf.ClientOption) ServerReflectionYARPCClient {
	return &_ServerReflectionYARPCClient{stream: yarpcprotobuf.NewStreamClient(c, "grpc.reflection.v1alpha.ServerReflection", opts...)}
}

type _ServerReflectionYARPCClient struct {
	stream yarpcprotobuf.StreamClient
}

var _ ServerReflectionYARPCClient = (*_ServerReflectionYARPCClient)(nil)

func (c *_ServerReflectionYARPCClient) ServerReflectionInfo(ctx context.Context, opts ...yarpc.CallOption) (ServerReflectionServerReflectionInfoYARPCStreamClient, error) {
	s, err := c.stream.CallStream(ctx, "ServerReflectionInfo", opts...)
	if err != nil {
		return nil, err
	}
	return &_ServerReflectionServerReflectionInfoYARPCStreamClient{stream: s}, nil
}

// ServerReflectionServerReflectionInfoYARPCStreamClient is a streaming interface used in the ServerReflectionYARPCClient interface.
type ServerReflectionServerReflectionInfoYARPCStreamClient interface {
	Context() context.Context
	Send(*ServerReflectionRequest, ...yarpc.StreamOption) error
	Recv(...yarpc.StreamOption) (*ServerReflectionResponse, error)
	CloseSend(...yarpc.StreamOption) error
}

type _ServerReflectionServerReflectionInfoYARPCStreamClient struct {
	stream *yarpcprotobuf.ClientStream
}

var _ ServerReflectionServerReflectionInfoYARPCStreamClient = (*_ServerReflectionServerReflectionInfoYARPCStreamClient)(nil)

func (c *_ServerReflectionServerReflectionInfoYARPCStreamClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_ServerReflectionServerReflectionInfoYARPCStreamClient) Send(req *ServerReflectionRequest, opts ...yarpc.StreamOption) error {
	return c.stream.Send(req, opts...)
}

func (c *_ServerReflectionServerReflectionInfoYARPCStreamClient) Recv(opts ...yarpc.StreamOption) (*ServerReflectionResponse, error) {
	msg, err := c.stream.Receive(new(ServerReflectionResponse), opts...)
	if err != nil {
		return nil, err
	}
	res, ok := msg.(*ServerReflectionResponse)
	if !ok {
		return nil, yarpcprotobuf.CastError(new(ServerReflectionResponse), msg)
	}
	return res, nil
}

func (c *_ServerReflectionServerReflectionInfoYARPCStreamClient) CloseSend(opts ...yarpc.StreamOption) error {
	return c.stream.Close(opts...)
}

// ServerReflectionYARPCServer is the ServerReflection service's server interface.
type ServerReflectionYARPCServer interface {
	ServerReflectionInfo(
		ServerReflectionServerReflectionInfoYARPCStreamServer,
	) error
}

// BuildStreamServerReflectionYARPCProcedures constructs the YARPC stream procedures for the ServerReflection service.
func BuildStreamServerReflectionYARPCProcedures(s ServerReflectionYARPCServer) []yarpc.TransportProcedure {
	h := &_ServerReflectionYARPCServer{server: s}
	return yarpcprotobuf.StreamProcedures(
		yarpcprotobuf.StreamProceduresParams{
			Service: "grpc.reflection.v1alpha.ServerReflection",
			Stream: []yarpcprotobuf.StreamProcedure{
				{
					Method: "ServerReflectionInfo",
					Handler: yarpcprotobuf.NewStreamHandler(
						yarpcprotobuf.StreamHandlerParams{
							Handle: h.ServerReflectionInfo,
						},
					),
				},
			},
		},
	)
}

type _ServerReflectionYARPCServer struct {
	server ServerReflectionYARPCServer
}

func (h *_ServerReflectionYARPCServer) ServerReflectionInfo(s *yarpcprotobuf.ServerStream) error {
	return h.server.ServerReflectionInfo(&_ServerReflectionServerReflectionInfoYARPCStreamServer{stream: s})
}

// ServerReflectionServerReflectionInfoYARPCStreamServer is a streaming interface used in the ServerReflectionYARPCServer interface.
type ServerReflectionServerReflectionInfoYARPCStreamServer interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*ServerReflectionRequest, error)
	Send(*ServerReflectionResponse, ...yarpc.StreamOption) error
}

type _ServerReflectionServerReflectionInfoYARPCStreamServer struct {
	stream *yarpcprotobuf.ServerStream
}

var _ ServerReflectionServerReflectionInfoYARPCStreamServer = (*_ServerReflectionServerReflectionInfoYARPCStreamServer)(nil)

func (s *_ServerReflectionServerReflectionInfoYARPCStreamServer) Context() context.Context {
	return s.stream.Context()
}

func (s *_ServerReflectionServerReflectionInfoYARPCStreamServer) Recv(opts ...yarpc.StreamOption) (*ServerReflectionRequest, error) {
	msg, err := s.stream.Receive(new(ServerReflectionRequest), opts...)
	if err != nil {
		return nil, err
	}
	req, ok := msg.(*ServerReflectionRequest)
	if !ok {
		return nil, yarpcprotobuf.CastError(new(ServerReflectionRequest), msg)
	}
	return req, nil
}

func (s *_ServerReflectionServerReflectionInfoYARPCStreamServer) Send(res *ServerReflectionResponse, opts ...yarpc.StreamOption) error {
	return s.stream.Send(res, opts...)
}

// FxServerReflectionYARPCClientParams defines the parameters
// required to provide a ServerReflectionYARPCClient into an
// Fx application.
type FxServerReflectionYARPCClientParams struct {
	fx.In

	ClientProvider yarpc.ClientProvider
}

// FxServerReflectionYARPCClientResult provides a ServerReflectionYARPCClient
// into an Fx application.
type FxServerReflectionYARPCClientResult struct {
	fx.Out

	Client ServerReflectionYARPCClient
}

// NewFxServerReflectionYARPCClient provides a ServerReflectionYARPCClient
// into an Fx application, using the given
// name for routing.
//
//  fx.Provide(
//    grpc_reflection_v1alpha.NewFxServerReflectionYARPCClient("service-name"),
//    ...
//  )
func NewFxServerReflectionYARPCClient(name string, opts ...yarpcprotobuf.ClientOption) interface{} {
	return func(p FxServerReflectionYARPCClientParams) (FxServerReflectionYARPCClientResult, error) {
		client, ok := p.ClientProvider.Client(name)
		if !ok {
			return FxServerReflectionYARPCClientResult{},
				fmt.Errorf("generated code could not retrieve client for %q", name)
		}
		return FxServerReflectionYARPCClientResult{
			Client: NewServerReflectionYARPCClient(client, opts...),
		}, nil
	}
}

// FxServerReflectionYARPCServerParams defines the paramaters
// required to provide the ServerReflectionYARPCServer procedures
// into an Fx application.
type FxServerReflectionYARPCServerParams struct {
	fx.In

	Server ServerReflectionYARPCServer
}

// FxServerReflectionYARPCServerResult provides the ServerReflectionYARPCServer
// procedures into an Fx application.
type FxServerReflectionYARPCServerResult struct {
	fx.Out

	StreamProcedures []yarpc.TransportProcedure `group:"yarpcfx"`
	ReflectionMeta   reflection.ServerMeta      `group:"yarpcfx"`
}

// NewFxServerReflectionYARPCServer provides the ServerReflectionYARPCServer
// procedures to an Fx application. It expects
// a ServerReflectionYARPCServer to be present in the container.
//
//  fx.Provide(
//    grpc_reflection_v1alpha.NewFxServerReflectionYARPCServer(),
//    ...
//  )
func NewFxServerReflectionYARPCServer() interface{} {
	return func(p FxServerReflectionYARPCServerParams) FxServerReflectionYARPCServerResult {
		return FxServerReflectionYARPCServerResult{

			StreamProcedures: BuildStreamServerReflectionYARPCProcedures(p.Server),
			ReflectionMeta: reflection.ServerMeta{
				ServiceName:     "grpc.reflection.v1alpha.ServerReflection",
				FileDescriptors: yarpcFileDescriptorClosureb0c166d455ec03f4,
			},
		}
	}
}

var yarpcFileDescriptorClosureb0c166d455ec03f4 = [][]byte{
	// reflection.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xd1, 0x6e, 0xd3, 0x4a,
		0x10, 0xad, 0xdb, 0xa4, 0x55, 0x26, 0x69, 0xe2, 0xbb, 0xed, 0x6d, 0x5c, 0x50, 0x51, 0x64, 0x28,
		0xa4, 0x08, 0x85, 0x36, 0x48, 0x7c, 0x40, 0x0a, 0x28, 0x48, 0xa5, 0x45, 0x1b, 0x5e, 0x10, 0x0f,
		0x2b, 0x27, 0x99, 0xa4, 0x06, 0xc7, 0x6b, 0x76, 0xdd, 0x40, 0x9e, 0xf8, 0x08, 0x3e, 0x8a, 0x5f,
		0xe2, 0x11, 0xed, 0xda, 0x71, 0x1c, 0xd7, 0x06, 0xf5, 0x29, 0xd1, 0x99, 0x99, 0x3d, 0x33, 0x73,
		0xce, 0x18, 0x4c, 0x81, 0x13, 0x0f, 0x47, 0xa1, 0xcb, 0xfd, 0x4e, 0x20, 0x78, 0xc8, 0x49, 0x73,
		0x2a, 0x82, 0x51, 0x27, 0x05, 0xcf, 0xcf, 0x1c, 0x2f, 0xb8, 0x76, 0xec, 0xdf, 0x9b, 0xd0, 0x1c,
		0xa0, 0x98, 0xa3, 0xa0, 0x49, 0x90, 0xe2, 0xd7, 0x1b, 0x94, 0x21, 0x21, 0x50, 0xba, 0xe6, 0x32,
		0xb4, 0x8c, 0x96, 0xd1, 0xae, 0x50, 0xfd, 0x9f, 0x3c, 0x05, 0x73, 0xe2, 0x7a, 0xc8, 0x86, 0x0b,
		0xa6, 0x7e, 0x7d, 0x67, 0x86, 0xd6, 0x96, 0x8a, 0xf7, 0x37, 0x68, 0x5d, 0x21, 0xbd, 0xc5, 0x9b,
		0x18, 0x27, 0x2f, 0xe1, 0x40, 0xe7, 0x8e, 0xb8, 0x1f, 0x3a, 0xae, 0xef, 0xfa, 0x53, 0x26, 0x17,
		0xb3, 0x21, 0xf7, 0xac, 0x52, 0x5c, 0xb1, 0xaf, 0xe2, 0xe7, 0x49, 0x78, 0xa0, 0xa3, 0x64, 0x0a,
		0x87, 0xd9, 0x3a, 0xfc, 0x1e, 0xa2, 0x2f, 0x5d, 0xee, 0x5b, 0xe5, 0x96, 0xd1, 0xae, 0x76, 0x4f,
		0x3a, 0x05, 0x03, 0x75, 0x5e, 0x2f, 0x33, 0xe3, 0x29, 0xfa, 0x1b, 0xb4, 0xb9, 0xce, 0x92, 0x64,
		0x90, 0x1e, 0x1c, 0x39, 0x9e, 0xb7, 0x7a, 0x9c, 0xf9, 0x37, 0xb3, 0x21, 0x0a, 0xc9, 0xf8, 0x84,
		0x85, 0x8b, 0x00, 0xad, 0xed, 0xb8, 0xcf, 0x43, 0xc7, 0xf3, 0x92, 0xb2, 0xcb, 0x28, 0xe9, 0x6a,
		0xf2, 0x61, 0x11, 0x20, 0x39, 0x86, 0x5d, 0xcf, 0x95, 0x21, 0x93, 0x28, 0xe6, 0xee, 0x08, 0xa5,
		0xb5, 0x13, 0xd7, 0xd4, 0x14, 0x3c, 0x88, 0xd1, 0xde, 0x7f, 0xd0, 0x98, 0xa1, 0x94, 0xce, 0x14,
		0x99, 0x88, 0x1a, 0xb3, 0x27, 0x60, 0x66, 0x9b, 0x25, 0x4f, 0xa0, 0x91, 0x9a, 0x5a, 0xf7, 0x10,
		0x6d, 0xbf, 0xbe, 0x82, 0x35, 0xed, 0x09, 0x98, 0xd9, 0xb6, 0xad, 0xcd, 0x96, 0xd1, 0x2e, 0xd3,
		0x06, 0xae, 0x37, 0x6a, 0xff, 0x2a, 0x81, 0x75, 0x5b, 0x62, 0x19, 0x70, 0x5f, 0x22, 0x39, 0x02,
		0x98, 0x3b, 0x9e, 0x3b, 0x66, 0x29, 0xa5, 0x2b, 0x1a, 0xe9, 0x2b, 0xb9, 0x3f, 0x81, 0xc9, 0x85,
		0x3b, 0x75, 0x7d, 0xc7, 0x5b, 0xf6, 0xad, 0x69, 0xaa, 0xdd, 0xd3, 0x42, 0x05, 0x0a, 0xec, 0x44,
		0x1b, 0xcb, 0x97, 0x96, 0xc3, 0x7e, 0x01, 0x4b, 0xeb, 0x3c, 0x46, 0x39, 0x12, 0x6e, 0x10, 0x72,
		0xc1, 0x44, 0xdc, 0x97, 0x76, 0x48, 0xb5, 0xfb, 0xbc, 0x90, 0x44, 0x99, 0xec, 0x55, 0x52, 0xb7,
		0x1c, 0xa7, 0xbf, 0x41, 0xb5, 0xe5, 0x6e, 0x47, 0xc8, 0x37, 0x78, 0x90, 0xaf, 0x75, 0x42, 0x59,
		0xfe, 0xc7, 0x5c, 0x19, 0x03, 0xa4, 0x38, 0xef, 0xe7, 0xd8, 0x23, 0x21, 0x1e, 0xc3, 0xc1, 0x9a,
		0x41, 0x56, 0x84, 0xdb, 0x9a, 0xf0, 0x59, 0x21, 0xe1, 0xc5, 0xca, 0x40, 0x29, 0xb2, 0xfd, 0xb4,
		0xaf, 0x12, 0x96, 0x2b, 0xa8, 0xa3, 0x10, 0xe9, 0x0d, 0xee, 0xe8, 0xd7, 0x1f, 0x17, 0x8f, 0xa3,
		0xd2, 0x53, 0xef, 0xee, 0x62, 0x1a, 0xe8, 0x11, 0x30, 0x57, 0x86, 0x8d, 0x30, 0xfb, 0x02, 0x0e,
		0xf2, 0xf7, 0x4e, 0xba, 0xf0, 0x7f, 0x56, 0x4a, 0xfd, 0xe1, 0xb1, 0x8c, 0xd6, 0x56, 0xbb, 0x46,
		0xf7, 0xd6, 0x45, 0x79, 0xaf, 0x42, 0xf6, 0x67, 0x68, 0x16, 0xac, 0x94, 0x3c, 0x82, 0xfa, 0xd0,
		0x91, 0xa8, 0x0f, 0x80, 0xe9, 0x6f, 0x4c, 0xe4, 0xcc, 0x9a, 0x42, 0x95, 0xff, 0x2f, 0xd5, 0xf7,
		0x25, 0xff, 0x06, 0xb6, 0xf2, 0x6e, 0xe0, 0x23, 0xec, 0xe5, 0x6c, 0x93, 0xf4, 0x60, 0x27, 0x96,
		0x45, 0x37, 0x5a, 0xed, 0xb6, 0xff, 0xea, 0xea, 0x54, 0x29, 0x5d, 0x16, 0xda, 0xc7, 0xd0, 0xc8,
		0x3e, 0x4b, 0xa0, 0x94, 0x6a, 0x5a, 0xff, 0xb7, 0x07, 0xb0, 0xbb, 0xb6, 0x71, 0x75, 0x79, 0x91,
		0x62, 0x23, 0x3e, 0x8e, 0x52, 0xcb, 0xb4, 0xa2, 0x91, 0x73, 0x3e, 0x46, 0xf2, 0x10, 0x22, 0x41,
		0x58, 0xac, 0x82, 0x3e, 0xbb, 0x0a, 0xad, 0x69, 0xf0, 0x5d, 0x84, 0x75, 0x7f, 0x1a, 0x60, 0x66,
		0xcf, 0x8d, 0xfc, 0x80, 0xfd, 0x2c, 0xf6, 0xd6, 0x9f, 0x70, 0x72, 0xe7, 0x8b, 0xbd, 0x77, 0x76,
		0x87, 0x8a, 0x68, 0xaa, 0xb6, 0x71, 0x6a, 0x0c, 0xb7, 0xb5, 0xf4, 0x2f, 0xfe, 0x04, 0x00, 0x00,
		0xff, 0xff, 0xe9, 0x3f, 0x7b, 0x08, 0x87, 0x06, 0x00, 0x00,
	},
}
