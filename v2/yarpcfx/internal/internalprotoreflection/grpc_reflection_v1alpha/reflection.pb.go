// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reflection.proto

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package grpc_reflection_v1alpha

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// The message sent by the client when calling ServerReflectionInfo method.
type ServerReflectionRequest struct {
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// To use reflection service, the client should set one of the following
	// fields in message_request. The server distinguishes requests by their
	// defined field and then handles them using corresponding methods.
	//
	// Types that are valid to be assigned to MessageRequest:
	//	*ServerReflectionRequest_FileByFilename
	//	*ServerReflectionRequest_FileContainingSymbol
	//	*ServerReflectionRequest_FileContainingExtension
	//	*ServerReflectionRequest_AllExtensionNumbersOfType
	//	*ServerReflectionRequest_ListServices
	MessageRequest       isServerReflectionRequest_MessageRequest `protobuf_oneof:"message_request"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *ServerReflectionRequest) Reset()      { *m = ServerReflectionRequest{} }
func (*ServerReflectionRequest) ProtoMessage() {}
func (*ServerReflectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_reflection_68c07fb78cb8a466, []int{0}
}
func (m *ServerReflectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerReflectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerReflectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ServerReflectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerReflectionRequest.Merge(dst, src)
}
func (m *ServerReflectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *ServerReflectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerReflectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServerReflectionRequest proto.InternalMessageInfo

type isServerReflectionRequest_MessageRequest interface {
	isServerReflectionRequest_MessageRequest()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ServerReflectionRequest_FileByFilename struct {
	FileByFilename string `protobuf:"bytes,3,opt,name=file_by_filename,json=fileByFilename,proto3,oneof"`
}
type ServerReflectionRequest_FileContainingSymbol struct {
	FileContainingSymbol string `protobuf:"bytes,4,opt,name=file_containing_symbol,json=fileContainingSymbol,proto3,oneof"`
}
type ServerReflectionRequest_FileContainingExtension struct {
	FileContainingExtension *ExtensionRequest `protobuf:"bytes,5,opt,name=file_containing_extension,json=fileContainingExtension,oneof"`
}
type ServerReflectionRequest_AllExtensionNumbersOfType struct {
	AllExtensionNumbersOfType string `protobuf:"bytes,6,opt,name=all_extension_numbers_of_type,json=allExtensionNumbersOfType,proto3,oneof"`
}
type ServerReflectionRequest_ListServices struct {
	ListServices string `protobuf:"bytes,7,opt,name=list_services,json=listServices,proto3,oneof"`
}

func (*ServerReflectionRequest_FileByFilename) isServerReflectionRequest_MessageRequest()            {}
func (*ServerReflectionRequest_FileContainingSymbol) isServerReflectionRequest_MessageRequest()      {}
func (*ServerReflectionRequest_FileContainingExtension) isServerReflectionRequest_MessageRequest()   {}
func (*ServerReflectionRequest_AllExtensionNumbersOfType) isServerReflectionRequest_MessageRequest() {}
func (*ServerReflectionRequest_ListServices) isServerReflectionRequest_MessageRequest()              {}

func (m *ServerReflectionRequest) GetMessageRequest() isServerReflectionRequest_MessageRequest {
	if m != nil {
		return m.MessageRequest
	}
	return nil
}

func (m *ServerReflectionRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ServerReflectionRequest) GetFileByFilename() string {
	if x, ok := m.GetMessageRequest().(*ServerReflectionRequest_FileByFilename); ok {
		return x.FileByFilename
	}
	return ""
}

func (m *ServerReflectionRequest) GetFileContainingSymbol() string {
	if x, ok := m.GetMessageRequest().(*ServerReflectionRequest_FileContainingSymbol); ok {
		return x.FileContainingSymbol
	}
	return ""
}

func (m *ServerReflectionRequest) GetFileContainingExtension() *ExtensionRequest {
	if x, ok := m.GetMessageRequest().(*ServerReflectionRequest_FileContainingExtension); ok {
		return x.FileContainingExtension
	}
	return nil
}

func (m *ServerReflectionRequest) GetAllExtensionNumbersOfType() string {
	if x, ok := m.GetMessageRequest().(*ServerReflectionRequest_AllExtensionNumbersOfType); ok {
		return x.AllExtensionNumbersOfType
	}
	return ""
}

func (m *ServerReflectionRequest) GetListServices() string {
	if x, ok := m.GetMessageRequest().(*ServerReflectionRequest_ListServices); ok {
		return x.ListServices
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ServerReflectionRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ServerReflectionRequest_OneofMarshaler, _ServerReflectionRequest_OneofUnmarshaler, _ServerReflectionRequest_OneofSizer, []interface{}{
		(*ServerReflectionRequest_FileByFilename)(nil),
		(*ServerReflectionRequest_FileContainingSymbol)(nil),
		(*ServerReflectionRequest_FileContainingExtension)(nil),
		(*ServerReflectionRequest_AllExtensionNumbersOfType)(nil),
		(*ServerReflectionRequest_ListServices)(nil),
	}
}

func _ServerReflectionRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ServerReflectionRequest)
	// message_request
	switch x := m.MessageRequest.(type) {
	case *ServerReflectionRequest_FileByFilename:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.FileByFilename)
	case *ServerReflectionRequest_FileContainingSymbol:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.FileContainingSymbol)
	case *ServerReflectionRequest_FileContainingExtension:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FileContainingExtension); err != nil {
			return err
		}
	case *ServerReflectionRequest_AllExtensionNumbersOfType:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.AllExtensionNumbersOfType)
	case *ServerReflectionRequest_ListServices:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ListServices)
	case nil:
	default:
		return fmt.Errorf("ServerReflectionRequest.MessageRequest has unexpected type %T", x)
	}
	return nil
}

func _ServerReflectionRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ServerReflectionRequest)
	switch tag {
	case 3: // message_request.file_by_filename
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MessageRequest = &ServerReflectionRequest_FileByFilename{x}
		return true, err
	case 4: // message_request.file_containing_symbol
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MessageRequest = &ServerReflectionRequest_FileContainingSymbol{x}
		return true, err
	case 5: // message_request.file_containing_extension
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExtensionRequest)
		err := b.DecodeMessage(msg)
		m.MessageRequest = &ServerReflectionRequest_FileContainingExtension{msg}
		return true, err
	case 6: // message_request.all_extension_numbers_of_type
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MessageRequest = &ServerReflectionRequest_AllExtensionNumbersOfType{x}
		return true, err
	case 7: // message_request.list_services
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MessageRequest = &ServerReflectionRequest_ListServices{x}
		return true, err
	default:
		return false, nil
	}
}

func _ServerReflectionRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ServerReflectionRequest)
	// message_request
	switch x := m.MessageRequest.(type) {
	case *ServerReflectionRequest_FileByFilename:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.FileByFilename)))
		n += len(x.FileByFilename)
	case *ServerReflectionRequest_FileContainingSymbol:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.FileContainingSymbol)))
		n += len(x.FileContainingSymbol)
	case *ServerReflectionRequest_FileContainingExtension:
		s := proto.Size(x.FileContainingExtension)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerReflectionRequest_AllExtensionNumbersOfType:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.AllExtensionNumbersOfType)))
		n += len(x.AllExtensionNumbersOfType)
	case *ServerReflectionRequest_ListServices:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ListServices)))
		n += len(x.ListServices)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The type name and extension number sent by the client when requesting
// file_containing_extension.
type ExtensionRequest struct {
	// Fully-qualified type name. The format should be <package>.<type>
	ContainingType       string   `protobuf:"bytes,1,opt,name=containing_type,json=containingType,proto3" json:"containing_type,omitempty"`
	ExtensionNumber      int32    `protobuf:"varint,2,opt,name=extension_number,json=extensionNumber,proto3" json:"extension_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtensionRequest) Reset()      { *m = ExtensionRequest{} }
func (*ExtensionRequest) ProtoMessage() {}
func (*ExtensionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_reflection_68c07fb78cb8a466, []int{1}
}
func (m *ExtensionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtensionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtensionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ExtensionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtensionRequest.Merge(dst, src)
}
func (m *ExtensionRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExtensionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtensionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExtensionRequest proto.InternalMessageInfo

func (m *ExtensionRequest) GetContainingType() string {
	if m != nil {
		return m.ContainingType
	}
	return ""
}

func (m *ExtensionRequest) GetExtensionNumber() int32 {
	if m != nil {
		return m.ExtensionNumber
	}
	return 0
}

// The message sent by the server to answer ServerReflectionInfo method.
type ServerReflectionResponse struct {
	ValidHost       string                   `protobuf:"bytes,1,opt,name=valid_host,json=validHost,proto3" json:"valid_host,omitempty"`
	OriginalRequest *ServerReflectionRequest `protobuf:"bytes,2,opt,name=original_request,json=originalRequest" json:"original_request,omitempty"`
	// The server set one of the following fields accroding to the message_request
	// in the request.
	//
	// Types that are valid to be assigned to MessageResponse:
	//	*ServerReflectionResponse_FileDescriptorResponse
	//	*ServerReflectionResponse_AllExtensionNumbersResponse
	//	*ServerReflectionResponse_ListServicesResponse
	//	*ServerReflectionResponse_ErrorResponse
	MessageResponse      isServerReflectionResponse_MessageResponse `protobuf_oneof:"message_response"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *ServerReflectionResponse) Reset()      { *m = ServerReflectionResponse{} }
func (*ServerReflectionResponse) ProtoMessage() {}
func (*ServerReflectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_reflection_68c07fb78cb8a466, []int{2}
}
func (m *ServerReflectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerReflectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerReflectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ServerReflectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerReflectionResponse.Merge(dst, src)
}
func (m *ServerReflectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *ServerReflectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerReflectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServerReflectionResponse proto.InternalMessageInfo

type isServerReflectionResponse_MessageResponse interface {
	isServerReflectionResponse_MessageResponse()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ServerReflectionResponse_FileDescriptorResponse struct {
	FileDescriptorResponse *FileDescriptorResponse `protobuf:"bytes,4,opt,name=file_descriptor_response,json=fileDescriptorResponse,oneof"`
}
type ServerReflectionResponse_AllExtensionNumbersResponse struct {
	AllExtensionNumbersResponse *ExtensionNumberResponse `protobuf:"bytes,5,opt,name=all_extension_numbers_response,json=allExtensionNumbersResponse,oneof"`
}
type ServerReflectionResponse_ListServicesResponse struct {
	ListServicesResponse *ListServiceResponse `protobuf:"bytes,6,opt,name=list_services_response,json=listServicesResponse,oneof"`
}
type ServerReflectionResponse_ErrorResponse struct {
	ErrorResponse *ErrorResponse `protobuf:"bytes,7,opt,name=error_response,json=errorResponse,oneof"`
}

func (*ServerReflectionResponse_FileDescriptorResponse) isServerReflectionResponse_MessageResponse() {}
func (*ServerReflectionResponse_AllExtensionNumbersResponse) isServerReflectionResponse_MessageResponse() {
}
func (*ServerReflectionResponse_ListServicesResponse) isServerReflectionResponse_MessageResponse() {}
func (*ServerReflectionResponse_ErrorResponse) isServerReflectionResponse_MessageResponse()        {}

func (m *ServerReflectionResponse) GetMessageResponse() isServerReflectionResponse_MessageResponse {
	if m != nil {
		return m.MessageResponse
	}
	return nil
}

func (m *ServerReflectionResponse) GetValidHost() string {
	if m != nil {
		return m.ValidHost
	}
	return ""
}

func (m *ServerReflectionResponse) GetOriginalRequest() *ServerReflectionRequest {
	if m != nil {
		return m.OriginalRequest
	}
	return nil
}

func (m *ServerReflectionResponse) GetFileDescriptorResponse() *FileDescriptorResponse {
	if x, ok := m.GetMessageResponse().(*ServerReflectionResponse_FileDescriptorResponse); ok {
		return x.FileDescriptorResponse
	}
	return nil
}

func (m *ServerReflectionResponse) GetAllExtensionNumbersResponse() *ExtensionNumberResponse {
	if x, ok := m.GetMessageResponse().(*ServerReflectionResponse_AllExtensionNumbersResponse); ok {
		return x.AllExtensionNumbersResponse
	}
	return nil
}

func (m *ServerReflectionResponse) GetListServicesResponse() *ListServiceResponse {
	if x, ok := m.GetMessageResponse().(*ServerReflectionResponse_ListServicesResponse); ok {
		return x.ListServicesResponse
	}
	return nil
}

func (m *ServerReflectionResponse) GetErrorResponse() *ErrorResponse {
	if x, ok := m.GetMessageResponse().(*ServerReflectionResponse_ErrorResponse); ok {
		return x.ErrorResponse
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ServerReflectionResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ServerReflectionResponse_OneofMarshaler, _ServerReflectionResponse_OneofUnmarshaler, _ServerReflectionResponse_OneofSizer, []interface{}{
		(*ServerReflectionResponse_FileDescriptorResponse)(nil),
		(*ServerReflectionResponse_AllExtensionNumbersResponse)(nil),
		(*ServerReflectionResponse_ListServicesResponse)(nil),
		(*ServerReflectionResponse_ErrorResponse)(nil),
	}
}

func _ServerReflectionResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ServerReflectionResponse)
	// message_response
	switch x := m.MessageResponse.(type) {
	case *ServerReflectionResponse_FileDescriptorResponse:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FileDescriptorResponse); err != nil {
			return err
		}
	case *ServerReflectionResponse_AllExtensionNumbersResponse:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllExtensionNumbersResponse); err != nil {
			return err
		}
	case *ServerReflectionResponse_ListServicesResponse:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListServicesResponse); err != nil {
			return err
		}
	case *ServerReflectionResponse_ErrorResponse:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ErrorResponse); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ServerReflectionResponse.MessageResponse has unexpected type %T", x)
	}
	return nil
}

func _ServerReflectionResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ServerReflectionResponse)
	switch tag {
	case 4: // message_response.file_descriptor_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileDescriptorResponse)
		err := b.DecodeMessage(msg)
		m.MessageResponse = &ServerReflectionResponse_FileDescriptorResponse{msg}
		return true, err
	case 5: // message_response.all_extension_numbers_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExtensionNumberResponse)
		err := b.DecodeMessage(msg)
		m.MessageResponse = &ServerReflectionResponse_AllExtensionNumbersResponse{msg}
		return true, err
	case 6: // message_response.list_services_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListServiceResponse)
		err := b.DecodeMessage(msg)
		m.MessageResponse = &ServerReflectionResponse_ListServicesResponse{msg}
		return true, err
	case 7: // message_response.error_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ErrorResponse)
		err := b.DecodeMessage(msg)
		m.MessageResponse = &ServerReflectionResponse_ErrorResponse{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ServerReflectionResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ServerReflectionResponse)
	// message_response
	switch x := m.MessageResponse.(type) {
	case *ServerReflectionResponse_FileDescriptorResponse:
		s := proto.Size(x.FileDescriptorResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerReflectionResponse_AllExtensionNumbersResponse:
		s := proto.Size(x.AllExtensionNumbersResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerReflectionResponse_ListServicesResponse:
		s := proto.Size(x.ListServicesResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerReflectionResponse_ErrorResponse:
		s := proto.Size(x.ErrorResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Serialized FileDescriptorProto messages sent by the server answering
// a file_by_filename, file_containing_symbol, or file_containing_extension
// request.
type FileDescriptorResponse struct {
	// Serialized FileDescriptorProto messages. We avoid taking a dependency on
	// descriptor.proto, which uses proto2 only features, by making them opaque
	// bytes instead.
	FileDescriptorProto  [][]byte `protobuf:"bytes,1,rep,name=file_descriptor_proto,json=fileDescriptorProto" json:"file_descriptor_proto,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileDescriptorResponse) Reset()      { *m = FileDescriptorResponse{} }
func (*FileDescriptorResponse) ProtoMessage() {}
func (*FileDescriptorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_reflection_68c07fb78cb8a466, []int{3}
}
func (m *FileDescriptorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileDescriptorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileDescriptorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FileDescriptorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileDescriptorResponse.Merge(dst, src)
}
func (m *FileDescriptorResponse) XXX_Size() int {
	return m.Size()
}
func (m *FileDescriptorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FileDescriptorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FileDescriptorResponse proto.InternalMessageInfo

func (m *FileDescriptorResponse) GetFileDescriptorProto() [][]byte {
	if m != nil {
		return m.FileDescriptorProto
	}
	return nil
}

// A list of extension numbers sent by the server answering
// all_extension_numbers_of_type request.
type ExtensionNumberResponse struct {
	// Full name of the base type, including the package name. The format
	// is <package>.<type>
	BaseTypeName         string   `protobuf:"bytes,1,opt,name=base_type_name,json=baseTypeName,proto3" json:"base_type_name,omitempty"`
	ExtensionNumber      []int32  `protobuf:"varint,2,rep,packed,name=extension_number,json=extensionNumber" json:"extension_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtensionNumberResponse) Reset()      { *m = ExtensionNumberResponse{} }
func (*ExtensionNumberResponse) ProtoMessage() {}
func (*ExtensionNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_reflection_68c07fb78cb8a466, []int{4}
}
func (m *ExtensionNumberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtensionNumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtensionNumberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ExtensionNumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtensionNumberResponse.Merge(dst, src)
}
func (m *ExtensionNumberResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExtensionNumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtensionNumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExtensionNumberResponse proto.InternalMessageInfo

func (m *ExtensionNumberResponse) GetBaseTypeName() string {
	if m != nil {
		return m.BaseTypeName
	}
	return ""
}

func (m *ExtensionNumberResponse) GetExtensionNumber() []int32 {
	if m != nil {
		return m.ExtensionNumber
	}
	return nil
}

// A list of ServiceResponse sent by the server answering list_services request.
type ListServiceResponse struct {
	// The information of each service may be expanded in the future, so we use
	// ServiceResponse message to encapsulate it.
	Service              []*ServiceResponse `protobuf:"bytes,1,rep,name=service" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListServiceResponse) Reset()      { *m = ListServiceResponse{} }
func (*ListServiceResponse) ProtoMessage() {}
func (*ListServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_reflection_68c07fb78cb8a466, []int{5}
}
func (m *ListServiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceResponse.Merge(dst, src)
}
func (m *ListServiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceResponse proto.InternalMessageInfo

func (m *ListServiceResponse) GetService() []*ServiceResponse {
	if m != nil {
		return m.Service
	}
	return nil
}

// The information of a single service used by ListServiceResponse to answer
// list_services request.
type ServiceResponse struct {
	// Full name of a registered service, including its package name. The format
	// is <package>.<service>
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceResponse) Reset()      { *m = ServiceResponse{} }
func (*ServiceResponse) ProtoMessage() {}
func (*ServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_reflection_68c07fb78cb8a466, []int{6}
}
func (m *ServiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceResponse.Merge(dst, src)
}
func (m *ServiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *ServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceResponse proto.InternalMessageInfo

func (m *ServiceResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The error code and error message sent by the server when an error occurs.
type ErrorResponse struct {
	// This field uses the error codes defined in grpc::StatusCode.
	ErrorCode            int32    `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage         string   `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorResponse) Reset()      { *m = ErrorResponse{} }
func (*ErrorResponse) ProtoMessage() {}
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_reflection_68c07fb78cb8a466, []int{7}
}
func (m *ErrorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ErrorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorResponse.Merge(dst, src)
}
func (m *ErrorResponse) XXX_Size() int {
	return m.Size()
}
func (m *ErrorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorResponse proto.InternalMessageInfo

func (m *ErrorResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ErrorResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*ServerReflectionRequest)(nil), "grpc.reflection.v1alpha.ServerReflectionRequest")
	proto.RegisterType((*ExtensionRequest)(nil), "grpc.reflection.v1alpha.ExtensionRequest")
	proto.RegisterType((*ServerReflectionResponse)(nil), "grpc.reflection.v1alpha.ServerReflectionResponse")
	proto.RegisterType((*FileDescriptorResponse)(nil), "grpc.reflection.v1alpha.FileDescriptorResponse")
	proto.RegisterType((*ExtensionNumberResponse)(nil), "grpc.reflection.v1alpha.ExtensionNumberResponse")
	proto.RegisterType((*ListServiceResponse)(nil), "grpc.reflection.v1alpha.ListServiceResponse")
	proto.RegisterType((*ServiceResponse)(nil), "grpc.reflection.v1alpha.ServiceResponse")
	proto.RegisterType((*ErrorResponse)(nil), "grpc.reflection.v1alpha.ErrorResponse")
}
func (this *ServerReflectionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerReflectionRequest)
	if !ok {
		that2, ok := that.(ServerReflectionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if that1.MessageRequest == nil {
		if this.MessageRequest != nil {
			return false
		}
	} else if this.MessageRequest == nil {
		return false
	} else if !this.MessageRequest.Equal(that1.MessageRequest) {
		return false
	}
	return true
}
func (this *ServerReflectionRequest_FileByFilename) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerReflectionRequest_FileByFilename)
	if !ok {
		that2, ok := that.(ServerReflectionRequest_FileByFilename)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FileByFilename != that1.FileByFilename {
		return false
	}
	return true
}
func (this *ServerReflectionRequest_FileContainingSymbol) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerReflectionRequest_FileContainingSymbol)
	if !ok {
		that2, ok := that.(ServerReflectionRequest_FileContainingSymbol)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FileContainingSymbol != that1.FileContainingSymbol {
		return false
	}
	return true
}
func (this *ServerReflectionRequest_FileContainingExtension) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerReflectionRequest_FileContainingExtension)
	if !ok {
		that2, ok := that.(ServerReflectionRequest_FileContainingExtension)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FileContainingExtension.Equal(that1.FileContainingExtension) {
		return false
	}
	return true
}
func (this *ServerReflectionRequest_AllExtensionNumbersOfType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerReflectionRequest_AllExtensionNumbersOfType)
	if !ok {
		that2, ok := that.(ServerReflectionRequest_AllExtensionNumbersOfType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AllExtensionNumbersOfType != that1.AllExtensionNumbersOfType {
		return false
	}
	return true
}
func (this *ServerReflectionRequest_ListServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerReflectionRequest_ListServices)
	if !ok {
		that2, ok := that.(ServerReflectionRequest_ListServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ListServices != that1.ListServices {
		return false
	}
	return true
}
func (this *ExtensionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtensionRequest)
	if !ok {
		that2, ok := that.(ExtensionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ContainingType != that1.ContainingType {
		return false
	}
	if this.ExtensionNumber != that1.ExtensionNumber {
		return false
	}
	return true
}
func (this *ServerReflectionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerReflectionResponse)
	if !ok {
		that2, ok := that.(ServerReflectionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ValidHost != that1.ValidHost {
		return false
	}
	if !this.OriginalRequest.Equal(that1.OriginalRequest) {
		return false
	}
	if that1.MessageResponse == nil {
		if this.MessageResponse != nil {
			return false
		}
	} else if this.MessageResponse == nil {
		return false
	} else if !this.MessageResponse.Equal(that1.MessageResponse) {
		return false
	}
	return true
}
func (this *ServerReflectionResponse_FileDescriptorResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerReflectionResponse_FileDescriptorResponse)
	if !ok {
		that2, ok := that.(ServerReflectionResponse_FileDescriptorResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FileDescriptorResponse.Equal(that1.FileDescriptorResponse) {
		return false
	}
	return true
}
func (this *ServerReflectionResponse_AllExtensionNumbersResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerReflectionResponse_AllExtensionNumbersResponse)
	if !ok {
		that2, ok := that.(ServerReflectionResponse_AllExtensionNumbersResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllExtensionNumbersResponse.Equal(that1.AllExtensionNumbersResponse) {
		return false
	}
	return true
}
func (this *ServerReflectionResponse_ListServicesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerReflectionResponse_ListServicesResponse)
	if !ok {
		that2, ok := that.(ServerReflectionResponse_ListServicesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ListServicesResponse.Equal(that1.ListServicesResponse) {
		return false
	}
	return true
}
func (this *ServerReflectionResponse_ErrorResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerReflectionResponse_ErrorResponse)
	if !ok {
		that2, ok := that.(ServerReflectionResponse_ErrorResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ErrorResponse.Equal(that1.ErrorResponse) {
		return false
	}
	return true
}
func (this *FileDescriptorResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileDescriptorResponse)
	if !ok {
		that2, ok := that.(FileDescriptorResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.FileDescriptorProto) != len(that1.FileDescriptorProto) {
		return false
	}
	for i := range this.FileDescriptorProto {
		if !bytes.Equal(this.FileDescriptorProto[i], that1.FileDescriptorProto[i]) {
			return false
		}
	}
	return true
}
func (this *ExtensionNumberResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtensionNumberResponse)
	if !ok {
		that2, ok := that.(ExtensionNumberResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BaseTypeName != that1.BaseTypeName {
		return false
	}
	if len(this.ExtensionNumber) != len(that1.ExtensionNumber) {
		return false
	}
	for i := range this.ExtensionNumber {
		if this.ExtensionNumber[i] != that1.ExtensionNumber[i] {
			return false
		}
	}
	return true
}
func (this *ListServiceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListServiceResponse)
	if !ok {
		that2, ok := that.(ListServiceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Service) != len(that1.Service) {
		return false
	}
	for i := range this.Service {
		if !this.Service[i].Equal(that1.Service[i]) {
			return false
		}
	}
	return true
}
func (this *ServiceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceResponse)
	if !ok {
		that2, ok := that.(ServiceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ErrorResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ErrorResponse)
	if !ok {
		that2, ok := that.(ErrorResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ErrorCode != that1.ErrorCode {
		return false
	}
	if this.ErrorMessage != that1.ErrorMessage {
		return false
	}
	return true
}
func (this *ServerReflectionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&grpc_reflection_v1alpha.ServerReflectionRequest{")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	if this.MessageRequest != nil {
		s = append(s, "MessageRequest: "+fmt.Sprintf("%#v", this.MessageRequest)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerReflectionRequest_FileByFilename) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&grpc_reflection_v1alpha.ServerReflectionRequest_FileByFilename{` +
		`FileByFilename:` + fmt.Sprintf("%#v", this.FileByFilename) + `}`}, ", ")
	return s
}
func (this *ServerReflectionRequest_FileContainingSymbol) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&grpc_reflection_v1alpha.ServerReflectionRequest_FileContainingSymbol{` +
		`FileContainingSymbol:` + fmt.Sprintf("%#v", this.FileContainingSymbol) + `}`}, ", ")
	return s
}
func (this *ServerReflectionRequest_FileContainingExtension) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&grpc_reflection_v1alpha.ServerReflectionRequest_FileContainingExtension{` +
		`FileContainingExtension:` + fmt.Sprintf("%#v", this.FileContainingExtension) + `}`}, ", ")
	return s
}
func (this *ServerReflectionRequest_AllExtensionNumbersOfType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&grpc_reflection_v1alpha.ServerReflectionRequest_AllExtensionNumbersOfType{` +
		`AllExtensionNumbersOfType:` + fmt.Sprintf("%#v", this.AllExtensionNumbersOfType) + `}`}, ", ")
	return s
}
func (this *ServerReflectionRequest_ListServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&grpc_reflection_v1alpha.ServerReflectionRequest_ListServices{` +
		`ListServices:` + fmt.Sprintf("%#v", this.ListServices) + `}`}, ", ")
	return s
}
func (this *ExtensionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&grpc_reflection_v1alpha.ExtensionRequest{")
	s = append(s, "ContainingType: "+fmt.Sprintf("%#v", this.ContainingType)+",\n")
	s = append(s, "ExtensionNumber: "+fmt.Sprintf("%#v", this.ExtensionNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerReflectionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&grpc_reflection_v1alpha.ServerReflectionResponse{")
	s = append(s, "ValidHost: "+fmt.Sprintf("%#v", this.ValidHost)+",\n")
	if this.OriginalRequest != nil {
		s = append(s, "OriginalRequest: "+fmt.Sprintf("%#v", this.OriginalRequest)+",\n")
	}
	if this.MessageResponse != nil {
		s = append(s, "MessageResponse: "+fmt.Sprintf("%#v", this.MessageResponse)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerReflectionResponse_FileDescriptorResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&grpc_reflection_v1alpha.ServerReflectionResponse_FileDescriptorResponse{` +
		`FileDescriptorResponse:` + fmt.Sprintf("%#v", this.FileDescriptorResponse) + `}`}, ", ")
	return s
}
func (this *ServerReflectionResponse_AllExtensionNumbersResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&grpc_reflection_v1alpha.ServerReflectionResponse_AllExtensionNumbersResponse{` +
		`AllExtensionNumbersResponse:` + fmt.Sprintf("%#v", this.AllExtensionNumbersResponse) + `}`}, ", ")
	return s
}
func (this *ServerReflectionResponse_ListServicesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&grpc_reflection_v1alpha.ServerReflectionResponse_ListServicesResponse{` +
		`ListServicesResponse:` + fmt.Sprintf("%#v", this.ListServicesResponse) + `}`}, ", ")
	return s
}
func (this *ServerReflectionResponse_ErrorResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&grpc_reflection_v1alpha.ServerReflectionResponse_ErrorResponse{` +
		`ErrorResponse:` + fmt.Sprintf("%#v", this.ErrorResponse) + `}`}, ", ")
	return s
}
func (this *FileDescriptorResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc_reflection_v1alpha.FileDescriptorResponse{")
	s = append(s, "FileDescriptorProto: "+fmt.Sprintf("%#v", this.FileDescriptorProto)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExtensionNumberResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&grpc_reflection_v1alpha.ExtensionNumberResponse{")
	s = append(s, "BaseTypeName: "+fmt.Sprintf("%#v", this.BaseTypeName)+",\n")
	s = append(s, "ExtensionNumber: "+fmt.Sprintf("%#v", this.ExtensionNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListServiceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc_reflection_v1alpha.ListServiceResponse{")
	if this.Service != nil {
		s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc_reflection_v1alpha.ServiceResponse{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ErrorResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&grpc_reflection_v1alpha.ErrorResponse{")
	s = append(s, "ErrorCode: "+fmt.Sprintf("%#v", this.ErrorCode)+",\n")
	s = append(s, "ErrorMessage: "+fmt.Sprintf("%#v", this.ErrorMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringReflection(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ServerReflectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerReflectionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Host) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReflection(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if m.MessageRequest != nil {
		nn1, err := m.MessageRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *ServerReflectionRequest_FileByFilename) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1a
	i++
	i = encodeVarintReflection(dAtA, i, uint64(len(m.FileByFilename)))
	i += copy(dAtA[i:], m.FileByFilename)
	return i, nil
}
func (m *ServerReflectionRequest_FileContainingSymbol) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x22
	i++
	i = encodeVarintReflection(dAtA, i, uint64(len(m.FileContainingSymbol)))
	i += copy(dAtA[i:], m.FileContainingSymbol)
	return i, nil
}
func (m *ServerReflectionRequest_FileContainingExtension) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FileContainingExtension != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintReflection(dAtA, i, uint64(m.FileContainingExtension.Size()))
		n2, err := m.FileContainingExtension.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *ServerReflectionRequest_AllExtensionNumbersOfType) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x32
	i++
	i = encodeVarintReflection(dAtA, i, uint64(len(m.AllExtensionNumbersOfType)))
	i += copy(dAtA[i:], m.AllExtensionNumbersOfType)
	return i, nil
}
func (m *ServerReflectionRequest_ListServices) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x3a
	i++
	i = encodeVarintReflection(dAtA, i, uint64(len(m.ListServices)))
	i += copy(dAtA[i:], m.ListServices)
	return i, nil
}
func (m *ExtensionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtensionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContainingType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReflection(dAtA, i, uint64(len(m.ContainingType)))
		i += copy(dAtA[i:], m.ContainingType)
	}
	if m.ExtensionNumber != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintReflection(dAtA, i, uint64(m.ExtensionNumber))
	}
	return i, nil
}

func (m *ServerReflectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerReflectionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ValidHost) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReflection(dAtA, i, uint64(len(m.ValidHost)))
		i += copy(dAtA[i:], m.ValidHost)
	}
	if m.OriginalRequest != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintReflection(dAtA, i, uint64(m.OriginalRequest.Size()))
		n3, err := m.OriginalRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.MessageResponse != nil {
		nn4, err := m.MessageResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	return i, nil
}

func (m *ServerReflectionResponse_FileDescriptorResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FileDescriptorResponse != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintReflection(dAtA, i, uint64(m.FileDescriptorResponse.Size()))
		n5, err := m.FileDescriptorResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *ServerReflectionResponse_AllExtensionNumbersResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AllExtensionNumbersResponse != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintReflection(dAtA, i, uint64(m.AllExtensionNumbersResponse.Size()))
		n6, err := m.AllExtensionNumbersResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *ServerReflectionResponse_ListServicesResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ListServicesResponse != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintReflection(dAtA, i, uint64(m.ListServicesResponse.Size()))
		n7, err := m.ListServicesResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *ServerReflectionResponse_ErrorResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ErrorResponse != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintReflection(dAtA, i, uint64(m.ErrorResponse.Size()))
		n8, err := m.ErrorResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *FileDescriptorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileDescriptorResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FileDescriptorProto) > 0 {
		for _, b := range m.FileDescriptorProto {
			dAtA[i] = 0xa
			i++
			i = encodeVarintReflection(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *ExtensionNumberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtensionNumberResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BaseTypeName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReflection(dAtA, i, uint64(len(m.BaseTypeName)))
		i += copy(dAtA[i:], m.BaseTypeName)
	}
	if len(m.ExtensionNumber) > 0 {
		dAtA10 := make([]byte, len(m.ExtensionNumber)*10)
		var j9 int
		for _, num1 := range m.ExtensionNumber {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintReflection(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	return i, nil
}

func (m *ListServiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServiceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Service) > 0 {
		for _, msg := range m.Service {
			dAtA[i] = 0xa
			i++
			i = encodeVarintReflection(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ServiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReflection(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *ErrorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReflection(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.ErrorMessage) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintReflection(dAtA, i, uint64(len(m.ErrorMessage)))
		i += copy(dAtA[i:], m.ErrorMessage)
	}
	return i, nil
}

func encodeVarintReflection(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ServerReflectionRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovReflection(uint64(l))
	}
	if m.MessageRequest != nil {
		n += m.MessageRequest.Size()
	}
	return n
}

func (m *ServerReflectionRequest_FileByFilename) Size() (n int) {
	var l int
	_ = l
	l = len(m.FileByFilename)
	n += 1 + l + sovReflection(uint64(l))
	return n
}
func (m *ServerReflectionRequest_FileContainingSymbol) Size() (n int) {
	var l int
	_ = l
	l = len(m.FileContainingSymbol)
	n += 1 + l + sovReflection(uint64(l))
	return n
}
func (m *ServerReflectionRequest_FileContainingExtension) Size() (n int) {
	var l int
	_ = l
	if m.FileContainingExtension != nil {
		l = m.FileContainingExtension.Size()
		n += 1 + l + sovReflection(uint64(l))
	}
	return n
}
func (m *ServerReflectionRequest_AllExtensionNumbersOfType) Size() (n int) {
	var l int
	_ = l
	l = len(m.AllExtensionNumbersOfType)
	n += 1 + l + sovReflection(uint64(l))
	return n
}
func (m *ServerReflectionRequest_ListServices) Size() (n int) {
	var l int
	_ = l
	l = len(m.ListServices)
	n += 1 + l + sovReflection(uint64(l))
	return n
}
func (m *ExtensionRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ContainingType)
	if l > 0 {
		n += 1 + l + sovReflection(uint64(l))
	}
	if m.ExtensionNumber != 0 {
		n += 1 + sovReflection(uint64(m.ExtensionNumber))
	}
	return n
}

func (m *ServerReflectionResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.ValidHost)
	if l > 0 {
		n += 1 + l + sovReflection(uint64(l))
	}
	if m.OriginalRequest != nil {
		l = m.OriginalRequest.Size()
		n += 1 + l + sovReflection(uint64(l))
	}
	if m.MessageResponse != nil {
		n += m.MessageResponse.Size()
	}
	return n
}

func (m *ServerReflectionResponse_FileDescriptorResponse) Size() (n int) {
	var l int
	_ = l
	if m.FileDescriptorResponse != nil {
		l = m.FileDescriptorResponse.Size()
		n += 1 + l + sovReflection(uint64(l))
	}
	return n
}
func (m *ServerReflectionResponse_AllExtensionNumbersResponse) Size() (n int) {
	var l int
	_ = l
	if m.AllExtensionNumbersResponse != nil {
		l = m.AllExtensionNumbersResponse.Size()
		n += 1 + l + sovReflection(uint64(l))
	}
	return n
}
func (m *ServerReflectionResponse_ListServicesResponse) Size() (n int) {
	var l int
	_ = l
	if m.ListServicesResponse != nil {
		l = m.ListServicesResponse.Size()
		n += 1 + l + sovReflection(uint64(l))
	}
	return n
}
func (m *ServerReflectionResponse_ErrorResponse) Size() (n int) {
	var l int
	_ = l
	if m.ErrorResponse != nil {
		l = m.ErrorResponse.Size()
		n += 1 + l + sovReflection(uint64(l))
	}
	return n
}
func (m *FileDescriptorResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.FileDescriptorProto) > 0 {
		for _, b := range m.FileDescriptorProto {
			l = len(b)
			n += 1 + l + sovReflection(uint64(l))
		}
	}
	return n
}

func (m *ExtensionNumberResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.BaseTypeName)
	if l > 0 {
		n += 1 + l + sovReflection(uint64(l))
	}
	if len(m.ExtensionNumber) > 0 {
		l = 0
		for _, e := range m.ExtensionNumber {
			l += sovReflection(uint64(e))
		}
		n += 1 + sovReflection(uint64(l)) + l
	}
	return n
}

func (m *ListServiceResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Service) > 0 {
		for _, e := range m.Service {
			l = e.Size()
			n += 1 + l + sovReflection(uint64(l))
		}
	}
	return n
}

func (m *ServiceResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovReflection(uint64(l))
	}
	return n
}

func (m *ErrorResponse) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovReflection(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovReflection(uint64(l))
	}
	return n
}

func sovReflection(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozReflection(x uint64) (n int) {
	return sovReflection(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ServerReflectionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionRequest{`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`MessageRequest:` + fmt.Sprintf("%v", this.MessageRequest) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerReflectionRequest_FileByFilename) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionRequest_FileByFilename{`,
		`FileByFilename:` + fmt.Sprintf("%v", this.FileByFilename) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerReflectionRequest_FileContainingSymbol) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionRequest_FileContainingSymbol{`,
		`FileContainingSymbol:` + fmt.Sprintf("%v", this.FileContainingSymbol) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerReflectionRequest_FileContainingExtension) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionRequest_FileContainingExtension{`,
		`FileContainingExtension:` + strings.Replace(fmt.Sprintf("%v", this.FileContainingExtension), "ExtensionRequest", "ExtensionRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerReflectionRequest_AllExtensionNumbersOfType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionRequest_AllExtensionNumbersOfType{`,
		`AllExtensionNumbersOfType:` + fmt.Sprintf("%v", this.AllExtensionNumbersOfType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerReflectionRequest_ListServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionRequest_ListServices{`,
		`ListServices:` + fmt.Sprintf("%v", this.ListServices) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExtensionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExtensionRequest{`,
		`ContainingType:` + fmt.Sprintf("%v", this.ContainingType) + `,`,
		`ExtensionNumber:` + fmt.Sprintf("%v", this.ExtensionNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerReflectionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionResponse{`,
		`ValidHost:` + fmt.Sprintf("%v", this.ValidHost) + `,`,
		`OriginalRequest:` + strings.Replace(fmt.Sprintf("%v", this.OriginalRequest), "ServerReflectionRequest", "ServerReflectionRequest", 1) + `,`,
		`MessageResponse:` + fmt.Sprintf("%v", this.MessageResponse) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerReflectionResponse_FileDescriptorResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionResponse_FileDescriptorResponse{`,
		`FileDescriptorResponse:` + strings.Replace(fmt.Sprintf("%v", this.FileDescriptorResponse), "FileDescriptorResponse", "FileDescriptorResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerReflectionResponse_AllExtensionNumbersResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionResponse_AllExtensionNumbersResponse{`,
		`AllExtensionNumbersResponse:` + strings.Replace(fmt.Sprintf("%v", this.AllExtensionNumbersResponse), "ExtensionNumberResponse", "ExtensionNumberResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerReflectionResponse_ListServicesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionResponse_ListServicesResponse{`,
		`ListServicesResponse:` + strings.Replace(fmt.Sprintf("%v", this.ListServicesResponse), "ListServiceResponse", "ListServiceResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerReflectionResponse_ErrorResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionResponse_ErrorResponse{`,
		`ErrorResponse:` + strings.Replace(fmt.Sprintf("%v", this.ErrorResponse), "ErrorResponse", "ErrorResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FileDescriptorResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FileDescriptorResponse{`,
		`FileDescriptorProto:` + fmt.Sprintf("%v", this.FileDescriptorProto) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExtensionNumberResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExtensionNumberResponse{`,
		`BaseTypeName:` + fmt.Sprintf("%v", this.BaseTypeName) + `,`,
		`ExtensionNumber:` + fmt.Sprintf("%v", this.ExtensionNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListServiceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListServiceResponse{`,
		`Service:` + strings.Replace(fmt.Sprintf("%v", this.Service), "ServiceResponse", "ServiceResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceResponse{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ErrorResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ErrorResponse{`,
		`ErrorCode:` + fmt.Sprintf("%v", this.ErrorCode) + `,`,
		`ErrorMessage:` + fmt.Sprintf("%v", this.ErrorMessage) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringReflection(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ServerReflectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReflection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerReflectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerReflectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileByFilename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageRequest = &ServerReflectionRequest_FileByFilename{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileContainingSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageRequest = &ServerReflectionRequest_FileContainingSymbol{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileContainingExtension", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExtensionRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageRequest = &ServerReflectionRequest_FileContainingExtension{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllExtensionNumbersOfType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageRequest = &ServerReflectionRequest_AllExtensionNumbersOfType{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListServices", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageRequest = &ServerReflectionRequest_ListServices{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReflection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReflection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtensionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReflection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtensionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtensionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainingType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainingType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionNumber", wireType)
			}
			m.ExtensionNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtensionNumber |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReflection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReflection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerReflectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReflection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerReflectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerReflectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginalRequest == nil {
				m.OriginalRequest = &ServerReflectionRequest{}
			}
			if err := m.OriginalRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileDescriptorResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FileDescriptorResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageResponse = &ServerReflectionResponse_FileDescriptorResponse{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllExtensionNumbersResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExtensionNumberResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageResponse = &ServerReflectionResponse_AllExtensionNumbersResponse{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListServicesResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListServiceResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageResponse = &ServerReflectionResponse_ListServicesResponse{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ErrorResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageResponse = &ServerReflectionResponse_ErrorResponse{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReflection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReflection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileDescriptorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReflection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileDescriptorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileDescriptorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileDescriptorProto", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileDescriptorProto = append(m.FileDescriptorProto, make([]byte, postIndex-iNdEx))
			copy(m.FileDescriptorProto[len(m.FileDescriptorProto)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReflection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReflection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtensionNumberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReflection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtensionNumberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtensionNumberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseTypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReflection
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExtensionNumber = append(m.ExtensionNumber, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReflection
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthReflection
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReflection
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExtensionNumber = append(m.ExtensionNumber, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionNumber", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReflection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReflection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReflection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListServiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListServiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = append(m.Service, &ServiceResponse{})
			if err := m.Service[len(m.Service)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReflection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReflection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReflection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReflection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReflection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReflection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReflection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReflection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReflection(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReflection
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthReflection
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowReflection
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipReflection(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthReflection = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReflection   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("reflection.proto", fileDescriptor_reflection_68c07fb78cb8a466) }

var fileDescriptor_reflection_68c07fb78cb8a466 = []byte{
	// 705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xf6, 0xb6, 0x49, 0xab, 0x4c, 0xd2, 0xc4, 0xff, 0xb6, 0x7f, 0xe3, 0x82, 0x6a, 0x45, 0x86,
	0x42, 0x8a, 0xaa, 0xd0, 0x06, 0x89, 0x07, 0x48, 0x01, 0x05, 0xa9, 0xb4, 0xc8, 0xe1, 0x82, 0x38,
	0x58, 0x4e, 0xb2, 0x49, 0x0d, 0x8e, 0xd7, 0xec, 0xba, 0x81, 0x9c, 0xe0, 0x11, 0x90, 0x78, 0x09,
	0xde, 0x04, 0x8e, 0x3d, 0x72, 0xa4, 0xe6, 0xc2, 0xb1, 0x47, 0x8e, 0xc8, 0x6b, 0xc7, 0x71, 0xdc,
	0x18, 0xd4, 0x53, 0xa2, 0x6f, 0x66, 0xf6, 0x9b, 0x99, 0xef, 0x1b, 0x83, 0xcc, 0xc8, 0xc0, 0x26,
	0x3d, 0xcf, 0xa2, 0x4e, 0xc3, 0x65, 0xd4, 0xa3, 0xb8, 0x3a, 0x64, 0x6e, 0xaf, 0x91, 0x80, 0xc7,
	0x07, 0xa6, 0xed, 0x9e, 0x9a, 0xda, 0xef, 0x25, 0xa8, 0x76, 0x08, 0x1b, 0x13, 0xa6, 0xc7, 0x41,
	0x9d, 0xbc, 0x3d, 0x23, 0xdc, 0xc3, 0x18, 0x72, 0xa7, 0x94, 0x7b, 0x0a, 0xaa, 0xa1, 0x7a, 0x41,
	0x17, 0xff, 0xf1, 0x3d, 0x90, 0x07, 0x96, 0x4d, 0x8c, 0xee, 0xc4, 0x08, 0x7e, 0x1d, 0x73, 0x44,
	0x94, 0xe5, 0x20, 0xde, 0x96, 0xf4, 0x72, 0x80, 0xb4, 0x26, 0x4f, 0x22, 0x1c, 0x3f, 0x84, 0x4d,
	0x91, 0xdb, 0xa3, 0x8e, 0x67, 0x5a, 0x8e, 0xe5, 0x0c, 0x0d, 0x3e, 0x19, 0x75, 0xa9, 0xad, 0xe4,
	0xa2, 0x8a, 0x8d, 0x20, 0x7e, 0x18, 0x87, 0x3b, 0x22, 0x8a, 0x87, 0xb0, 0x95, 0xae, 0x23, 0xef,
	0x3d, 0xe2, 0x70, 0x8b, 0x3a, 0x4a, 0xbe, 0x86, 0xea, 0xc5, 0xe6, 0x6e, 0x23, 0x63, 0xa0, 0xc6,
	0xe3, 0x69, 0x66, 0x34, 0x45, 0x5b, 0xd2, 0xab, 0xf3, 0x2c, 0x71, 0x06, 0x6e, 0xc1, 0xb6, 0x69,
	0xdb, 0xb3, 0xc7, 0x0d, 0xe7, 0x6c, 0xd4, 0x25, 0x8c, 0x1b, 0x74, 0x60, 0x78, 0x13, 0x97, 0x28,
	0x2b, 0x51, 0x9f, 0x5b, 0xa6, 0x6d, 0xc7, 0x65, 0xc7, 0x61, 0xd2, 0xc9, 0xe0, 0xc5, 0xc4, 0x25,
	0x78, 0x07, 0xd6, 0x6c, 0x8b, 0x7b, 0x06, 0x27, 0x6c, 0x6c, 0xf5, 0x08, 0x57, 0x56, 0xa3, 0x9a,
	0x52, 0x00, 0x77, 0x22, 0xb4, 0xf5, 0x1f, 0x54, 0x46, 0x84, 0x73, 0x73, 0x48, 0x0c, 0x16, 0x36,
	0xa6, 0x0d, 0x40, 0x4e, 0x37, 0x8b, 0xef, 0x42, 0x25, 0x31, 0xb5, 0xe8, 0x21, 0xdc, 0x7e, 0x79,
	0x06, 0x0b, 0xda, 0x5d, 0x90, 0xd3, 0x6d, 0x2b, 0x4b, 0x35, 0x54, 0xcf, 0xeb, 0x15, 0x32, 0xdf,
	0xa8, 0xf6, 0x35, 0x07, 0xca, 0x55, 0x89, 0xb9, 0x4b, 0x1d, 0x4e, 0xf0, 0x36, 0xc0, 0xd8, 0xb4,
	0xad, 0xbe, 0x91, 0x50, 0xba, 0x20, 0x90, 0x76, 0x20, 0xf7, 0x2b, 0x90, 0x29, 0xb3, 0x86, 0x96,
	0x63, 0xda, 0xd3, 0xbe, 0x05, 0x4d, 0xb1, 0xb9, 0x9f, 0xa9, 0x40, 0x86, 0x9d, 0xf4, 0xca, 0xf4,
	0xa5, 0xe9, 0xb0, 0x6f, 0x40, 0x11, 0x3a, 0xf7, 0x09, 0xef, 0x31, 0xcb, 0xf5, 0x28, 0x33, 0x58,
	0xd4, 0x97, 0x70, 0x48, 0xb1, 0x79, 0x3f, 0x93, 0x24, 0x30, 0xd9, 0xa3, 0xb8, 0x6e, 0x3a, 0x4e,
	0x5b, 0xd2, 0x85, 0xe5, 0xae, 0x46, 0xf0, 0x3b, 0x50, 0x17, 0x6b, 0x1d, 0x53, 0xe6, 0xff, 0x31,
	0x57, 0xca, 0x00, 0x09, 0xce, 0x9b, 0x0b, 0xec, 0x11, 0x13, 0xf7, 0x61, 0x73, 0xce, 0x20, 0x33,
	0xc2, 0x15, 0x41, 0xb8, 0x97, 0x49, 0x78, 0x34, 0x33, 0x50, 0x82, 0x6c, 0x23, 0xe9, 0xab, 0x98,
	0xe5, 0x04, 0xca, 0x84, 0xb1, 0xe4, 0x06, 0x57, 0xc5, 0xeb, 0x77, 0xb2, 0xc7, 0x09, 0xd2, 0x13,
	0xef, 0xae, 0x91, 0x24, 0xd0, 0xc2, 0x20, 0xcf, 0x0c, 0x1b, 0x62, 0xda, 0x11, 0x6c, 0x2e, 0xde,
	0x3b, 0x6e, 0xc2, 0xff, 0x69, 0x29, 0xc5, 0x87, 0x47, 0x41, 0xb5, 0xe5, 0x7a, 0x49, 0x5f, 0x9f,
	0x17, 0xe5, 0x79, 0x10, 0xd2, 0x5e, 0x43, 0x35, 0x63, 0xa5, 0xf8, 0x36, 0x94, 0xbb, 0x26, 0x27,
	0xe2, 0x00, 0x0c, 0xf1, 0x8d, 0x09, 0x9d, 0x59, 0x0a, 0xd0, 0xc0, 0xff, 0xc7, 0xc1, 0xf7, 0x65,
	0xf1, 0x0d, 0x2c, 0x2f, 0xba, 0x81, 0x97, 0xb0, 0xbe, 0x60, 0x9b, 0xb8, 0x05, 0xab, 0x91, 0x2c,
	0xa2, 0xd1, 0x62, 0xb3, 0xfe, 0x57, 0x57, 0x27, 0x4a, 0xf5, 0x69, 0xa1, 0xb6, 0x03, 0x95, 0xf4,
	0xb3, 0x18, 0x72, 0x89, 0xa6, 0xc5, 0x7f, 0xad, 0x03, 0x6b, 0x73, 0x1b, 0x0f, 0x2e, 0x2f, 0x54,
	0xac, 0x47, 0xfb, 0x61, 0x6a, 0x5e, 0x2f, 0x08, 0xe4, 0x90, 0xf6, 0x09, 0xbe, 0x05, 0xa1, 0x20,
	0x46, 0xa4, 0x82, 0x38, 0xbb, 0x82, 0x5e, 0x12, 0xe0, 0xb3, 0x10, 0x6b, 0x7e, 0x46, 0x20, 0xa7,
	0xcf, 0x0d, 0x7f, 0x80, 0x8d, 0x34, 0xf6, 0xd4, 0x19, 0x50, 0x7c, 0xed, 0x8b, 0xbd, 0x71, 0x70,
	0x8d, 0x8a, 0x70, 0xaa, 0x3a, 0xda, 0x47, 0xad, 0xbd, 0xf3, 0x0b, 0x55, 0xfa, 0x7e, 0xa1, 0x4a,
	0x97, 0x17, 0x2a, 0xfa, 0xe8, 0xab, 0xe8, 0x8b, 0xaf, 0xa2, 0x6f, 0xbe, 0x8a, 0xce, 0x7d, 0x15,
	0xfd, 0xf0, 0x55, 0xf4, 0xcb, 0x57, 0xa5, 0x4b, 0x5f, 0x45, 0x9f, 0x7e, 0xaa, 0x52, 0x77, 0x45,
	0x18, 0xe5, 0xc1, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x32, 0xdd, 0x2b, 0x9a, 0xb5, 0x06, 0x00,
	0x00,
}
