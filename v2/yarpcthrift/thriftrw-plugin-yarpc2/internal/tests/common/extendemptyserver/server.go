// Code generated by thriftrw-plugin-yarpc
// @generated

package extendemptyserver

import (
	"context"
	"go.uber.org/thriftrw/envelope"
	"go.uber.org/thriftrw/wire"
	yarpc "go.uber.org/yarpc/v2"
	"go.uber.org/yarpc/v2/yarpcerror"
	"go.uber.org/yarpc/v2/yarpcthrift"
	"go.uber.org/yarpc/v2/yarpcthrift/thriftrw-plugin-yarpc2/internal/tests/common"
	"go.uber.org/yarpc/v2/yarpcthrift/thriftrw-plugin-yarpc2/internal/tests/common/emptyserviceserver"
)

// Interface is the server-side interface for the ExtendEmpty service.
type Interface interface {
	emptyserviceserver.Interface

	Hello(
		ctx context.Context,
	) error
}

// New prepares an implementation of the ExtendEmpty service for
// registration.
//
// 	handler := ExtendEmptyHandler{}
// 	dispatcher.Register(extendemptyserver.New(handler))
func New(impl Interface, opts ...yarpcthrift.RegisterOption) []yarpc.EncodingProcedure {
	h := handler{impl}
	service := yarpcthrift.Service{
		Name: "ExtendEmpty",
		Methods: []yarpcthrift.Method{

			yarpcthrift.Method{
				Name:         "hello",
				Handler:      yarpcthrift.EncodingHandler(h.Hello),
				Signature:    "Hello()",
				ThriftModule: common.ThriftModule,
			},
		},
	}

	procedures := make([]yarpc.EncodingProcedure, 0, 1)
	procedures = append(procedures, emptyserviceserver.New(impl, opts...)...)
	procedures = append(procedures, yarpcthrift.BuildProcedures(service, opts...)...)
	return procedures
}

type handler struct{ impl Interface }

func (h handler) Hello(ctx context.Context, body wire.Value) (envelope.Enveloper, error) {
	var args common.ExtendEmpty_Hello_Args
	if err := args.FromWire(body); err != nil {
		return nil, err
	}

	appErr := h.impl.Hello(ctx)

	result, err := common.ExtendEmpty_Hello_Helper.WrapResponse(appErr)
	if err != nil {
		return nil, err
	}

	if appErr != nil {
		return nil, yarpcerror.New(
			yarpcerror.CodeUnknown,
			appErr.Error(),
			yarpcerror.WithDetails(result),
		)
	}
	return result, nil
}
