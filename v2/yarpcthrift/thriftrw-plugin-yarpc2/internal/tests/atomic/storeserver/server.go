// Code generated by thriftrw-plugin-yarpc
// @generated

package storeserver

import (
	"context"
	"go.uber.org/thriftrw/wire"
	yarpc "go.uber.org/yarpc/v2"
	"go.uber.org/yarpc/v2/yarpcthrift"
	"go.uber.org/yarpc/v2/yarpcthrift/thriftrw-plugin-yarpc2/internal/tests/atomic"
	"go.uber.org/yarpc/v2/yarpcthrift/thriftrw-plugin-yarpc2/internal/tests/atomic/readonlystoreserver"
)

// Interface is the server-side interface for the Store service.
type Interface interface {
	readonlystoreserver.Interface

	CompareAndSwap(
		ctx context.Context,
		Request *atomic.CompareAndSwap,
	) error

	Increment(
		ctx context.Context,
		Key *string,
		Value *int64,
	) error
}

// New prepares an implementation of the Store service for
// registration.
//
// 	handler := StoreHandler{}
// 	dispatcher.Register(storeserver.New(handler))
func New(impl Interface, opts ...yarpcthrift.RegisterOption) []yarpc.TransportProcedure {
	h := handler{impl}
	service := yarpcthrift.Service{
		Name: "Store",
		Methods: []yarpcthrift.Method{

			yarpcthrift.Method{
				Name:         "compareAndSwap",
				Handler:      yarpcthrift.Handler(h.CompareAndSwap),
				Signature:    "CompareAndSwap(Request *atomic.CompareAndSwap)",
				ThriftModule: atomic.ThriftModule,
			},

			yarpcthrift.Method{
				Name:         "increment",
				Handler:      yarpcthrift.Handler(h.Increment),
				Signature:    "Increment(Key *string, Value *int64)",
				ThriftModule: atomic.ThriftModule,
			},
		},
	}

	procedures := make([]yarpc.TransportProcedure, 0, 3)
	procedures = append(procedures, readonlystoreserver.New(impl, opts...)...)
	procedures = append(procedures, yarpcthrift.BuildProcedures(service, opts...)...)
	return procedures
}

type handler struct{ impl Interface }

func (h handler) CompareAndSwap(ctx context.Context, body wire.Value) (yarpcthrift.Response, error) {
	var args atomic.Store_CompareAndSwap_Args
	if err := args.FromWire(body); err != nil {
		return yarpcthrift.Response{}, err
	}

	err := h.impl.CompareAndSwap(ctx, args.Request)

	hadError := err != nil
	result, err := atomic.Store_CompareAndSwap_Helper.WrapResponse(err)

	var response yarpcthrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) Increment(ctx context.Context, body wire.Value) (yarpcthrift.Response, error) {
	var args atomic.Store_Increment_Args
	if err := args.FromWire(body); err != nil {
		return yarpcthrift.Response{}, err
	}

	err := h.impl.Increment(ctx, args.Key, args.Value)

	hadError := err != nil
	result, err := atomic.Store_Increment_Helper.WrapResponse(err)

	var response yarpcthrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}
