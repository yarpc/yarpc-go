// Code generated by thriftrw-plugin-yarpc
// @generated

package emptyserviceserver

import (
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/thrift"
)

// Interface is the server-side interface for the EmptyService service.
type Interface interface {
}

// New prepares an implementation of the EmptyService service for
// registration.
//
// 	handler := EmptyServiceHandler{}
// 	dispatcher.Register(emptyserviceserver.New(handler))
func New(impl Interface, opts ...thrift.RegisterOption) []transport.Procedure {

	service := thrift.Service{
		Name:    "EmptyService",
		Methods: []thrift.Method{},
	}

	procedures := make([]transport.Procedure, 0, 0)
	procedures = append(procedures, thrift.BuildProcedures(service, opts...)...)
	return procedures
}

type handler struct{ impl Interface }
