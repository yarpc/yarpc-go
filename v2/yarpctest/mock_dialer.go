// Code generated by MockGen. DO NOT EDIT.
// Source: go.uber.org/yarpc/v2 (interfaces: Dialer)

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package yarpctest is a generated GoMock package.
package yarpctest

import (
	gomock "github.com/golang/mock/gomock"
	v2 "go.uber.org/yarpc/v2"
	reflect "reflect"
)

// MockDialer is a mock of Dialer interface
type MockDialer struct {
	ctrl     *gomock.Controller
	recorder *MockDialerMockRecorder
}

// MockDialerMockRecorder is the mock recorder for MockDialer
type MockDialerMockRecorder struct {
	mock *MockDialer
}

// NewMockDialer creates a new mock instance
func NewMockDialer(ctrl *gomock.Controller) *MockDialer {
	mock := &MockDialer{ctrl: ctrl}
	mock.recorder = &MockDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDialer) EXPECT() *MockDialerMockRecorder {
	return m.recorder
}

// ReleasePeer mocks base method
func (m *MockDialer) ReleasePeer(arg0 v2.Identifier, arg1 v2.Subscriber) error {
	ret := m.ctrl.Call(m, "ReleasePeer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleasePeer indicates an expected call of ReleasePeer
func (mr *MockDialerMockRecorder) ReleasePeer(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleasePeer", reflect.TypeOf((*MockDialer)(nil).ReleasePeer), arg0, arg1)
}

// RetainPeer mocks base method
func (m *MockDialer) RetainPeer(arg0 v2.Identifier, arg1 v2.Subscriber) (v2.Peer, error) {
	ret := m.ctrl.Call(m, "RetainPeer", arg0, arg1)
	ret0, _ := ret[0].(v2.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetainPeer indicates an expected call of RetainPeer
func (mr *MockDialerMockRecorder) RetainPeer(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetainPeer", reflect.TypeOf((*MockDialer)(nil).RetainPeer), arg0, arg1)
}
