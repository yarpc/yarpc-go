// Code generated by MockGen. DO NOT EDIT.
// Source: go.uber.org/yarpc/v2 (interfaces: UnaryTransportHandler,StreamTransportHandler,UnaryEncodingHandler)

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package yarpctest is a generated GoMock package.
package yarpctest

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v2 "go.uber.org/yarpc/v2"
	reflect "reflect"
)

// MockUnaryTransportHandler is a mock of UnaryTransportHandler interface
type MockUnaryTransportHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUnaryTransportHandlerMockRecorder
}

// MockUnaryTransportHandlerMockRecorder is the mock recorder for MockUnaryTransportHandler
type MockUnaryTransportHandlerMockRecorder struct {
	mock *MockUnaryTransportHandler
}

// NewMockUnaryTransportHandler creates a new mock instance
func NewMockUnaryTransportHandler(ctrl *gomock.Controller) *MockUnaryTransportHandler {
	mock := &MockUnaryTransportHandler{ctrl: ctrl}
	mock.recorder = &MockUnaryTransportHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnaryTransportHandler) EXPECT() *MockUnaryTransportHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method
func (m *MockUnaryTransportHandler) Handle(arg0 context.Context, arg1 *v2.Request, arg2 *v2.Buffer) (*v2.Response, *v2.Buffer, error) {
	ret := m.ctrl.Call(m, "Handle", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v2.Response)
	ret1, _ := ret[1].(*v2.Buffer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Handle indicates an expected call of Handle
func (mr *MockUnaryTransportHandlerMockRecorder) Handle(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockUnaryTransportHandler)(nil).Handle), arg0, arg1, arg2)
}

// MockStreamTransportHandler is a mock of StreamTransportHandler interface
type MockStreamTransportHandler struct {
	ctrl     *gomock.Controller
	recorder *MockStreamTransportHandlerMockRecorder
}

// MockStreamTransportHandlerMockRecorder is the mock recorder for MockStreamTransportHandler
type MockStreamTransportHandlerMockRecorder struct {
	mock *MockStreamTransportHandler
}

// NewMockStreamTransportHandler creates a new mock instance
func NewMockStreamTransportHandler(ctrl *gomock.Controller) *MockStreamTransportHandler {
	mock := &MockStreamTransportHandler{ctrl: ctrl}
	mock.recorder = &MockStreamTransportHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreamTransportHandler) EXPECT() *MockStreamTransportHandlerMockRecorder {
	return m.recorder
}

// HandleStream mocks base method
func (m *MockStreamTransportHandler) HandleStream(arg0 *v2.ServerStream) error {
	ret := m.ctrl.Call(m, "HandleStream", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleStream indicates an expected call of HandleStream
func (mr *MockStreamTransportHandlerMockRecorder) HandleStream(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleStream", reflect.TypeOf((*MockStreamTransportHandler)(nil).HandleStream), arg0)
}

// MockUnaryEncodingHandler is a mock of UnaryEncodingHandler interface
type MockUnaryEncodingHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUnaryEncodingHandlerMockRecorder
}

// MockUnaryEncodingHandlerMockRecorder is the mock recorder for MockUnaryEncodingHandler
type MockUnaryEncodingHandlerMockRecorder struct {
	mock *MockUnaryEncodingHandler
}

// NewMockUnaryEncodingHandler creates a new mock instance
func NewMockUnaryEncodingHandler(ctrl *gomock.Controller) *MockUnaryEncodingHandler {
	mock := &MockUnaryEncodingHandler{ctrl: ctrl}
	mock.recorder = &MockUnaryEncodingHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnaryEncodingHandler) EXPECT() *MockUnaryEncodingHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method
func (m *MockUnaryEncodingHandler) Handle(arg0 context.Context, arg1 interface{}) (interface{}, error) {
	ret := m.ctrl.Call(m, "Handle", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle
func (mr *MockUnaryEncodingHandlerMockRecorder) Handle(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockUnaryEncodingHandler)(nil).Handle), arg0, arg1)
}
