// Code generated by MockGen. DO NOT EDIT.
// Source: go.uber.org/yarpc/v2 (interfaces: RouterMiddleware,UnaryInboundMiddleware,UnaryOutboundMiddleware,StreamInboundMiddleware,StreamOutboundMiddleware)

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Package yarpctest is a generated GoMock package.
package yarpctest

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v2 "go.uber.org/yarpc/v2"
	reflect "reflect"
)

// MockRouterMiddleware is a mock of RouterMiddleware interface
type MockRouterMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMiddlewareMockRecorder
}

// MockRouterMiddlewareMockRecorder is the mock recorder for MockRouterMiddleware
type MockRouterMiddlewareMockRecorder struct {
	mock *MockRouterMiddleware
}

// NewMockRouterMiddleware creates a new mock instance
func NewMockRouterMiddleware(ctrl *gomock.Controller) *MockRouterMiddleware {
	mock := &MockRouterMiddleware{ctrl: ctrl}
	mock.recorder = &MockRouterMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouterMiddleware) EXPECT() *MockRouterMiddlewareMockRecorder {
	return m.recorder
}

// Choose mocks base method
func (m *MockRouterMiddleware) Choose(arg0 context.Context, arg1 *v2.Request, arg2 v2.Router) (v2.HandlerSpec, error) {
	ret := m.ctrl.Call(m, "Choose", arg0, arg1, arg2)
	ret0, _ := ret[0].(v2.HandlerSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Choose indicates an expected call of Choose
func (mr *MockRouterMiddlewareMockRecorder) Choose(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Choose", reflect.TypeOf((*MockRouterMiddleware)(nil).Choose), arg0, arg1, arg2)
}

// Procedures mocks base method
func (m *MockRouterMiddleware) Procedures(arg0 v2.Router) []v2.Procedure {
	ret := m.ctrl.Call(m, "Procedures", arg0)
	ret0, _ := ret[0].([]v2.Procedure)
	return ret0
}

// Procedures indicates an expected call of Procedures
func (mr *MockRouterMiddlewareMockRecorder) Procedures(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Procedures", reflect.TypeOf((*MockRouterMiddleware)(nil).Procedures), arg0)
}

// MockUnaryInboundMiddleware is a mock of UnaryInboundMiddleware interface
type MockUnaryInboundMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockUnaryInboundMiddlewareMockRecorder
}

// MockUnaryInboundMiddlewareMockRecorder is the mock recorder for MockUnaryInboundMiddleware
type MockUnaryInboundMiddlewareMockRecorder struct {
	mock *MockUnaryInboundMiddleware
}

// NewMockUnaryInboundMiddleware creates a new mock instance
func NewMockUnaryInboundMiddleware(ctrl *gomock.Controller) *MockUnaryInboundMiddleware {
	mock := &MockUnaryInboundMiddleware{ctrl: ctrl}
	mock.recorder = &MockUnaryInboundMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnaryInboundMiddleware) EXPECT() *MockUnaryInboundMiddlewareMockRecorder {
	return m.recorder
}

// Handle mocks base method
func (m *MockUnaryInboundMiddleware) Handle(arg0 context.Context, arg1 *v2.Request, arg2 *v2.Buffer, arg3 v2.UnaryHandler) (*v2.Response, *v2.Buffer, error) {
	ret := m.ctrl.Call(m, "Handle", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v2.Response)
	ret1, _ := ret[1].(*v2.Buffer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Handle indicates an expected call of Handle
func (mr *MockUnaryInboundMiddlewareMockRecorder) Handle(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockUnaryInboundMiddleware)(nil).Handle), arg0, arg1, arg2, arg3)
}

// MockUnaryOutboundMiddleware is a mock of UnaryOutboundMiddleware interface
type MockUnaryOutboundMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockUnaryOutboundMiddlewareMockRecorder
}

// MockUnaryOutboundMiddlewareMockRecorder is the mock recorder for MockUnaryOutboundMiddleware
type MockUnaryOutboundMiddlewareMockRecorder struct {
	mock *MockUnaryOutboundMiddleware
}

// NewMockUnaryOutboundMiddleware creates a new mock instance
func NewMockUnaryOutboundMiddleware(ctrl *gomock.Controller) *MockUnaryOutboundMiddleware {
	mock := &MockUnaryOutboundMiddleware{ctrl: ctrl}
	mock.recorder = &MockUnaryOutboundMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnaryOutboundMiddleware) EXPECT() *MockUnaryOutboundMiddlewareMockRecorder {
	return m.recorder
}

// Call mocks base method
func (m *MockUnaryOutboundMiddleware) Call(arg0 context.Context, arg1 *v2.Request, arg2 *v2.Buffer, arg3 v2.UnaryOutbound) (*v2.Response, *v2.Buffer, error) {
	ret := m.ctrl.Call(m, "Call", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v2.Response)
	ret1, _ := ret[1].(*v2.Buffer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Call indicates an expected call of Call
func (mr *MockUnaryOutboundMiddlewareMockRecorder) Call(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockUnaryOutboundMiddleware)(nil).Call), arg0, arg1, arg2, arg3)
}

// MockStreamInboundMiddleware is a mock of StreamInboundMiddleware interface
type MockStreamInboundMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockStreamInboundMiddlewareMockRecorder
}

// MockStreamInboundMiddlewareMockRecorder is the mock recorder for MockStreamInboundMiddleware
type MockStreamInboundMiddlewareMockRecorder struct {
	mock *MockStreamInboundMiddleware
}

// NewMockStreamInboundMiddleware creates a new mock instance
func NewMockStreamInboundMiddleware(ctrl *gomock.Controller) *MockStreamInboundMiddleware {
	mock := &MockStreamInboundMiddleware{ctrl: ctrl}
	mock.recorder = &MockStreamInboundMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreamInboundMiddleware) EXPECT() *MockStreamInboundMiddlewareMockRecorder {
	return m.recorder
}

// HandleStream mocks base method
func (m *MockStreamInboundMiddleware) HandleStream(arg0 *v2.ServerStream, arg1 v2.StreamHandler) error {
	ret := m.ctrl.Call(m, "HandleStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleStream indicates an expected call of HandleStream
func (mr *MockStreamInboundMiddlewareMockRecorder) HandleStream(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleStream", reflect.TypeOf((*MockStreamInboundMiddleware)(nil).HandleStream), arg0, arg1)
}

// MockStreamOutboundMiddleware is a mock of StreamOutboundMiddleware interface
type MockStreamOutboundMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockStreamOutboundMiddlewareMockRecorder
}

// MockStreamOutboundMiddlewareMockRecorder is the mock recorder for MockStreamOutboundMiddleware
type MockStreamOutboundMiddlewareMockRecorder struct {
	mock *MockStreamOutboundMiddleware
}

// NewMockStreamOutboundMiddleware creates a new mock instance
func NewMockStreamOutboundMiddleware(ctrl *gomock.Controller) *MockStreamOutboundMiddleware {
	mock := &MockStreamOutboundMiddleware{ctrl: ctrl}
	mock.recorder = &MockStreamOutboundMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreamOutboundMiddleware) EXPECT() *MockStreamOutboundMiddlewareMockRecorder {
	return m.recorder
}

// CallStream mocks base method
func (m *MockStreamOutboundMiddleware) CallStream(arg0 context.Context, arg1 *v2.Request, arg2 v2.StreamOutbound) (*v2.ClientStream, error) {
	ret := m.ctrl.Call(m, "CallStream", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v2.ClientStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallStream indicates an expected call of CallStream
func (mr *MockStreamOutboundMiddlewareMockRecorder) CallStream(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallStream", reflect.TypeOf((*MockStreamOutboundMiddleware)(nil).CallStream), arg0, arg1, arg2)
}
