{{define "server" -}}
{{with .File}}
{{$gopkg := .Package.GoPackage}}

{{range .Services -}}
  {{$svc := .Name}}

  {{/* Service interface */}}

  // {{.Server}} is the {{$svc}} service's server interface.
  type {{.Server}} interface {
    {{range .Methods -}}
      {{if or .ClientStreaming .ServerStreaming -}}
        {{.Name}}(
          {{if not .ClientStreaming -}}
            *{{goType .Request $gopkg}},
          {{end -}}
          {{.StreamServer}},
        ) {{if not .ServerStreaming}} (*{{goType .Response $gopkg}}, error) {{else}} error {{end}}
      {{else -}}
        {{.Name}}(
          context.Context,
          *{{goType .Request $gopkg}},
        ) (*{{goType .Response $gopkg}}, error)
      {{end -}}
    {{end -}}
  }

  {{/* Procedure construction */}}

  {{if (unaryMethods .) -}}
  // BuildUnary{{.Procedures}} constructs the YARPC unary procedures for the {{$svc}} service.
  func BuildUnary{{.Procedures}}(s {{.Server}}) []yarpc.EncodingProcedure {
    h := &{{.ServerImpl}}{server: s}
    return yarpcprotobuf.UnaryProcedures(
      yarpcprotobuf.UnaryProceduresParams{
        Service: {{printf "%q" .FQN}},
        Unary: []yarpcprotobuf.UnaryProcedure{
          {{range unaryMethods . -}}
          {
            Method: {{printf "%q" .Name}},
            Handler: yarpcprotobuf.NewUnaryHandler(
              yarpcprotobuf.UnaryHandlerParams{
                Handle: h.{{.Name}},
              },
            ),
            RequestType: func() proto.Message { return new({{goType .Request $gopkg}}) },
          },
          {{end -}}
        },
      },
    )
  }
  {{- end}}

  {{if (streamMethods .) -}}
  // BuildStream{{.Procedures}} constructs the YARPC stream procedures for the {{$svc}} service.
  func BuildStream{{.Procedures}}(s {{.Server}}) []yarpc.TransportProcedure {
    h := &{{.ServerImpl}}{server: s}
    return yarpcprotobuf.StreamProcedures(
      yarpcprotobuf.StreamProceduresParams{
        Service: {{printf "%q" .FQN}},
        Stream: []yarpcprotobuf.StreamProcedure{
          {{range streamMethods . -}}
          {
            Method: {{printf "%q" .Name}},
            Handler: yarpcprotobuf.NewStreamHandler(
              yarpcprotobuf.StreamHandlerParams{
                Handle: h.{{.Name}},
              },
            ),
          },
          {{end -}}
        },
      },
    )
  }
  {{- end}}
{{end -}}

{{end -}}{{end -}}
