// Automatically generated by MockGen. DO NOT EDIT!
// Source: go.uber.org/yarpc/api/middleware (interfaces: Router)

package middlewaretest

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	transport "go.uber.org/yarpc/api/transport"
)

// Mock of Router interface
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *_MockRouterRecorder
}

// Recorder for MockRouter (not exported)
type _MockRouterRecorder struct {
	mock *MockRouter
}

func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &_MockRouterRecorder{mock}
	return mock
}

func (_m *MockRouter) EXPECT() *_MockRouterRecorder {
	return _m.recorder
}

func (_m *MockRouter) Choose(_param0 context.Context, _param1 *transport.Request, _param2 transport.Router) (transport.HandlerSpec, error) {
	ret := _m.ctrl.Call(_m, "Choose", _param0, _param1, _param2)
	ret0, _ := ret[0].(transport.HandlerSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRouterRecorder) Choose(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Choose", arg0, arg1, arg2)
}

func (_m *MockRouter) Procedures(_param0 transport.Router) []transport.Procedure {
	ret := _m.ctrl.Call(_m, "Procedures", _param0)
	ret0, _ := ret[0].([]transport.Procedure)
	return ret0
}

func (_mr *_MockRouterRecorder) Procedures(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Procedures", arg0)
}
