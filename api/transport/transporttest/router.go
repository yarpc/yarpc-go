// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: go.uber.org/yarpc/api/transport (interfaces: Router,RouteTable)

package transporttest

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	transport "go.uber.org/yarpc/api/transport"
)

// Mock of Router interface
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *_MockRouterRecorder
}

// Recorder for MockRouter (not exported)
type _MockRouterRecorder struct {
	mock *MockRouter
}

func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &_MockRouterRecorder{mock}
	return mock
}

func (_m *MockRouter) EXPECT() *_MockRouterRecorder {
	return _m.recorder
}

func (_m *MockRouter) Choose(_param0 context.Context, _param1 *transport.Request) (transport.HandlerSpec, error) {
	ret := _m.ctrl.Call(_m, "Choose", _param0, _param1)
	ret0, _ := ret[0].(transport.HandlerSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRouterRecorder) Choose(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Choose", arg0, arg1)
}

func (_m *MockRouter) Procedures() []transport.Procedure {
	ret := _m.ctrl.Call(_m, "Procedures")
	ret0, _ := ret[0].([]transport.Procedure)
	return ret0
}

func (_mr *_MockRouterRecorder) Procedures() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Procedures")
}

// Mock of RouteTable interface
type MockRouteTable struct {
	ctrl     *gomock.Controller
	recorder *_MockRouteTableRecorder
}

// Recorder for MockRouteTable (not exported)
type _MockRouteTableRecorder struct {
	mock *MockRouteTable
}

func NewMockRouteTable(ctrl *gomock.Controller) *MockRouteTable {
	mock := &MockRouteTable{ctrl: ctrl}
	mock.recorder = &_MockRouteTableRecorder{mock}
	return mock
}

func (_m *MockRouteTable) EXPECT() *_MockRouteTableRecorder {
	return _m.recorder
}

func (_m *MockRouteTable) Choose(_param0 context.Context, _param1 *transport.Request) (transport.HandlerSpec, error) {
	ret := _m.ctrl.Call(_m, "Choose", _param0, _param1)
	ret0, _ := ret[0].(transport.HandlerSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRouteTableRecorder) Choose(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Choose", arg0, arg1)
}

func (_m *MockRouteTable) Procedures() []transport.Procedure {
	ret := _m.ctrl.Call(_m, "Procedures")
	ret0, _ := ret[0].([]transport.Procedure)
	return ret0
}

func (_mr *_MockRouteTableRecorder) Procedures() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Procedures")
}

func (_m *MockRouteTable) Register(_param0 []transport.Procedure) {
	_m.ctrl.Call(_m, "Register", _param0)
}

func (_mr *_MockRouteTableRecorder) Register(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Register", arg0)
}
