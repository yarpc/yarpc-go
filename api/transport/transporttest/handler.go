// Code generated by MockGen. DO NOT EDIT.
// Source: go.uber.org/yarpc/api/transport (interfaces: UnaryHandler,OnewayHandler,StreamHandler)

// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package transporttest

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	transport "go.uber.org/yarpc/api/transport"
	reflect "reflect"
)

// MockUnaryHandler is a mock of UnaryHandler interface
type MockUnaryHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUnaryHandlerMockRecorder
}

// MockUnaryHandlerMockRecorder is the mock recorder for MockUnaryHandler
type MockUnaryHandlerMockRecorder struct {
	mock *MockUnaryHandler
}

// NewMockUnaryHandler creates a new mock instance
func NewMockUnaryHandler(ctrl *gomock.Controller) *MockUnaryHandler {
	mock := &MockUnaryHandler{ctrl: ctrl}
	mock.recorder = &MockUnaryHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockUnaryHandler) EXPECT() *MockUnaryHandlerMockRecorder {
	return _m.recorder
}

// Handle mocks base method
func (_m *MockUnaryHandler) Handle(_param0 context.Context, _param1 *transport.Request, _param2 transport.ResponseWriter) error {
	ret := _m.ctrl.Call(_m, "Handle", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle
func (_mr *MockUnaryHandlerMockRecorder) Handle(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Handle", reflect.TypeOf((*MockUnaryHandler)(nil).Handle), arg0, arg1, arg2)
}

// MockOnewayHandler is a mock of OnewayHandler interface
type MockOnewayHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOnewayHandlerMockRecorder
}

// MockOnewayHandlerMockRecorder is the mock recorder for MockOnewayHandler
type MockOnewayHandlerMockRecorder struct {
	mock *MockOnewayHandler
}

// NewMockOnewayHandler creates a new mock instance
func NewMockOnewayHandler(ctrl *gomock.Controller) *MockOnewayHandler {
	mock := &MockOnewayHandler{ctrl: ctrl}
	mock.recorder = &MockOnewayHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockOnewayHandler) EXPECT() *MockOnewayHandlerMockRecorder {
	return _m.recorder
}

// HandleOneway mocks base method
func (_m *MockOnewayHandler) HandleOneway(_param0 context.Context, _param1 *transport.Request) error {
	ret := _m.ctrl.Call(_m, "HandleOneway", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleOneway indicates an expected call of HandleOneway
func (_mr *MockOnewayHandlerMockRecorder) HandleOneway(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HandleOneway", reflect.TypeOf((*MockOnewayHandler)(nil).HandleOneway), arg0, arg1)
}

// MockStreamHandler is a mock of StreamHandler interface
type MockStreamHandler struct {
	ctrl     *gomock.Controller
	recorder *MockStreamHandlerMockRecorder
}

// MockStreamHandlerMockRecorder is the mock recorder for MockStreamHandler
type MockStreamHandlerMockRecorder struct {
	mock *MockStreamHandler
}

// NewMockStreamHandler creates a new mock instance
func NewMockStreamHandler(ctrl *gomock.Controller) *MockStreamHandler {
	mock := &MockStreamHandler{ctrl: ctrl}
	mock.recorder = &MockStreamHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockStreamHandler) EXPECT() *MockStreamHandlerMockRecorder {
	return _m.recorder
}

// HandleStream mocks base method
func (_m *MockStreamHandler) HandleStream(_param0 transport.ServerStream) error {
	ret := _m.ctrl.Call(_m, "HandleStream", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleStream indicates an expected call of HandleStream
func (_mr *MockStreamHandlerMockRecorder) HandleStream(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HandleStream", reflect.TypeOf((*MockStreamHandler)(nil).HandleStream), arg0)
}
