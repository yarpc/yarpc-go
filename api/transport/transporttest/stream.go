// Code generated by MockGen. DO NOT EDIT.
// Source: go.uber.org/yarpc/api/transport (interfaces: ClientStream,ServerStream)

// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package transporttest

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	transport "go.uber.org/yarpc/api/transport"
	reflect "reflect"
)

// MockClientStream is a mock of ClientStream interface
type MockClientStream struct {
	ctrl     *gomock.Controller
	recorder *MockClientStreamMockRecorder
}

// MockClientStreamMockRecorder is the mock recorder for MockClientStream
type MockClientStreamMockRecorder struct {
	mock *MockClientStream
}

// NewMockClientStream creates a new mock instance
func NewMockClientStream(ctrl *gomock.Controller) *MockClientStream {
	mock := &MockClientStream{ctrl: ctrl}
	mock.recorder = &MockClientStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockClientStream) EXPECT() *MockClientStreamMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockClientStream) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockClientStreamMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockClientStream)(nil).Close))
}

// Context mocks base method
func (_m *MockClientStream) Context() context.Context {
	ret := _m.ctrl.Call(_m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (_mr *MockClientStreamMockRecorder) Context() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Context", reflect.TypeOf((*MockClientStream)(nil).Context))
}

// ReceiveMessage mocks base method
func (_m *MockClientStream) ReceiveMessage(_param0 context.Context) (*transport.StreamMessage, error) {
	ret := _m.ctrl.Call(_m, "ReceiveMessage", _param0)
	ret0, _ := ret[0].(*transport.StreamMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveMessage indicates an expected call of ReceiveMessage
func (_mr *MockClientStreamMockRecorder) ReceiveMessage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReceiveMessage", reflect.TypeOf((*MockClientStream)(nil).ReceiveMessage), arg0)
}

// Request mocks base method
func (_m *MockClientStream) Request() *transport.StreamRequest {
	ret := _m.ctrl.Call(_m, "Request")
	ret0, _ := ret[0].(*transport.StreamRequest)
	return ret0
}

// Request indicates an expected call of Request
func (_mr *MockClientStreamMockRecorder) Request() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Request", reflect.TypeOf((*MockClientStream)(nil).Request))
}

// Response mocks base method
func (_m *MockClientStream) Response() *transport.StreamResponse {
	ret := _m.ctrl.Call(_m, "Response")
	ret0, _ := ret[0].(*transport.StreamResponse)
	return ret0
}

// Response indicates an expected call of Response
func (_mr *MockClientStreamMockRecorder) Response() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Response", reflect.TypeOf((*MockClientStream)(nil).Response))
}

// SendMessage mocks base method
func (_m *MockClientStream) SendMessage(_param0 context.Context, _param1 *transport.StreamMessage) error {
	ret := _m.ctrl.Call(_m, "SendMessage", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage
func (_mr *MockClientStreamMockRecorder) SendMessage(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SendMessage", reflect.TypeOf((*MockClientStream)(nil).SendMessage), arg0, arg1)
}

// MockServerStream is a mock of ServerStream interface
type MockServerStream struct {
	ctrl     *gomock.Controller
	recorder *MockServerStreamMockRecorder
}

// MockServerStreamMockRecorder is the mock recorder for MockServerStream
type MockServerStreamMockRecorder struct {
	mock *MockServerStream
}

// NewMockServerStream creates a new mock instance
func NewMockServerStream(ctrl *gomock.Controller) *MockServerStream {
	mock := &MockServerStream{ctrl: ctrl}
	mock.recorder = &MockServerStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockServerStream) EXPECT() *MockServerStreamMockRecorder {
	return _m.recorder
}

// Context mocks base method
func (_m *MockServerStream) Context() context.Context {
	ret := _m.ctrl.Call(_m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (_mr *MockServerStreamMockRecorder) Context() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Context", reflect.TypeOf((*MockServerStream)(nil).Context))
}

// ReceiveMessage mocks base method
func (_m *MockServerStream) ReceiveMessage(_param0 context.Context) (*transport.StreamMessage, error) {
	ret := _m.ctrl.Call(_m, "ReceiveMessage", _param0)
	ret0, _ := ret[0].(*transport.StreamMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveMessage indicates an expected call of ReceiveMessage
func (_mr *MockServerStreamMockRecorder) ReceiveMessage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReceiveMessage", reflect.TypeOf((*MockServerStream)(nil).ReceiveMessage), arg0)
}

// Request mocks base method
func (_m *MockServerStream) Request() *transport.StreamRequest {
	ret := _m.ctrl.Call(_m, "Request")
	ret0, _ := ret[0].(*transport.StreamRequest)
	return ret0
}

// Request indicates an expected call of Request
func (_mr *MockServerStreamMockRecorder) Request() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Request", reflect.TypeOf((*MockServerStream)(nil).Request))
}

// SendMessage mocks base method
func (_m *MockServerStream) SendMessage(_param0 context.Context, _param1 *transport.StreamMessage) error {
	ret := _m.ctrl.Call(_m, "SendMessage", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage
func (_mr *MockServerStreamMockRecorder) SendMessage(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SendMessage", reflect.TypeOf((*MockServerStream)(nil).SendMessage), arg0, arg1)
}

// SetResponse mocks base method
func (_m *MockServerStream) SetResponse(_param0 *transport.StreamResponse) {
	_m.ctrl.Call(_m, "SetResponse", _param0)
}

// SetResponse indicates an expected call of SetResponse
func (_mr *MockServerStreamMockRecorder) SetResponse(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetResponse", reflect.TypeOf((*MockServerStream)(nil).SetResponse), arg0)
}
