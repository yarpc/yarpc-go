// Code generated by thriftrw v1.0.0
// @generated

package sink

import (
	"fmt"
	"go.uber.org/thriftrw/wire"
	"strings"
)

type Hello_Sink_Args struct {
	Snk *SinkRequest `json:"snk,omitempty"`
}

func (v *Hello_Sink_Args) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Snk != nil {
		w, err = v.Snk.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _SinkRequest_Read(w wire.Value) (*SinkRequest, error) {
	var v SinkRequest
	err := v.FromWire(w)
	return &v, err
}

func (v *Hello_Sink_Args) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Snk, err = _SinkRequest_Read(field.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *Hello_Sink_Args) String() string {
	var fields [1]string
	i := 0
	if v.Snk != nil {
		fields[i] = fmt.Sprintf("Snk: %v", v.Snk)
		i++
	}
	return fmt.Sprintf("Hello_Sink_Args{%v}", strings.Join(fields[:i], ", "))
}

func (v *Hello_Sink_Args) MethodName() string {
	return "sink"
}

func (v *Hello_Sink_Args) EnvelopeType() wire.EnvelopeType {
	return wire.OneWay
}

var Hello_Sink_Helper = struct {
	Args func(snk *SinkRequest) *Hello_Sink_Args
}{}

func init() {
	Hello_Sink_Helper.Args = func(snk *SinkRequest) *Hello_Sink_Args {
		return &Hello_Sink_Args{Snk: snk}
	}
}
