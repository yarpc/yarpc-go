// Code generated by thriftrw v1.0.0
// @generated

package sink

import (
	"errors"
	"fmt"
	"go.uber.org/thriftrw/wire"
	"strings"
)

type SinkRequest struct {
	Message string `json:"message"`
	Count   int16  `json:"count"`
}

func (v *SinkRequest) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	w, err = wire.NewValueString(v.Message), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	w, err = wire.NewValueI16(v.Count), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *SinkRequest) FromWire(w wire.Value) error {
	var err error
	messageIsSet := false
	countIsSet := false
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Message, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				messageIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TI16 {
				v.Count, err = field.Value.GetI16(), error(nil)
				if err != nil {
					return err
				}
				countIsSet = true
			}
		}
	}
	if !messageIsSet {
		return errors.New("field Message of SinkRequest is required")
	}
	if !countIsSet {
		return errors.New("field Count of SinkRequest is required")
	}
	return nil
}

func (v *SinkRequest) String() string {
	var fields [2]string
	i := 0
	fields[i] = fmt.Sprintf("Message: %v", v.Message)
	i++
	fields[i] = fmt.Sprintf("Count: %v", v.Count)
	i++
	return fmt.Sprintf("SinkRequest{%v}", strings.Join(fields[:i], ", "))
}
