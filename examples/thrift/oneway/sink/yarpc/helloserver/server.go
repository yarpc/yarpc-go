// Code generated by thriftrw-plugin-yarpc
// @generated

package helloserver

import (
	"context"
	"go.uber.org/thriftrw/wire"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/examples/thrift/oneway/sink"
	"go.uber.org/yarpc/encoding/thrift"
	"go.uber.org/yarpc"
)

// Interface is the server-side interface for the Hello service.
type Interface interface {
	Sink(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		Snk *sink.SinkRequest,
	) error
}

// New prepares an implementation of the Hello service for
// registration.
//
// 	handler := HelloHandler{}
// 	dispatcher.Register(helloserver.New(handler))
func New(impl Interface, opts ...thrift.RegisterOption) []transport.Registrant {
	h := handler{impl}
	service := thrift.Service{
		Name:    "Hello",
		Methods: map[string]thrift.UnaryHandler{},
		OnewayMethods: map[string]thrift.OnewayHandler{
			"sink": thrift.OnewayHandlerFunc(h.Sink),
		},
	}
	return thrift.BuildRegistrants(service, opts...)
}

type handler struct{ impl Interface }

func (h handler) Sink(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) error {
	var args sink.Hello_Sink_Args
	if err := args.FromWire(body); err != nil {
		return err
	}

	return h.impl.Sink(ctx, reqMeta, args.Snk)
}
