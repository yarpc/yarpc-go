// Code generated by thriftrw

package helloclient

import (
	"github.com/thriftrw/thriftrw-go/protocol"
	"github.com/thriftrw/thriftrw-go/wire"
	yarpc "github.com/yarpc/yarpc-go"
	"github.com/yarpc/yarpc-go/encoding/thrift"
	"github.com/yarpc/yarpc-go/examples/thrift/hello/thrift/hello"
	hello2 "github.com/yarpc/yarpc-go/examples/thrift/hello/thrift/hello/service/hello"
	"github.com/yarpc/yarpc-go/transport"
)

type Interface interface {
	Echo(reqMeta yarpc.CallReqMeta, echo *hello.EchoRequest) (*hello.EchoResponse, yarpc.CallResMeta, error)
}

func New(c transport.Channel) Interface {
	return client{c: thrift.New(thrift.Config{Service: "Hello", Channel: c, Protocol: protocol.Binary})}
}

type client struct{ c thrift.Client }

func (c client) Echo(reqMeta yarpc.CallReqMeta, echo *hello.EchoRequest) (success *hello.EchoResponse, resMeta yarpc.CallResMeta, err error) {
	args := hello2.EchoHelper.Args(echo)
	var body wire.Value
	body, resMeta, err = c.c.Call(reqMeta, args)
	if err != nil {
		return
	}
	var result hello2.EchoResult
	if err = result.FromWire(body); err != nil {
		return
	}
	success, err = hello2.EchoHelper.UnwrapResponse(&result)
	return
}
