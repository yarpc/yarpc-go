// Automatically generated by MockGen. DO NOT EDIT!
// Source: go.uber.org/yarpc/peer (interfaces: Agent,Subscriber)

package peertest

import (
	gomock "github.com/golang/mock/gomock"
	peer "go.uber.org/yarpc/peer"
)

// Mock of Agent interface
type MockAgent struct {
	ctrl     *gomock.Controller
	recorder *_MockAgentRecorder
}

// Recorder for MockAgent (not exported)
type _MockAgentRecorder struct {
	mock *MockAgent
}

func NewMockAgent(ctrl *gomock.Controller) *MockAgent {
	mock := &MockAgent{ctrl: ctrl}
	mock.recorder = &_MockAgentRecorder{mock}
	return mock
}

func (_m *MockAgent) EXPECT() *_MockAgentRecorder {
	return _m.recorder
}

func (_m *MockAgent) ReleasePeer(_param0 peer.Identifier, _param1 peer.Subscriber) error {
	ret := _m.ctrl.Call(_m, "ReleasePeer", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAgentRecorder) ReleasePeer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReleasePeer", arg0, arg1)
}

func (_m *MockAgent) RetainPeer(_param0 peer.Identifier, _param1 peer.Subscriber) (peer.Peer, error) {
	ret := _m.ctrl.Call(_m, "RetainPeer", _param0, _param1)
	ret0, _ := ret[0].(peer.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAgentRecorder) RetainPeer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RetainPeer", arg0, arg1)
}

// Mock of Subscriber interface
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *_MockSubscriberRecorder
}

// Recorder for MockSubscriber (not exported)
type _MockSubscriberRecorder struct {
	mock *MockSubscriber
}

func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &_MockSubscriberRecorder{mock}
	return mock
}

func (_m *MockSubscriber) EXPECT() *_MockSubscriberRecorder {
	return _m.recorder
}

func (_m *MockSubscriber) NotifyStatusChanged(_param0 peer.Identifier) {
	_m.ctrl.Call(_m, "NotifyStatusChanged", _param0)
}

func (_mr *_MockSubscriberRecorder) NotifyStatusChanged(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyStatusChanged", arg0)
}
