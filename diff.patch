diff --git a/internal/interceptor/outbound.go b/internal/interceptor/outbound.go
index 4b259fa3..fa39acb2 100644
--- a/internal/interceptor/outbound.go
+++ b/internal/interceptor/outbound.go
@@ -27,6 +27,11 @@ import (
 )
 
 type (
+	UnaryOutboundChain interface {
+		Next(ctx context.Context, request *transport.Request) (*transport.Response, error)
+		Outbound() Outbound
+	}
+
 	// UnaryOutbound defines transport interceptor for `UnaryOutbound`s.
 	//
 	// UnaryOutbound interceptor MAY do zero or more of the following: change the
@@ -39,7 +44,7 @@ type (
 	// UnaryOutbound interceptor is re-used across requests and MAY be called
 	// multiple times on the same request.
 	UnaryOutbound interface {
-		Call(ctx context.Context, request *transport.Request, out DirectUnaryOutbound) (*transport.Response, error)
+		Call(ctx context.Context, request *transport.Request, out UnaryOutboundChain) (*transport.Response, error)
 	}
 
 	// OnewayOutbound defines transport interceptor for `OnewayOutbound`s.
@@ -148,8 +153,8 @@ func (nopStreamOutbound) CallStream(ctx context.Context, requestMeta *transport.
 var NopStreamOutbound StreamOutbound = nopStreamOutbound{}
 
 // ApplyUnaryOutbound applies the given UnaryOutbound interceptor to the given DirectUnaryOutbound transport.
-func ApplyUnaryOutbound(uo DirectUnaryOutbound, i UnaryOutbound) DirectUnaryOutbound {
-	return directUnaryOutboundWithInterceptor{uo: uo, i: i}
+func ApplyUnaryOutbound(uo DirectUnaryOutbound, i UnaryOutbound) transport.UnaryOutbound {
+	return unaryOutboundWithInterceptor{uo: uo, i: i}
 }
 
 // ApplyOnewayOutbound applies the given OnewayOutbound interceptor to the given DirectOnewayOutbound transport.
@@ -162,13 +167,13 @@ func ApplyStreamOutbound(so DirectStreamOutbound, i StreamOutbound) DirectStream
 	return directStreamOutboundWithInterceptor{so: so, i: i}
 }
 
-type directUnaryOutboundWithInterceptor struct {
+type unaryOutboundWithInterceptor struct {
 	transport.Outbound
 	uo DirectUnaryOutbound
 	i  UnaryOutbound
 }
 
-func (uoc directUnaryOutboundWithInterceptor) DirectCall(ctx context.Context, request *transport.Request) (*transport.Response, error) {
+func (uoc unaryOutboundWithInterceptor) Call(ctx context.Context, request *transport.Request) (*transport.Response, error) {
 	return uoc.i.Call(ctx, request, uoc.uo)
 }
 
diff --git a/internal/interceptor/outboundinterceptor/chain.go b/internal/interceptor/outboundinterceptor/chain.go
index 025ed81d..02413141 100644
--- a/internal/interceptor/outboundinterceptor/chain.go
+++ b/internal/interceptor/outboundinterceptor/chain.go
@@ -27,64 +27,15 @@ import (
 	"go.uber.org/yarpc/internal/interceptor"
 )
 
-// UnaryChain combines a series of `UnaryInbound`s into a single `InboundMiddleware`.
-func UnaryChain(mw ...interceptor.UnaryOutbound) interceptor.UnaryOutbound {
-	unchained := make([]interceptor.UnaryOutbound, 0, len(mw))
-	for _, m := range mw {
-		if m == nil {
-			continue
-		}
-		if c, ok := m.(unaryChain); ok {
-			unchained = append(unchained, c...)
-			continue
-		}
-		unchained = append(unchained, m)
-	}
-
-	switch len(unchained) {
-	case 0:
-		return interceptor.NopUnaryOutbound
-	case 1:
-		return unchained[0]
-	default:
-		return unaryChain(unchained)
-	}
-}
-
-type unaryChain []interceptor.UnaryOutbound
-
-func (x unaryChainExec) TransportName() string {
-	var name string
-	if namer, ok := x.Final.(transport.Namer); ok {
-		name = namer.TransportName()
-	}
-	return name
-}
-
-func (x unaryChainExec) Transports() []transport.Transport {
-	return x.Final.Transports()
-}
-
-func (x unaryChainExec) Start() error {
-	return x.Final.Start()
-}
-
-func (x unaryChainExec) Stop() error {
-	return x.Final.Stop()
-}
-
-func (x unaryChainExec) IsRunning() bool {
-	return x.Final.IsRunning()
-}
-
-func (c unaryChain) Call(ctx context.Context, request *transport.Request, out interceptor.DirectUnaryOutbound) (*transport.Response, error) {
+// NewUnaryChain combines a series of `UnaryInbound`s into a single `InboundMiddleware`.
+func NewUnaryChain(out interceptor.DirectUnaryOutbound, list []interceptor.UnaryOutbound) interceptor.UnaryOutboundChain {
 	return unaryChainExec{
-		Chain: c,
+		Chain: list,
 		Final: out,
-	}.DirectCall(ctx, request)
+	}
 }
 
-func (x unaryChainExec) DirectCall(ctx context.Context, request *transport.Request) (*transport.Response, error) {
+func (x unaryChainExec) Next(ctx context.Context, request *transport.Request) (*transport.Response, error) {
 	if len(x.Chain) == 0 {
 		return x.Final.DirectCall(ctx, request)
 	}
@@ -93,6 +44,10 @@ func (x unaryChainExec) DirectCall(ctx context.Context, request *transport.Reque
 	return next.Call(ctx, request, x)
 }
 
+func (x unaryChainExec) Outbound() interceptor.Outbound {
+	return x.Final
+}
+
 // unaryChainExec adapts a series of `UnaryOutbound`s into a `UnaryOutbound`. It
 // is scoped to a single call of a UnaryOutbound and is not thread-safe.
 type unaryChainExec struct {
diff --git a/internal/interceptor/outboundinterceptor/chain_test.go b/internal/interceptor/outboundinterceptor/chain_test.go
index 37ff767c..5fde45d6 100644
--- a/internal/interceptor/outboundinterceptor/chain_test.go
+++ b/internal/interceptor/outboundinterceptor/chain_test.go
@@ -45,8 +45,8 @@ func TestUnaryChain(t *testing.T) {
 		desc string
 		mw   interceptor.UnaryOutbound
 	}{
-		{"flat chain", UnaryChain(before, nil, after)},
-		{"nested chain", UnaryChain(before, UnaryChain(after, nil))},
+		{"flat chain", NewUnaryChain(before, nil, after)},
+		{"nested chain", NewUnaryChain(before, NewUnaryChain(after, nil))},
 	}
 
 	for _, tt := range tests {
@@ -155,7 +155,7 @@ func TestStreamChain(t *testing.T) {
 }
 
 func TestEmptyChains(t *testing.T) {
-	assert.Equal(t, interceptor.NopUnaryOutbound, UnaryChain())
+	assert.Equal(t, interceptor.NopUnaryOutbound, NewUnaryChain())
 	assert.Equal(t, interceptor.NopOnewayOutbound, OnewayChain())
 	assert.Equal(t, interceptor.NopStreamOutbound, StreamChain())
 }
diff --git a/internal/tracinginterceptor/interceptor.go b/internal/tracinginterceptor/interceptor.go
index db53a60a..5ff05f90 100644
--- a/internal/tracinginterceptor/interceptor.go
+++ b/internal/tracinginterceptor/interceptor.go
@@ -105,7 +105,7 @@ func (i *Interceptor) Handle(ctx context.Context, req *transport.Request, resw t
 }
 
 // Call implements interceptor.UnaryOutbound
-func (i *Interceptor) Call(ctx context.Context, req *transport.Request, out interceptor.DirectUnaryOutbound) (*transport.Response, error) {
+func (i *Interceptor) Call(ctx context.Context, req *transport.Request, out interceptor.UnaryOutboundChain) (*transport.Response, error) {
 	createOpenTracingSpan := &transport.CreateOpenTracingSpan{
 		Tracer:        i.tracer,
 		TransportName: i.transport,
@@ -127,7 +127,7 @@ func (i *Interceptor) Call(ctx context.Context, req *transport.Request, out inte
 		}
 	}
 
-	res, err := out.DirectCall(ctx, req)
+	res, err := out.Next(ctx, req)
 	if res != nil {
 		return res, updateSpanWithErrorDetails(span, res.ApplicationError, res.ApplicationErrorMeta, err)
 	}
diff --git a/transport/grpc/options.go b/transport/grpc/options.go
index ec60439d..f6e68bf3 100644
--- a/transport/grpc/options.go
+++ b/transport/grpc/options.go
@@ -309,7 +309,7 @@ type transportOptions struct {
 	serverMaxHeaderListSize   *uint32
 	clientMaxHeaderListSize   *uint32
 	unaryInboundInterceptor   interceptor.UnaryInbound
-	unaryOutboundInterceptor  interceptor.UnaryOutbound
+	unaryOutboundInterceptor  []interceptor.UnaryOutbound
 	streamInboundInterceptor  interceptor.StreamInbound
 	streamOutboundInterceptor interceptor.StreamOutbound
 }
@@ -334,7 +334,6 @@ func newTransportOptions(options []TransportOption) *transportOptions {
 
 	var (
 		unaryInbounds   []interceptor.UnaryInbound
-		unaryOutbounds  []interceptor.UnaryOutbound
 		streamInbounds  []interceptor.StreamInbound
 		streamOutbounds []interceptor.StreamOutbound
 	)
@@ -344,14 +343,14 @@ func newTransportOptions(options []TransportOption) *transportOptions {
 			Transport: TransportName,
 		})
 		unaryInbounds = append(unaryInbounds, ti)
-		unaryOutbounds = append(unaryOutbounds, ti)
 		streamInbounds = append(streamInbounds, ti)
 		streamOutbounds = append(streamOutbounds, ti)
+
+		transportOptions.unaryOutboundInterceptor = []interceptor.UnaryOutbound{ti}
 		transportOptions.tracer = opentracing.NoopTracer{}
 	}
 
 	transportOptions.unaryInboundInterceptor = inboundmiddleware.UnaryChain(unaryInbounds...)
-	transportOptions.unaryOutboundInterceptor = outboundinterceptor.UnaryChain(unaryOutbounds...)
 	transportOptions.streamInboundInterceptor = inboundmiddleware.StreamChain(streamInbounds...)
 	transportOptions.streamOutboundInterceptor = outboundinterceptor.StreamChain(streamOutbounds...)
 	return transportOptions
diff --git a/transport/grpc/outbound.go b/transport/grpc/outbound.go
index e6904030..16955cc3 100644
--- a/transport/grpc/outbound.go
+++ b/transport/grpc/outbound.go
@@ -62,21 +62,12 @@ type Outbound struct {
 	peerChooser peer.Chooser
 	options     *outboundOptions
 
-	unaryCallWithInterceptor  interceptor.DirectUnaryOutbound
+	unaryCallWithInterceptor  interceptor.UnaryOutboundChain
 	streamCallWithInterceptor interceptor.DirectStreamOutbound
 }
 
 func newSingleOutbound(t *Transport, address string, options ...OutboundOption) *Outbound {
-	o := newOutbound(t, peerchooser.NewSingle(hostport.PeerIdentifier(address), t), options...)
-	o.unaryCallWithInterceptor = interceptor.ApplyUnaryOutbound(
-		o,
-		outboundinterceptor.UnaryChain(),
-	)
-	o.streamCallWithInterceptor = interceptor.ApplyStreamOutbound(
-		o,
-		outboundinterceptor.StreamChain(),
-	)
-	return o
+	return newOutbound(t, peerchooser.NewSingle(hostport.PeerIdentifier(address), t), options...)
 }
 
 func newOutbound(t *Transport, peerChooser peer.Chooser, options ...OutboundOption) *Outbound {
@@ -86,10 +77,7 @@ func newOutbound(t *Transport, peerChooser peer.Chooser, options ...OutboundOpti
 		peerChooser: peerChooser,
 		options:     newOutboundOptions(options),
 	}
-	o.unaryCallWithInterceptor = interceptor.ApplyUnaryOutbound(
-		o,
-		outboundinterceptor.UnaryChain(),
-	)
+	o.unaryCallWithInterceptor = outboundinterceptor.NewUnaryChain(o, t.options.unaryOutboundInterceptor)
 	o.streamCallWithInterceptor = interceptor.ApplyStreamOutbound(
 		o,
 		outboundinterceptor.StreamChain(),
@@ -130,7 +118,7 @@ func (o *Outbound) Chooser() peer.Chooser {
 
 // Call wraps the DirectCall.
 func (o *Outbound) Call(ctx context.Context, request *transport.Request) (*transport.Response, error) {
-	return o.unaryCallWithInterceptor.DirectCall(ctx, request)
+	return o.unaryCallWithInterceptor.Next(ctx, request)
 }
 
 // DirectCall implements transport.UnaryOutbound#Call.
diff --git a/transport/http/outbound.go b/transport/http/outbound.go
index 847e700d..609d573d 100644
--- a/transport/http/outbound.go
+++ b/transport/http/outbound.go
@@ -146,10 +146,7 @@ func (t *Transport) NewOutbound(chooser peer.Chooser, opts ...OutboundOption) *O
 	}
 	o.client = client
 	o.sender = &transportSender{Client: client}
-	o.unaryCallWithInterceptor = interceptor.ApplyUnaryOutbound(
-		o,
-		outboundinterceptor.UnaryChain(),
-	)
+	o.unaryCallWithInterceptor = outboundinterceptor.NewUnaryChain(o, t.unaryOutboundInterceptor)
 	o.onewayCallWithInterceptor = interceptor.ApplyOnewayOutbound(
 		o,
 		outboundinterceptor.OnewayChain(),
@@ -205,10 +202,7 @@ func (t *Transport) NewSingleOutbound(uri string, opts ...OutboundOption) *Outbo
 	chooser := peerchooser.NewSingle(hostport.PeerIdentifier(parsedURL.Host), t)
 	opts = append(opts, URLTemplate(uri))
 	o := t.NewOutbound(chooser, opts...)
-	o.unaryCallWithInterceptor = interceptor.ApplyUnaryOutbound(
-		o,
-		outboundinterceptor.UnaryChain(),
-	)
+	o.unaryCallWithInterceptor = outboundinterceptor.NewUnaryChain(o, t.unaryOutboundInterceptor)
 	o.onewayCallWithInterceptor = interceptor.ApplyOnewayOutbound(
 		o,
 		outboundinterceptor.OnewayChain(),
@@ -239,7 +233,7 @@ type Outbound struct {
 	client            *http.Client
 	tlsConfig         *tls.Config
 
-	unaryCallWithInterceptor  interceptor.DirectUnaryOutbound
+	unaryCallWithInterceptor  interceptor.UnaryOutboundChain
 	onewayCallWithInterceptor interceptor.DirectOnewayOutbound
 }
 
@@ -286,7 +280,7 @@ func (o *Outbound) IsRunning() bool {
 
 // Call implements UnaryOutbound
 func (o *Outbound) Call(ctx context.Context, treq *transport.Request) (*transport.Response, error) {
-	return o.unaryCallWithInterceptor.DirectCall(ctx, treq)
+	return o.unaryCallWithInterceptor.Next(ctx, treq)
 }
 
 // DirectCall makes a HTTP request
diff --git a/transport/http/transport.go b/transport/http/transport.go
index 3261e638..40bcef0f 100644
--- a/transport/http/transport.go
+++ b/transport/http/transport.go
@@ -314,7 +314,7 @@ func (o *transportOptions) newTransport() *Transport {
 		serviceName:               o.serviceName,
 		ouboundTLSConfigProvider:  o.outboundTLSConfigProvider,
 		unaryInboundInterceptor:   inboundmiddleware.UnaryChain(unaryInbounds...),
-		unaryOutboundInterceptor:  outboundinterceptor.UnaryChain(unaryOutbounds...),
+		unaryOutboundInterceptor:  unaryOutbounds,
 		onewayInboundInterceptor:  inboundmiddleware.OnewayChain(onewayInbounds...),
 		onewayOutboundInterceptor: outboundinterceptor.OnewayChain(onewayOutbounds...),
 	}
@@ -369,7 +369,7 @@ type Transport struct {
 	ouboundTLSConfigProvider yarpctls.OutboundTLSConfigProvider
 
 	unaryInboundInterceptor   interceptor.UnaryInbound
-	unaryOutboundInterceptor  interceptor.UnaryOutbound
+	unaryOutboundInterceptor  []interceptor.UnaryOutbound
 	onewayInboundInterceptor  interceptor.OnewayInbound
 	onewayOutboundInterceptor interceptor.OnewayOutbound
 }
diff --git a/transport/tchannel/channel_outbound.go b/transport/tchannel/channel_outbound.go
index 95bbe49b..a755b884 100644
--- a/transport/tchannel/channel_outbound.go
+++ b/transport/tchannel/channel_outbound.go
@@ -47,10 +47,7 @@ func (t *ChannelTransport) NewOutbound() *ChannelOutbound {
 		channel:   t.ch,
 		transport: t,
 	}
-	o.unaryCallWithInterceptor = interceptor.ApplyUnaryOutbound(
-		o,
-		outboundinterceptor.UnaryChain(),
-	)
+	o.unaryCallWithInterceptor = outboundinterceptor.NewUnaryChain(o, t.unaryOutboundInterceptor)
 	return o
 }
 
@@ -63,10 +60,7 @@ func (t *ChannelTransport) NewSingleOutbound(addr string) *ChannelOutbound {
 		transport: t,
 		addr:      addr,
 	}
-	o.unaryCallWithInterceptor = interceptor.ApplyUnaryOutbound(
-		o,
-		outboundinterceptor.UnaryChain(),
-	)
+	o.unaryCallWithInterceptor = outboundinterceptor.NewUnaryChain(o, t.unaryOutboundInterceptor)
 	return o
 }
 
@@ -84,7 +78,7 @@ type ChannelOutbound struct {
 	addr string
 
 	once                     *lifecycle.Once
-	unaryCallWithInterceptor interceptor.DirectUnaryOutbound
+	unaryCallWithInterceptor interceptor.UnaryOutboundChain
 }
 
 // TransportName is the transport name that will be set on `transport.Request`
@@ -126,7 +120,7 @@ func (o *ChannelOutbound) Call(ctx context.Context, req *transport.Request) (*tr
 		return nil, yarpcerrors.InvalidArgumentErrorf("request for tchannel channel outbound was nil")
 	}
 
-	return o.unaryCallWithInterceptor.DirectCall(ctx, req)
+	return o.unaryCallWithInterceptor.Next(ctx, req)
 }
 
 // DirectCall sends an RPC over this TChannel outbound.
diff --git a/transport/tchannel/channel_transport.go b/transport/tchannel/channel_transport.go
index 037c7528..f6d7df57 100644
--- a/transport/tchannel/channel_transport.go
+++ b/transport/tchannel/channel_transport.go
@@ -22,7 +22,6 @@ package tchannel
 
 import (
 	"errors"
-	"go.uber.org/yarpc/internal/interceptor/outboundinterceptor"
 
 	"github.com/opentracing/opentracing-go"
 	"github.com/uber/tchannel-go"
@@ -114,7 +113,7 @@ func (options transportOptions) newChannelTransport() *ChannelTransport {
 		originalHeaders:          options.originalHeaders,
 		newResponseWriter:        newHandlerWriter,
 		unaryInboundInterceptor:  inboundmiddleware.UnaryChain(unaryInbounds...),
-		unaryOutboundInterceptor: outboundinterceptor.UnaryChain(unaryOutbounds...),
+		unaryOutboundInterceptor: unaryOutbounds,
 	}
 }
 
@@ -132,7 +131,7 @@ type ChannelTransport struct {
 	originalHeaders          bool
 	newResponseWriter        func(inboundCallResponse, tchannel.Format, headerCase) responseWriter
 	unaryInboundInterceptor  interceptor.UnaryInbound
-	unaryOutboundInterceptor interceptor.UnaryOutbound
+	unaryOutboundInterceptor []interceptor.UnaryOutbound
 }
 
 // Channel returns the underlying TChannel "Channel" instance.
@@ -173,7 +172,6 @@ func (t *ChannelTransport) start() error {
 				tracer:                   t.tracer,
 				logger:                   t.logger,
 				newResponseWriter:        t.newResponseWriter,
-				unaryOutboundInterceptor: t.unaryOutboundInterceptor,
 				unaryInboundInterceptor:  t.unaryInboundInterceptor},
 			)
 		}
diff --git a/transport/tchannel/handler.go b/transport/tchannel/handler.go
index a28360f0..49fb8213 100644
--- a/transport/tchannel/handler.go
+++ b/transport/tchannel/handler.go
@@ -108,7 +108,6 @@ type handler struct {
 	newResponseWriter              func(inboundCallResponse, tchannel.Format, headerCase) responseWriter
 	excludeServiceHeaderInResponse bool
 	unaryInboundInterceptor        interceptor.UnaryInbound
-	unaryOutboundInterceptor       interceptor.UnaryOutbound
 }
 
 func (h handler) Handle(ctx ncontext.Context, call *tchannel.InboundCall) {
diff --git a/transport/tchannel/outbound.go b/transport/tchannel/outbound.go
index db34ea2c..e0c98c5b 100644
--- a/transport/tchannel/outbound.go
+++ b/transport/tchannel/outbound.go
@@ -57,7 +57,7 @@ type Outbound struct {
 	chooser                  peer.Chooser
 	once                     *lifecycle.Once
 	reuseBuffer              bool
-	unaryCallWithInterceptor interceptor.DirectUnaryOutbound
+	unaryCallWithInterceptor interceptor.UnaryOutboundChain
 }
 
 // OutboundOption customizes the behavior of a TChannel Outbound.
@@ -79,10 +79,7 @@ func (t *Transport) NewOutbound(chooser peer.Chooser, opts ...OutboundOption) *O
 		transport: t,
 		chooser:   chooser,
 	}
-	o.unaryCallWithInterceptor = interceptor.ApplyUnaryOutbound(
-		o,
-		outboundinterceptor.UnaryChain(),
-	)
+	o.unaryCallWithInterceptor = outboundinterceptor.NewUnaryChain(o, t.unaryOutboundInterceptor)
 	for _, opt := range opts {
 		opt(o)
 	}
@@ -108,7 +105,7 @@ func (o *Outbound) Chooser() peer.Chooser {
 
 // Call wraps the DirectCall.
 func (o *Outbound) Call(ctx context.Context, req *transport.Request) (*transport.Response, error) {
-	return o.unaryCallWithInterceptor.DirectCall(ctx, req)
+	return o.unaryCallWithInterceptor.Next(ctx, req)
 }
 
 // DirectCall sends an RPC over this TChannel outbound.
diff --git a/transport/tchannel/transport.go b/transport/tchannel/transport.go
index eac36b70..c9d927a8 100644
--- a/transport/tchannel/transport.go
+++ b/transport/tchannel/transport.go
@@ -91,7 +91,7 @@ type Transport struct {
 	outboundChannels          []*outboundChannel
 
 	unaryInboundInterceptor  interceptor.UnaryInbound
-	unaryOutboundInterceptor interceptor.UnaryOutbound
+	unaryOutboundInterceptor []interceptor.UnaryOutbound
 }
 
 // NewTransport is a YARPC transport that facilitates sending and receiving
@@ -161,7 +161,7 @@ func (o transportOptions) newTransport() *Transport {
 		inboundTLSMode:                 o.inboundTLSMode,
 		outboundTLSConfigProvider:      o.outboundTLSConfigProvider,
 		unaryInboundInterceptor:        inboundmiddleware.UnaryChain(unaryInbounds...),
-		unaryOutboundInterceptor:       outboundinterceptor.UnaryChain(unaryOutbounds...),
+		unaryOutboundInterceptor:       unaryOutbounds,
 	}
 }
 

