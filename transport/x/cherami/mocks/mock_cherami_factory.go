// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package mocks

import cherami "github.com/uber/cherami-client-go/client/cherami"
import internal "go.uber.org/yarpc/transport/x/cherami/internal"
import mock "github.com/stretchr/testify/mock"

// ClientFactory is an autogenerated mock type for the ClientFactory type
type ClientFactory struct {
	mock.Mock
}

// GetConsumer provides a mock function with given fields: client, config
func (_m *ClientFactory) GetConsumer(client cherami.Client, config internal.ConsumerConfig) (cherami.Consumer, chan cherami.Delivery, error) {
	ret := _m.Called(client, config)

	var r0 cherami.Consumer
	if rf, ok := ret.Get(0).(func(cherami.Client, internal.ConsumerConfig) cherami.Consumer); ok {
		r0 = rf(client, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cherami.Consumer)
		}
	}

	var r1 chan cherami.Delivery
	if rf, ok := ret.Get(1).(func(cherami.Client, internal.ConsumerConfig) chan cherami.Delivery); ok {
		r1 = rf(client, config)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan cherami.Delivery)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(cherami.Client, internal.ConsumerConfig) error); ok {
		r2 = rf(client, config)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPublisher provides a mock function with given fields: client, destination
func (_m *ClientFactory) GetPublisher(client cherami.Client, destination string) (cherami.Publisher, error) {
	ret := _m.Called(client, destination)

	var r0 cherami.Publisher
	if rf, ok := ret.Get(0).(func(cherami.Client, string) cherami.Publisher); ok {
		r0 = rf(client, destination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cherami.Publisher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(cherami.Client, string) error); ok {
		r1 = rf(client, destination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

var _ internal.ClientFactory = (*ClientFactory)(nil)
