// Automatically generated by MockGen. DO NOT EDIT!
// Source: go.uber.org/yarpc/transport/x/redis (interfaces: Client)

package redistest

import (
	gomock "github.com/golang/mock/gomock"
	time "time"
)

// Mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *_MockClientRecorder
}

// Recorder for MockClient (not exported)
type _MockClientRecorder struct {
	mock *MockClient
}

func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &_MockClientRecorder{mock}
	return mock
}

func (_m *MockClient) EXPECT() *_MockClientRecorder {
	return _m.recorder
}

func (_m *MockClient) BRPopLPush(_param0 string, _param1 string, _param2 time.Duration) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "BRPopLPush", _param0, _param1, _param2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) BRPopLPush(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BRPopLPush", arg0, arg1, arg2)
}

func (_m *MockClient) ConState() string {
	ret := _m.ctrl.Call(_m, "ConState")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockClientRecorder) ConState() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConState")
}

func (_m *MockClient) Endpoint() string {
	ret := _m.ctrl.Call(_m, "Endpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockClientRecorder) Endpoint() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Endpoint")
}

func (_m *MockClient) LPush(_param0 string, _param1 []byte) error {
	ret := _m.ctrl.Call(_m, "LPush", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) LPush(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LPush", arg0, arg1)
}

func (_m *MockClient) LRem(_param0 string, _param1 []byte) error {
	ret := _m.ctrl.Call(_m, "LRem", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) LRem(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LRem", arg0, arg1)
}

func (_m *MockClient) Start() error {
	ret := _m.ctrl.Call(_m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start")
}

func (_m *MockClient) Stop() error {
	ret := _m.ctrl.Call(_m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop")
}
