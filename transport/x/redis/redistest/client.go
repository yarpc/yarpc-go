// Code generated by MockGen. DO NOT EDIT.
// Source: go.uber.org/yarpc/transport/x/redis (interfaces: Client)

// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package redistest

import (
	gomock "github.com/golang/mock/gomock"
	time "time"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockClient) EXPECT() *MockClientMockRecorder {
	return _m.recorder
}

// BRPopLPush mocks base method
func (_m *MockClient) BRPopLPush(_param0 string, _param1 string, _param2 time.Duration) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "BRPopLPush", _param0, _param1, _param2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BRPopLPush indicates an expected call of BRPopLPush
func (_mr *MockClientMockRecorder) BRPopLPush(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BRPopLPush", arg0, arg1, arg2)
}

// ConnectionState mocks base method
func (_m *MockClient) ConnectionState() string {
	ret := _m.ctrl.Call(_m, "ConnectionState")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConnectionState indicates an expected call of ConnectionState
func (_mr *MockClientMockRecorder) ConnectionState() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConnectionState")
}

// Endpoint mocks base method
func (_m *MockClient) Endpoint() string {
	ret := _m.ctrl.Call(_m, "Endpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// Endpoint indicates an expected call of Endpoint
func (_mr *MockClientMockRecorder) Endpoint() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Endpoint")
}

// IsRunning mocks base method
func (_m *MockClient) IsRunning() bool {
	ret := _m.ctrl.Call(_m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning
func (_mr *MockClientMockRecorder) IsRunning() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsRunning")
}

// LPush mocks base method
func (_m *MockClient) LPush(_param0 string, _param1 []byte) error {
	ret := _m.ctrl.Call(_m, "LPush", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LPush indicates an expected call of LPush
func (_mr *MockClientMockRecorder) LPush(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LPush", arg0, arg1)
}

// LRem mocks base method
func (_m *MockClient) LRem(_param0 string, _param1 []byte) error {
	ret := _m.ctrl.Call(_m, "LRem", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LRem indicates an expected call of LRem
func (_mr *MockClientMockRecorder) LRem(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LRem", arg0, arg1)
}

// Start mocks base method
func (_m *MockClient) Start() error {
	ret := _m.ctrl.Call(_m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (_mr *MockClientMockRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start")
}

// Stop mocks base method
func (_m *MockClient) Stop() error {
	ret := _m.ctrl.Call(_m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (_mr *MockClientMockRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop")
}
