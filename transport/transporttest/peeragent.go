// Automatically generated by MockGen. DO NOT EDIT!
// Source: go.uber.org/yarpc/transport (interfaces: PeerAgent,PeerSubscriber)

package transporttest

import (
	gomock "github.com/golang/mock/gomock"
	transport "go.uber.org/yarpc/transport"
)

// Mock of PeerAgent interface
type MockPeerAgent struct {
	ctrl     *gomock.Controller
	recorder *_MockPeerAgentRecorder
}

// Recorder for MockPeerAgent (not exported)
type _MockPeerAgentRecorder struct {
	mock *MockPeerAgent
}

func NewMockPeerAgent(ctrl *gomock.Controller) *MockPeerAgent {
	mock := &MockPeerAgent{ctrl: ctrl}
	mock.recorder = &_MockPeerAgentRecorder{mock}
	return mock
}

func (_m *MockPeerAgent) EXPECT() *_MockPeerAgentRecorder {
	return _m.recorder
}

func (_m *MockPeerAgent) ReleasePeer(_param0 transport.PeerIdentifier, _param1 transport.PeerSubscriber) error {
	ret := _m.ctrl.Call(_m, "ReleasePeer", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPeerAgentRecorder) ReleasePeer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReleasePeer", arg0, arg1)
}

func (_m *MockPeerAgent) RetainPeer(_param0 transport.PeerIdentifier, _param1 transport.PeerSubscriber) (transport.Peer, error) {
	ret := _m.ctrl.Call(_m, "RetainPeer", _param0, _param1)
	ret0, _ := ret[0].(transport.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPeerAgentRecorder) RetainPeer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RetainPeer", arg0, arg1)
}

// Mock of PeerSubscriber interface
type MockPeerSubscriber struct {
	ctrl     *gomock.Controller
	recorder *_MockPeerSubscriberRecorder
}

// Recorder for MockPeerSubscriber (not exported)
type _MockPeerSubscriberRecorder struct {
	mock *MockPeerSubscriber
}

func NewMockPeerSubscriber(ctrl *gomock.Controller) *MockPeerSubscriber {
	mock := &MockPeerSubscriber{ctrl: ctrl}
	mock.recorder = &_MockPeerSubscriberRecorder{mock}
	return mock
}

func (_m *MockPeerSubscriber) EXPECT() *_MockPeerSubscriberRecorder {
	return _m.recorder
}

func (_m *MockPeerSubscriber) NotifyAvailable(_param0 transport.Peer) error {
	ret := _m.ctrl.Call(_m, "NotifyAvailable", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPeerSubscriberRecorder) NotifyAvailable(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyAvailable", arg0)
}

func (_m *MockPeerSubscriber) NotifyConnecting(_param0 transport.Peer) error {
	ret := _m.ctrl.Call(_m, "NotifyConnecting", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPeerSubscriberRecorder) NotifyConnecting(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyConnecting", arg0)
}

func (_m *MockPeerSubscriber) NotifyPendingUpdate(_param0 transport.Peer) {
	_m.ctrl.Call(_m, "NotifyPendingUpdate", _param0)
}

func (_mr *_MockPeerSubscriberRecorder) NotifyPendingUpdate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyPendingUpdate", arg0)
}

func (_m *MockPeerSubscriber) NotifyUnavailable(_param0 transport.Peer) error {
	ret := _m.ctrl.Call(_m, "NotifyUnavailable", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPeerSubscriberRecorder) NotifyUnavailable(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyUnavailable", arg0)
}
