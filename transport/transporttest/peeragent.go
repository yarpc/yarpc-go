// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: go.uber.org/yarpc/transport (interfaces: Agent,PeerSubscriber)

package transporttest

import (
	gomock "github.com/golang/mock/gomock"
	transport "go.uber.org/yarpc/transport"
)

// Mock of Agent interface
type MockAgent struct {
	ctrl     *gomock.Controller
	recorder *_MockAgentRecorder
}

// Recorder for MockAgent (not exported)
type _MockAgentRecorder struct {
	mock *MockAgent
}

func NewMockAgent(ctrl *gomock.Controller) *MockAgent {
	mock := &MockAgent{ctrl: ctrl}
	mock.recorder = &_MockAgentRecorder{mock}
	return mock
}

func (_m *MockAgent) EXPECT() *_MockAgentRecorder {
	return _m.recorder
}

func (_m *MockAgent) NotifyStatusChanged(_param0 transport.Peer) {
	_m.ctrl.Call(_m, "NotifyStatusChanged", _param0)
}

func (_mr *_MockAgentRecorder) NotifyStatusChanged(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyStatusChanged", arg0)
}

func (_m *MockAgent) ReleasePeer(_param0 transport.PeerIdentifier, _param1 transport.PeerSubscriber) error {
	ret := _m.ctrl.Call(_m, "ReleasePeer", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAgentRecorder) ReleasePeer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReleasePeer", arg0, arg1)
}

func (_m *MockAgent) RetainPeer(_param0 transport.PeerIdentifier, _param1 transport.PeerSubscriber) (transport.Peer, error) {
	ret := _m.ctrl.Call(_m, "RetainPeer", _param0, _param1)
	ret0, _ := ret[0].(transport.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAgentRecorder) RetainPeer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RetainPeer", arg0, arg1)
}

// Mock of PeerSubscriber interface
type MockPeerSubscriber struct {
	ctrl     *gomock.Controller
	recorder *_MockPeerSubscriberRecorder
}

// Recorder for MockPeerSubscriber (not exported)
type _MockPeerSubscriberRecorder struct {
	mock *MockPeerSubscriber
}

func NewMockPeerSubscriber(ctrl *gomock.Controller) *MockPeerSubscriber {
	mock := &MockPeerSubscriber{ctrl: ctrl}
	mock.recorder = &_MockPeerSubscriberRecorder{mock}
	return mock
}

func (_m *MockPeerSubscriber) EXPECT() *_MockPeerSubscriberRecorder {
	return _m.recorder
}

func (_m *MockPeerSubscriber) NotifyStatusChanged(_param0 transport.Peer) {
	_m.ctrl.Call(_m, "NotifyStatusChanged", _param0)
}

func (_mr *_MockPeerSubscriberRecorder) NotifyStatusChanged(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyStatusChanged", arg0)
}
