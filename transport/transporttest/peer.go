// Automatically generated by MockGen. DO NOT EDIT!
// Source: go.uber.org/yarpc/transport (interfaces: PeerIdentifier,Peer,SubscribablePeer,PeerSubscriber)

package transporttest

import (
	gomock "github.com/golang/mock/gomock"
	transport "go.uber.org/yarpc/transport"
)

// Mock of PeerIdentifier interface
type MockPeerIdentifier struct {
	ctrl     *gomock.Controller
	recorder *_MockPeerIdentifierRecorder
}

// Recorder for MockPeerIdentifier (not exported)
type _MockPeerIdentifierRecorder struct {
	mock *MockPeerIdentifier
}

func NewMockPeerIdentifier(ctrl *gomock.Controller) *MockPeerIdentifier {
	mock := &MockPeerIdentifier{ctrl: ctrl}
	mock.recorder = &_MockPeerIdentifierRecorder{mock}
	return mock
}

func (_m *MockPeerIdentifier) EXPECT() *_MockPeerIdentifierRecorder {
	return _m.recorder
}

func (_m *MockPeerIdentifier) Identifier() string {
	ret := _m.ctrl.Call(_m, "Identifier")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPeerIdentifierRecorder) Identifier() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Identifier")
}

// Mock of Peer interface
type MockPeer struct {
	ctrl     *gomock.Controller
	recorder *_MockPeerRecorder
}

// Recorder for MockPeer (not exported)
type _MockPeerRecorder struct {
	mock *MockPeer
}

func NewMockPeer(ctrl *gomock.Controller) *MockPeer {
	mock := &MockPeer{ctrl: ctrl}
	mock.recorder = &_MockPeerRecorder{mock}
	return mock
}

func (_m *MockPeer) EXPECT() *_MockPeerRecorder {
	return _m.recorder
}

func (_m *MockPeer) DecPending() {
	_m.ctrl.Call(_m, "DecPending")
}

func (_mr *_MockPeerRecorder) DecPending() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecPending")
}

func (_m *MockPeer) GetAgent() transport.PeerAgent {
	ret := _m.ctrl.Call(_m, "GetAgent")
	ret0, _ := ret[0].(transport.PeerAgent)
	return ret0
}

func (_mr *_MockPeerRecorder) GetAgent() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAgent")
}

func (_m *MockPeer) GetStatus() transport.PeerStatus {
	ret := _m.ctrl.Call(_m, "GetStatus")
	ret0, _ := ret[0].(transport.PeerStatus)
	return ret0
}

func (_mr *_MockPeerRecorder) GetStatus() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetStatus")
}

func (_m *MockPeer) Identifier() string {
	ret := _m.ctrl.Call(_m, "Identifier")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockPeerRecorder) Identifier() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Identifier")
}

func (_m *MockPeer) IncPending() {
	_m.ctrl.Call(_m, "IncPending")
}

func (_mr *_MockPeerRecorder) IncPending() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IncPending")
}

func (_m *MockPeer) Pending() int {
	ret := _m.ctrl.Call(_m, "Pending")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockPeerRecorder) Pending() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Pending")
}

// Mock of SubscribablePeer interface
type MockSubscribablePeer struct {
	ctrl     *gomock.Controller
	recorder *_MockSubscribablePeerRecorder
}

// Recorder for MockSubscribablePeer (not exported)
type _MockSubscribablePeerRecorder struct {
	mock *MockSubscribablePeer
}

func NewMockSubscribablePeer(ctrl *gomock.Controller) *MockSubscribablePeer {
	mock := &MockSubscribablePeer{ctrl: ctrl}
	mock.recorder = &_MockSubscribablePeerRecorder{mock}
	return mock
}

func (_m *MockSubscribablePeer) EXPECT() *_MockSubscribablePeerRecorder {
	return _m.recorder
}

func (_m *MockSubscribablePeer) DecPending() {
	_m.ctrl.Call(_m, "DecPending")
}

func (_mr *_MockSubscribablePeerRecorder) DecPending() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecPending")
}

func (_m *MockSubscribablePeer) GetAgent() transport.PeerAgent {
	ret := _m.ctrl.Call(_m, "GetAgent")
	ret0, _ := ret[0].(transport.PeerAgent)
	return ret0
}

func (_mr *_MockSubscribablePeerRecorder) GetAgent() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAgent")
}

func (_m *MockSubscribablePeer) GetStatus() transport.PeerStatus {
	ret := _m.ctrl.Call(_m, "GetStatus")
	ret0, _ := ret[0].(transport.PeerStatus)
	return ret0
}

func (_mr *_MockSubscribablePeerRecorder) GetStatus() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetStatus")
}

func (_m *MockSubscribablePeer) Identifier() string {
	ret := _m.ctrl.Call(_m, "Identifier")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockSubscribablePeerRecorder) Identifier() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Identifier")
}

func (_m *MockSubscribablePeer) IncPending() {
	_m.ctrl.Call(_m, "IncPending")
}

func (_mr *_MockSubscribablePeerRecorder) IncPending() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IncPending")
}

func (_m *MockSubscribablePeer) OnRelease(_param0 transport.PeerSubscriber) error {
	ret := _m.ctrl.Call(_m, "OnRelease", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSubscribablePeerRecorder) OnRelease(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnRelease", arg0)
}

func (_m *MockSubscribablePeer) OnRetain(_param0 transport.PeerSubscriber) error {
	ret := _m.ctrl.Call(_m, "OnRetain", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSubscribablePeerRecorder) OnRetain(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnRetain", arg0)
}

func (_m *MockSubscribablePeer) Pending() int {
	ret := _m.ctrl.Call(_m, "Pending")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockSubscribablePeerRecorder) Pending() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Pending")
}

func (_m *MockSubscribablePeer) References() int {
	ret := _m.ctrl.Call(_m, "References")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockSubscribablePeerRecorder) References() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "References")
}

// Mock of PeerSubscriber interface
type MockPeerSubscriber struct {
	ctrl     *gomock.Controller
	recorder *_MockPeerSubscriberRecorder
}

// Recorder for MockPeerSubscriber (not exported)
type _MockPeerSubscriberRecorder struct {
	mock *MockPeerSubscriber
}

func NewMockPeerSubscriber(ctrl *gomock.Controller) *MockPeerSubscriber {
	mock := &MockPeerSubscriber{ctrl: ctrl}
	mock.recorder = &_MockPeerSubscriberRecorder{mock}
	return mock
}

func (_m *MockPeerSubscriber) EXPECT() *_MockPeerSubscriberRecorder {
	return _m.recorder
}

func (_m *MockPeerSubscriber) NotifyAvailable(_param0 transport.Peer) error {
	ret := _m.ctrl.Call(_m, "NotifyAvailable", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPeerSubscriberRecorder) NotifyAvailable(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyAvailable", arg0)
}

func (_m *MockPeerSubscriber) NotifyConnecting(_param0 transport.Peer) error {
	ret := _m.ctrl.Call(_m, "NotifyConnecting", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPeerSubscriberRecorder) NotifyConnecting(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyConnecting", arg0)
}

func (_m *MockPeerSubscriber) NotifyPending(_param0 transport.Peer) {
	_m.ctrl.Call(_m, "NotifyPending", _param0)
}

func (_mr *_MockPeerSubscriberRecorder) NotifyPending(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyPending", arg0)
}

func (_m *MockPeerSubscriber) NotifyUnavailable(_param0 transport.Peer) error {
	ret := _m.ctrl.Call(_m, "NotifyUnavailable", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPeerSubscriberRecorder) NotifyUnavailable(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyUnavailable", arg0)
}
