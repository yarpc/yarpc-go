// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: go.uber.org/yarpc/transport (interfaces: Channel,ChannelProvider)

package transporttest

import (
	gomock "github.com/golang/mock/gomock"
	transport "go.uber.org/yarpc/transport"
)

// Mock of Channel interface
type MockChannel struct {
	ctrl     *gomock.Controller
	recorder *_MockChannelRecorder
}

// Recorder for MockChannel (not exported)
type _MockChannelRecorder struct {
	mock *MockChannel
}

func NewMockChannel(ctrl *gomock.Controller) *MockChannel {
	mock := &MockChannel{ctrl: ctrl}
	mock.recorder = &_MockChannelRecorder{mock}
	return mock
}

func (_m *MockChannel) EXPECT() *_MockChannelRecorder {
	return _m.recorder
}

func (_m *MockChannel) Caller() string {
	ret := _m.ctrl.Call(_m, "Caller")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockChannelRecorder) Caller() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Caller")
}

func (_m *MockChannel) GetOutbound() transport.Outbound {
	ret := _m.ctrl.Call(_m, "GetOutbound")
	ret0, _ := ret[0].(transport.Outbound)
	return ret0
}

func (_mr *_MockChannelRecorder) GetOutbound() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetOutbound")
}

func (_m *MockChannel) Service() string {
	ret := _m.ctrl.Call(_m, "Service")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockChannelRecorder) Service() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Service")
}

// Mock of ChannelProvider interface
type MockChannelProvider struct {
	ctrl     *gomock.Controller
	recorder *_MockChannelProviderRecorder
}

// Recorder for MockChannelProvider (not exported)
type _MockChannelProviderRecorder struct {
	mock *MockChannelProvider
}

func NewMockChannelProvider(ctrl *gomock.Controller) *MockChannelProvider {
	mock := &MockChannelProvider{ctrl: ctrl}
	mock.recorder = &_MockChannelProviderRecorder{mock}
	return mock
}

func (_m *MockChannelProvider) EXPECT() *_MockChannelProviderRecorder {
	return _m.recorder
}

func (_m *MockChannelProvider) Channel(_param0 string) transport.Channel {
	ret := _m.ctrl.Call(_m, "Channel", _param0)
	ret0, _ := ret[0].(transport.Channel)
	return ret0
}

func (_mr *_MockChannelProviderRecorder) Channel(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Channel", arg0)
}
