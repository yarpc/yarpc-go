// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: go.uber.org/yarpc/transport (interfaces: ClientConfig,ClientConfigProvider)

package transporttest

import (
	gomock "github.com/golang/mock/gomock"
	transport "go.uber.org/yarpc/transport"
)

// Mock of ClientConfig interface
type MockClientConfig struct {
	ctrl     *gomock.Controller
	recorder *_MockClientConfigRecorder
}

// Recorder for MockClientConfig (not exported)
type _MockClientConfigRecorder struct {
	mock *MockClientConfig
}

func NewMockClientConfig(ctrl *gomock.Controller) *MockClientConfig {
	mock := &MockClientConfig{ctrl: ctrl}
	mock.recorder = &_MockClientConfigRecorder{mock}
	return mock
}

func (_m *MockClientConfig) EXPECT() *_MockClientConfigRecorder {
	return _m.recorder
}

func (_m *MockClientConfig) Caller() string {
	ret := _m.ctrl.Call(_m, "Caller")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockClientConfigRecorder) Caller() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Caller")
}

func (_m *MockClientConfig) GetOnewayOutbound() transport.OnewayOutbound {
	ret := _m.ctrl.Call(_m, "GetOnewayOutbound")
	ret0, _ := ret[0].(transport.OnewayOutbound)
	return ret0
}

func (_mr *_MockClientConfigRecorder) GetOnewayOutbound() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetOnewayOutbound")
}

func (_m *MockClientConfig) GetUnaryOutbound() transport.UnaryOutbound {
	ret := _m.ctrl.Call(_m, "GetUnaryOutbound")
	ret0, _ := ret[0].(transport.UnaryOutbound)
	return ret0
}

func (_mr *_MockClientConfigRecorder) GetUnaryOutbound() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUnaryOutbound")
}

func (_m *MockClientConfig) Service() string {
	ret := _m.ctrl.Call(_m, "Service")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockClientConfigRecorder) Service() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Service")
}

// Mock of ClientConfigProvider interface
type MockClientConfigProvider struct {
	ctrl     *gomock.Controller
	recorder *_MockClientConfigProviderRecorder
}

// Recorder for MockClientConfigProvider (not exported)
type _MockClientConfigProviderRecorder struct {
	mock *MockClientConfigProvider
}

func NewMockClientConfigProvider(ctrl *gomock.Controller) *MockClientConfigProvider {
	mock := &MockClientConfigProvider{ctrl: ctrl}
	mock.recorder = &_MockClientConfigProviderRecorder{mock}
	return mock
}

func (_m *MockClientConfigProvider) EXPECT() *_MockClientConfigProviderRecorder {
	return _m.recorder
}

func (_m *MockClientConfigProvider) ClientConfig(_param0 string) transport.ClientConfig {
	ret := _m.ctrl.Call(_m, "ClientConfig", _param0)
	ret0, _ := ret[0].(transport.ClientConfig)
	return ret0
}

func (_mr *_MockClientConfigProviderRecorder) ClientConfig(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClientConfig", arg0)
}
