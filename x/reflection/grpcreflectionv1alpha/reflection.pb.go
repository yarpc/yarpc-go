// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: grpcreflectionv1alpha/reflection.proto

/*
Package grpcreflectionv1alpha is a generated protocol buffer package.

It is generated from these files:

	grpcreflectionv1alpha/reflection.proto

It has these top-level messages:

	ServerReflectionRequest
	ExtensionRequest
	ServerReflectionResponse
	FileDescriptorResponse
	ExtensionNumberResponse
	ListServiceResponse
	ServiceResponse
	ErrorResponse
*/
package grpcreflectionv1alpha

import (
	fmt "fmt"

	proto "github.com/gogo/protobuf/proto"

	math "math"

	bytes "bytes"

	strings "strings"

	reflect "reflect"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// The message sent by the client when calling ServerReflectionInfo method.
type ServerReflectionRequest struct {
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// To use reflection service, the client should set one of the following
	// fields in message_request. The server distinguishes requests by their
	// defined field and then handles them using corresponding methods.
	//
	// Types that are valid to be assigned to MessageRequest:
	//	*ServerReflectionRequest_FileByFilename
	//	*ServerReflectionRequest_FileContainingSymbol
	//	*ServerReflectionRequest_FileContainingExtension
	//	*ServerReflectionRequest_AllExtensionNumbersOfType
	//	*ServerReflectionRequest_ListServices
	MessageRequest isServerReflectionRequest_MessageRequest `protobuf_oneof:"message_request"`
}

func (m *ServerReflectionRequest) Reset()      { *m = ServerReflectionRequest{} }
func (*ServerReflectionRequest) ProtoMessage() {}
func (*ServerReflectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorReflection, []int{0}
}

type isServerReflectionRequest_MessageRequest interface {
	isServerReflectionRequest_MessageRequest()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ServerReflectionRequest_FileByFilename struct {
	FileByFilename string `protobuf:"bytes,3,opt,name=file_by_filename,json=fileByFilename,proto3,oneof"`
}
type ServerReflectionRequest_FileContainingSymbol struct {
	FileContainingSymbol string `protobuf:"bytes,4,opt,name=file_containing_symbol,json=fileContainingSymbol,proto3,oneof"`
}
type ServerReflectionRequest_FileContainingExtension struct {
	FileContainingExtension *ExtensionRequest `protobuf:"bytes,5,opt,name=file_containing_extension,json=fileContainingExtension,oneof"`
}
type ServerReflectionRequest_AllExtensionNumbersOfType struct {
	AllExtensionNumbersOfType string `protobuf:"bytes,6,opt,name=all_extension_numbers_of_type,json=allExtensionNumbersOfType,proto3,oneof"`
}
type ServerReflectionRequest_ListServices struct {
	ListServices string `protobuf:"bytes,7,opt,name=list_services,json=listServices,proto3,oneof"`
}

func (*ServerReflectionRequest_FileByFilename) isServerReflectionRequest_MessageRequest()          {}
func (*ServerReflectionRequest_FileContainingSymbol) isServerReflectionRequest_MessageRequest()    {}
func (*ServerReflectionRequest_FileContainingExtension) isServerReflectionRequest_MessageRequest() {}
func (*ServerReflectionRequest_AllExtensionNumbersOfType) isServerReflectionRequest_MessageRequest() {
}
func (*ServerReflectionRequest_ListServices) isServerReflectionRequest_MessageRequest() {}

func (m *ServerReflectionRequest) GetMessageRequest() isServerReflectionRequest_MessageRequest {
	if m != nil {
		return m.MessageRequest
	}
	return nil
}

func (m *ServerReflectionRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ServerReflectionRequest) GetFileByFilename() string {
	if x, ok := m.GetMessageRequest().(*ServerReflectionRequest_FileByFilename); ok {
		return x.FileByFilename
	}
	return ""
}

func (m *ServerReflectionRequest) GetFileContainingSymbol() string {
	if x, ok := m.GetMessageRequest().(*ServerReflectionRequest_FileContainingSymbol); ok {
		return x.FileContainingSymbol
	}
	return ""
}

func (m *ServerReflectionRequest) GetFileContainingExtension() *ExtensionRequest {
	if x, ok := m.GetMessageRequest().(*ServerReflectionRequest_FileContainingExtension); ok {
		return x.FileContainingExtension
	}
	return nil
}

func (m *ServerReflectionRequest) GetAllExtensionNumbersOfType() string {
	if x, ok := m.GetMessageRequest().(*ServerReflectionRequest_AllExtensionNumbersOfType); ok {
		return x.AllExtensionNumbersOfType
	}
	return ""
}

func (m *ServerReflectionRequest) GetListServices() string {
	if x, ok := m.GetMessageRequest().(*ServerReflectionRequest_ListServices); ok {
		return x.ListServices
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ServerReflectionRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ServerReflectionRequest_OneofMarshaler, _ServerReflectionRequest_OneofUnmarshaler, _ServerReflectionRequest_OneofSizer, []interface{}{
		(*ServerReflectionRequest_FileByFilename)(nil),
		(*ServerReflectionRequest_FileContainingSymbol)(nil),
		(*ServerReflectionRequest_FileContainingExtension)(nil),
		(*ServerReflectionRequest_AllExtensionNumbersOfType)(nil),
		(*ServerReflectionRequest_ListServices)(nil),
	}
}

func _ServerReflectionRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ServerReflectionRequest)
	// message_request
	switch x := m.MessageRequest.(type) {
	case *ServerReflectionRequest_FileByFilename:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.FileByFilename)
	case *ServerReflectionRequest_FileContainingSymbol:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.FileContainingSymbol)
	case *ServerReflectionRequest_FileContainingExtension:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FileContainingExtension); err != nil {
			return err
		}
	case *ServerReflectionRequest_AllExtensionNumbersOfType:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.AllExtensionNumbersOfType)
	case *ServerReflectionRequest_ListServices:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ListServices)
	case nil:
	default:
		return fmt.Errorf("ServerReflectionRequest.MessageRequest has unexpected type %T", x)
	}
	return nil
}

func _ServerReflectionRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ServerReflectionRequest)
	switch tag {
	case 3: // message_request.file_by_filename
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MessageRequest = &ServerReflectionRequest_FileByFilename{x}
		return true, err
	case 4: // message_request.file_containing_symbol
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MessageRequest = &ServerReflectionRequest_FileContainingSymbol{x}
		return true, err
	case 5: // message_request.file_containing_extension
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExtensionRequest)
		err := b.DecodeMessage(msg)
		m.MessageRequest = &ServerReflectionRequest_FileContainingExtension{msg}
		return true, err
	case 6: // message_request.all_extension_numbers_of_type
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MessageRequest = &ServerReflectionRequest_AllExtensionNumbersOfType{x}
		return true, err
	case 7: // message_request.list_services
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MessageRequest = &ServerReflectionRequest_ListServices{x}
		return true, err
	default:
		return false, nil
	}
}

func _ServerReflectionRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ServerReflectionRequest)
	// message_request
	switch x := m.MessageRequest.(type) {
	case *ServerReflectionRequest_FileByFilename:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.FileByFilename)))
		n += len(x.FileByFilename)
	case *ServerReflectionRequest_FileContainingSymbol:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.FileContainingSymbol)))
		n += len(x.FileContainingSymbol)
	case *ServerReflectionRequest_FileContainingExtension:
		s := proto.Size(x.FileContainingExtension)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerReflectionRequest_AllExtensionNumbersOfType:
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AllExtensionNumbersOfType)))
		n += len(x.AllExtensionNumbersOfType)
	case *ServerReflectionRequest_ListServices:
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ListServices)))
		n += len(x.ListServices)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The type name and extension number sent by the client when requesting
// file_containing_extension.
type ExtensionRequest struct {
	// Fully-qualified type name. The format should be <package>.<type>
	ContainingType  string `protobuf:"bytes,1,opt,name=containing_type,json=containingType,proto3" json:"containing_type,omitempty"`
	ExtensionNumber int32  `protobuf:"varint,2,opt,name=extension_number,json=extensionNumber,proto3" json:"extension_number,omitempty"`
}

func (m *ExtensionRequest) Reset()                    { *m = ExtensionRequest{} }
func (*ExtensionRequest) ProtoMessage()               {}
func (*ExtensionRequest) Descriptor() ([]byte, []int) { return fileDescriptorReflection, []int{1} }

func (m *ExtensionRequest) GetContainingType() string {
	if m != nil {
		return m.ContainingType
	}
	return ""
}

func (m *ExtensionRequest) GetExtensionNumber() int32 {
	if m != nil {
		return m.ExtensionNumber
	}
	return 0
}

// The message sent by the server to answer ServerReflectionInfo method.
type ServerReflectionResponse struct {
	ValidHost       string                   `protobuf:"bytes,1,opt,name=valid_host,json=validHost,proto3" json:"valid_host,omitempty"`
	OriginalRequest *ServerReflectionRequest `protobuf:"bytes,2,opt,name=original_request,json=originalRequest" json:"original_request,omitempty"`
	// The server sets one of the following fields according to the
	// message_request in the request.
	//
	// Types that are valid to be assigned to MessageResponse:
	//	*ServerReflectionResponse_FileDescriptorResponse
	//	*ServerReflectionResponse_AllExtensionNumbersResponse
	//	*ServerReflectionResponse_ListServicesResponse
	//	*ServerReflectionResponse_ErrorResponse
	MessageResponse isServerReflectionResponse_MessageResponse `protobuf_oneof:"message_response"`
}

func (m *ServerReflectionResponse) Reset()      { *m = ServerReflectionResponse{} }
func (*ServerReflectionResponse) ProtoMessage() {}
func (*ServerReflectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorReflection, []int{2}
}

type isServerReflectionResponse_MessageResponse interface {
	isServerReflectionResponse_MessageResponse()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ServerReflectionResponse_FileDescriptorResponse struct {
	FileDescriptorResponse *FileDescriptorResponse `protobuf:"bytes,4,opt,name=file_descriptor_response,json=fileDescriptorResponse,oneof"`
}
type ServerReflectionResponse_AllExtensionNumbersResponse struct {
	AllExtensionNumbersResponse *ExtensionNumberResponse `protobuf:"bytes,5,opt,name=all_extension_numbers_response,json=allExtensionNumbersResponse,oneof"`
}
type ServerReflectionResponse_ListServicesResponse struct {
	ListServicesResponse *ListServiceResponse `protobuf:"bytes,6,opt,name=list_services_response,json=listServicesResponse,oneof"`
}
type ServerReflectionResponse_ErrorResponse struct {
	ErrorResponse *ErrorResponse `protobuf:"bytes,7,opt,name=error_response,json=errorResponse,oneof"`
}

func (*ServerReflectionResponse_FileDescriptorResponse) isServerReflectionResponse_MessageResponse() {
}
func (*ServerReflectionResponse_AllExtensionNumbersResponse) isServerReflectionResponse_MessageResponse() {
}
func (*ServerReflectionResponse_ListServicesResponse) isServerReflectionResponse_MessageResponse() {}
func (*ServerReflectionResponse_ErrorResponse) isServerReflectionResponse_MessageResponse()        {}

func (m *ServerReflectionResponse) GetMessageResponse() isServerReflectionResponse_MessageResponse {
	if m != nil {
		return m.MessageResponse
	}
	return nil
}

func (m *ServerReflectionResponse) GetValidHost() string {
	if m != nil {
		return m.ValidHost
	}
	return ""
}

func (m *ServerReflectionResponse) GetOriginalRequest() *ServerReflectionRequest {
	if m != nil {
		return m.OriginalRequest
	}
	return nil
}

func (m *ServerReflectionResponse) GetFileDescriptorResponse() *FileDescriptorResponse {
	if x, ok := m.GetMessageResponse().(*ServerReflectionResponse_FileDescriptorResponse); ok {
		return x.FileDescriptorResponse
	}
	return nil
}

func (m *ServerReflectionResponse) GetAllExtensionNumbersResponse() *ExtensionNumberResponse {
	if x, ok := m.GetMessageResponse().(*ServerReflectionResponse_AllExtensionNumbersResponse); ok {
		return x.AllExtensionNumbersResponse
	}
	return nil
}

func (m *ServerReflectionResponse) GetListServicesResponse() *ListServiceResponse {
	if x, ok := m.GetMessageResponse().(*ServerReflectionResponse_ListServicesResponse); ok {
		return x.ListServicesResponse
	}
	return nil
}

func (m *ServerReflectionResponse) GetErrorResponse() *ErrorResponse {
	if x, ok := m.GetMessageResponse().(*ServerReflectionResponse_ErrorResponse); ok {
		return x.ErrorResponse
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ServerReflectionResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ServerReflectionResponse_OneofMarshaler, _ServerReflectionResponse_OneofUnmarshaler, _ServerReflectionResponse_OneofSizer, []interface{}{
		(*ServerReflectionResponse_FileDescriptorResponse)(nil),
		(*ServerReflectionResponse_AllExtensionNumbersResponse)(nil),
		(*ServerReflectionResponse_ListServicesResponse)(nil),
		(*ServerReflectionResponse_ErrorResponse)(nil),
	}
}

func _ServerReflectionResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ServerReflectionResponse)
	// message_response
	switch x := m.MessageResponse.(type) {
	case *ServerReflectionResponse_FileDescriptorResponse:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FileDescriptorResponse); err != nil {
			return err
		}
	case *ServerReflectionResponse_AllExtensionNumbersResponse:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllExtensionNumbersResponse); err != nil {
			return err
		}
	case *ServerReflectionResponse_ListServicesResponse:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListServicesResponse); err != nil {
			return err
		}
	case *ServerReflectionResponse_ErrorResponse:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ErrorResponse); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ServerReflectionResponse.MessageResponse has unexpected type %T", x)
	}
	return nil
}

func _ServerReflectionResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ServerReflectionResponse)
	switch tag {
	case 4: // message_response.file_descriptor_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileDescriptorResponse)
		err := b.DecodeMessage(msg)
		m.MessageResponse = &ServerReflectionResponse_FileDescriptorResponse{msg}
		return true, err
	case 5: // message_response.all_extension_numbers_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExtensionNumberResponse)
		err := b.DecodeMessage(msg)
		m.MessageResponse = &ServerReflectionResponse_AllExtensionNumbersResponse{msg}
		return true, err
	case 6: // message_response.list_services_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListServiceResponse)
		err := b.DecodeMessage(msg)
		m.MessageResponse = &ServerReflectionResponse_ListServicesResponse{msg}
		return true, err
	case 7: // message_response.error_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ErrorResponse)
		err := b.DecodeMessage(msg)
		m.MessageResponse = &ServerReflectionResponse_ErrorResponse{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ServerReflectionResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ServerReflectionResponse)
	// message_response
	switch x := m.MessageResponse.(type) {
	case *ServerReflectionResponse_FileDescriptorResponse:
		s := proto.Size(x.FileDescriptorResponse)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerReflectionResponse_AllExtensionNumbersResponse:
		s := proto.Size(x.AllExtensionNumbersResponse)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerReflectionResponse_ListServicesResponse:
		s := proto.Size(x.ListServicesResponse)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerReflectionResponse_ErrorResponse:
		s := proto.Size(x.ErrorResponse)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Serialized FileDescriptorProto messages sent by the server answering
// a file_by_filename, file_containing_symbol, or file_containing_extension
// request.
type FileDescriptorResponse struct {
	// Serialized FileDescriptorProto messages. We avoid taking a dependency on
	// descriptor.proto, which uses proto2 only features, by making them opaque
	// bytes instead.
	FileDescriptorProto [][]byte `protobuf:"bytes,1,rep,name=file_descriptor_proto,json=fileDescriptorProto" json:"file_descriptor_proto,omitempty"`
}

func (m *FileDescriptorResponse) Reset()      { *m = FileDescriptorResponse{} }
func (*FileDescriptorResponse) ProtoMessage() {}
func (*FileDescriptorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorReflection, []int{3}
}

func (m *FileDescriptorResponse) GetFileDescriptorProto() [][]byte {
	if m != nil {
		return m.FileDescriptorProto
	}
	return nil
}

// A list of extension numbers sent by the server answering
// all_extension_numbers_of_type request.
type ExtensionNumberResponse struct {
	// Full name of the base type, including the package name. The format
	// is <package>.<type>
	BaseTypeName    string  `protobuf:"bytes,1,opt,name=base_type_name,json=baseTypeName,proto3" json:"base_type_name,omitempty"`
	ExtensionNumber []int32 `protobuf:"varint,2,rep,packed,name=extension_number,json=extensionNumber" json:"extension_number,omitempty"`
}

func (m *ExtensionNumberResponse) Reset()      { *m = ExtensionNumberResponse{} }
func (*ExtensionNumberResponse) ProtoMessage() {}
func (*ExtensionNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorReflection, []int{4}
}

func (m *ExtensionNumberResponse) GetBaseTypeName() string {
	if m != nil {
		return m.BaseTypeName
	}
	return ""
}

func (m *ExtensionNumberResponse) GetExtensionNumber() []int32 {
	if m != nil {
		return m.ExtensionNumber
	}
	return nil
}

// A list of ServiceResponse sent by the server answering list_services request.
type ListServiceResponse struct {
	// The information of each service may be expanded in the future, so we use
	// ServiceResponse message to encapsulate it.
	Service []*ServiceResponse `protobuf:"bytes,1,rep,name=service" json:"service,omitempty"`
}

func (m *ListServiceResponse) Reset()                    { *m = ListServiceResponse{} }
func (*ListServiceResponse) ProtoMessage()               {}
func (*ListServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptorReflection, []int{5} }

func (m *ListServiceResponse) GetService() []*ServiceResponse {
	if m != nil {
		return m.Service
	}
	return nil
}

// The information of a single service used by ListServiceResponse to answer
// list_services request.
type ServiceResponse struct {
	// Full name of a registered service, including its package name. The format
	// is <package>.<service>
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ServiceResponse) Reset()                    { *m = ServiceResponse{} }
func (*ServiceResponse) ProtoMessage()               {}
func (*ServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptorReflection, []int{6} }

func (m *ServiceResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The error code and error message sent by the server when an error occurs.
type ErrorResponse struct {
	// This field uses the error codes defined in grpc::StatusCode.
	ErrorCode    int32  `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (m *ErrorResponse) Reset()                    { *m = ErrorResponse{} }
func (*ErrorResponse) ProtoMessage()               {}
func (*ErrorResponse) Descriptor() ([]byte, []int) { return fileDescriptorReflection, []int{7} }

func (m *ErrorResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ErrorResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*ServerReflectionRequest)(nil), "grpc.reflection.v1alpha.ServerReflectionRequest")
	proto.RegisterType((*ExtensionRequest)(nil), "grpc.reflection.v1alpha.ExtensionRequest")
	proto.RegisterType((*ServerReflectionResponse)(nil), "grpc.reflection.v1alpha.ServerReflectionResponse")
	proto.RegisterType((*FileDescriptorResponse)(nil), "grpc.reflection.v1alpha.FileDescriptorResponse")
	proto.RegisterType((*ExtensionNumberResponse)(nil), "grpc.reflection.v1alpha.ExtensionNumberResponse")
	proto.RegisterType((*ListServiceResponse)(nil), "grpc.reflection.v1alpha.ListServiceResponse")
	proto.RegisterType((*ServiceResponse)(nil), "grpc.reflection.v1alpha.ServiceResponse")
	proto.RegisterType((*ErrorResponse)(nil), "grpc.reflection.v1alpha.ErrorResponse")
}
func (this *ServerReflectionRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServerReflectionRequest)
	if !ok {
		that2, ok := that.(ServerReflectionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if that1.MessageRequest == nil {
		if this.MessageRequest != nil {
			return false
		}
	} else if this.MessageRequest == nil {
		return false
	} else if !this.MessageRequest.Equal(that1.MessageRequest) {
		return false
	}
	return true
}
func (this *ServerReflectionRequest_FileByFilename) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServerReflectionRequest_FileByFilename)
	if !ok {
		that2, ok := that.(ServerReflectionRequest_FileByFilename)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FileByFilename != that1.FileByFilename {
		return false
	}
	return true
}
func (this *ServerReflectionRequest_FileContainingSymbol) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServerReflectionRequest_FileContainingSymbol)
	if !ok {
		that2, ok := that.(ServerReflectionRequest_FileContainingSymbol)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FileContainingSymbol != that1.FileContainingSymbol {
		return false
	}
	return true
}
func (this *ServerReflectionRequest_FileContainingExtension) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServerReflectionRequest_FileContainingExtension)
	if !ok {
		that2, ok := that.(ServerReflectionRequest_FileContainingExtension)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.FileContainingExtension.Equal(that1.FileContainingExtension) {
		return false
	}
	return true
}
func (this *ServerReflectionRequest_AllExtensionNumbersOfType) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServerReflectionRequest_AllExtensionNumbersOfType)
	if !ok {
		that2, ok := that.(ServerReflectionRequest_AllExtensionNumbersOfType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AllExtensionNumbersOfType != that1.AllExtensionNumbersOfType {
		return false
	}
	return true
}
func (this *ServerReflectionRequest_ListServices) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServerReflectionRequest_ListServices)
	if !ok {
		that2, ok := that.(ServerReflectionRequest_ListServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ListServices != that1.ListServices {
		return false
	}
	return true
}
func (this *ExtensionRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExtensionRequest)
	if !ok {
		that2, ok := that.(ExtensionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ContainingType != that1.ContainingType {
		return false
	}
	if this.ExtensionNumber != that1.ExtensionNumber {
		return false
	}
	return true
}
func (this *ServerReflectionResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServerReflectionResponse)
	if !ok {
		that2, ok := that.(ServerReflectionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ValidHost != that1.ValidHost {
		return false
	}
	if !this.OriginalRequest.Equal(that1.OriginalRequest) {
		return false
	}
	if that1.MessageResponse == nil {
		if this.MessageResponse != nil {
			return false
		}
	} else if this.MessageResponse == nil {
		return false
	} else if !this.MessageResponse.Equal(that1.MessageResponse) {
		return false
	}
	return true
}
func (this *ServerReflectionResponse_FileDescriptorResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServerReflectionResponse_FileDescriptorResponse)
	if !ok {
		that2, ok := that.(ServerReflectionResponse_FileDescriptorResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.FileDescriptorResponse.Equal(that1.FileDescriptorResponse) {
		return false
	}
	return true
}
func (this *ServerReflectionResponse_AllExtensionNumbersResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServerReflectionResponse_AllExtensionNumbersResponse)
	if !ok {
		that2, ok := that.(ServerReflectionResponse_AllExtensionNumbersResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.AllExtensionNumbersResponse.Equal(that1.AllExtensionNumbersResponse) {
		return false
	}
	return true
}
func (this *ServerReflectionResponse_ListServicesResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServerReflectionResponse_ListServicesResponse)
	if !ok {
		that2, ok := that.(ServerReflectionResponse_ListServicesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ListServicesResponse.Equal(that1.ListServicesResponse) {
		return false
	}
	return true
}
func (this *ServerReflectionResponse_ErrorResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServerReflectionResponse_ErrorResponse)
	if !ok {
		that2, ok := that.(ServerReflectionResponse_ErrorResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ErrorResponse.Equal(that1.ErrorResponse) {
		return false
	}
	return true
}
func (this *FileDescriptorResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FileDescriptorResponse)
	if !ok {
		that2, ok := that.(FileDescriptorResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.FileDescriptorProto) != len(that1.FileDescriptorProto) {
		return false
	}
	for i := range this.FileDescriptorProto {
		if !bytes.Equal(this.FileDescriptorProto[i], that1.FileDescriptorProto[i]) {
			return false
		}
	}
	return true
}
func (this *ExtensionNumberResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExtensionNumberResponse)
	if !ok {
		that2, ok := that.(ExtensionNumberResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.BaseTypeName != that1.BaseTypeName {
		return false
	}
	if len(this.ExtensionNumber) != len(that1.ExtensionNumber) {
		return false
	}
	for i := range this.ExtensionNumber {
		if this.ExtensionNumber[i] != that1.ExtensionNumber[i] {
			return false
		}
	}
	return true
}
func (this *ListServiceResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListServiceResponse)
	if !ok {
		that2, ok := that.(ListServiceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Service) != len(that1.Service) {
		return false
	}
	for i := range this.Service {
		if !this.Service[i].Equal(that1.Service[i]) {
			return false
		}
	}
	return true
}
func (this *ServiceResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServiceResponse)
	if !ok {
		that2, ok := that.(ServiceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ErrorResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ErrorResponse)
	if !ok {
		that2, ok := that.(ErrorResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ErrorCode != that1.ErrorCode {
		return false
	}
	if this.ErrorMessage != that1.ErrorMessage {
		return false
	}
	return true
}
func (this *ServerReflectionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&grpcreflectionv1alpha.ServerReflectionRequest{")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	if this.MessageRequest != nil {
		s = append(s, "MessageRequest: "+fmt.Sprintf("%#v", this.MessageRequest)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerReflectionRequest_FileByFilename) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&grpcreflectionv1alpha.ServerReflectionRequest_FileByFilename{` +
		`FileByFilename:` + fmt.Sprintf("%#v", this.FileByFilename) + `}`}, ", ")
	return s
}
func (this *ServerReflectionRequest_FileContainingSymbol) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&grpcreflectionv1alpha.ServerReflectionRequest_FileContainingSymbol{` +
		`FileContainingSymbol:` + fmt.Sprintf("%#v", this.FileContainingSymbol) + `}`}, ", ")
	return s
}
func (this *ServerReflectionRequest_FileContainingExtension) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&grpcreflectionv1alpha.ServerReflectionRequest_FileContainingExtension{` +
		`FileContainingExtension:` + fmt.Sprintf("%#v", this.FileContainingExtension) + `}`}, ", ")
	return s
}
func (this *ServerReflectionRequest_AllExtensionNumbersOfType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&grpcreflectionv1alpha.ServerReflectionRequest_AllExtensionNumbersOfType{` +
		`AllExtensionNumbersOfType:` + fmt.Sprintf("%#v", this.AllExtensionNumbersOfType) + `}`}, ", ")
	return s
}
func (this *ServerReflectionRequest_ListServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&grpcreflectionv1alpha.ServerReflectionRequest_ListServices{` +
		`ListServices:` + fmt.Sprintf("%#v", this.ListServices) + `}`}, ", ")
	return s
}
func (this *ExtensionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&grpcreflectionv1alpha.ExtensionRequest{")
	s = append(s, "ContainingType: "+fmt.Sprintf("%#v", this.ContainingType)+",\n")
	s = append(s, "ExtensionNumber: "+fmt.Sprintf("%#v", this.ExtensionNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerReflectionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&grpcreflectionv1alpha.ServerReflectionResponse{")
	s = append(s, "ValidHost: "+fmt.Sprintf("%#v", this.ValidHost)+",\n")
	if this.OriginalRequest != nil {
		s = append(s, "OriginalRequest: "+fmt.Sprintf("%#v", this.OriginalRequest)+",\n")
	}
	if this.MessageResponse != nil {
		s = append(s, "MessageResponse: "+fmt.Sprintf("%#v", this.MessageResponse)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerReflectionResponse_FileDescriptorResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&grpcreflectionv1alpha.ServerReflectionResponse_FileDescriptorResponse{` +
		`FileDescriptorResponse:` + fmt.Sprintf("%#v", this.FileDescriptorResponse) + `}`}, ", ")
	return s
}
func (this *ServerReflectionResponse_AllExtensionNumbersResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&grpcreflectionv1alpha.ServerReflectionResponse_AllExtensionNumbersResponse{` +
		`AllExtensionNumbersResponse:` + fmt.Sprintf("%#v", this.AllExtensionNumbersResponse) + `}`}, ", ")
	return s
}
func (this *ServerReflectionResponse_ListServicesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&grpcreflectionv1alpha.ServerReflectionResponse_ListServicesResponse{` +
		`ListServicesResponse:` + fmt.Sprintf("%#v", this.ListServicesResponse) + `}`}, ", ")
	return s
}
func (this *ServerReflectionResponse_ErrorResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&grpcreflectionv1alpha.ServerReflectionResponse_ErrorResponse{` +
		`ErrorResponse:` + fmt.Sprintf("%#v", this.ErrorResponse) + `}`}, ", ")
	return s
}
func (this *FileDescriptorResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpcreflectionv1alpha.FileDescriptorResponse{")
	s = append(s, "FileDescriptorProto: "+fmt.Sprintf("%#v", this.FileDescriptorProto)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExtensionNumberResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&grpcreflectionv1alpha.ExtensionNumberResponse{")
	s = append(s, "BaseTypeName: "+fmt.Sprintf("%#v", this.BaseTypeName)+",\n")
	s = append(s, "ExtensionNumber: "+fmt.Sprintf("%#v", this.ExtensionNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListServiceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpcreflectionv1alpha.ListServiceResponse{")
	if this.Service != nil {
		s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpcreflectionv1alpha.ServiceResponse{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ErrorResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&grpcreflectionv1alpha.ErrorResponse{")
	s = append(s, "ErrorCode: "+fmt.Sprintf("%#v", this.ErrorCode)+",\n")
	s = append(s, "ErrorMessage: "+fmt.Sprintf("%#v", this.ErrorMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringReflection(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ServerReflectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerReflectionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Host) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReflection(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if m.MessageRequest != nil {
		nn1, err := m.MessageRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *ServerReflectionRequest_FileByFilename) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1a
	i++
	i = encodeVarintReflection(dAtA, i, uint64(len(m.FileByFilename)))
	i += copy(dAtA[i:], m.FileByFilename)
	return i, nil
}
func (m *ServerReflectionRequest_FileContainingSymbol) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x22
	i++
	i = encodeVarintReflection(dAtA, i, uint64(len(m.FileContainingSymbol)))
	i += copy(dAtA[i:], m.FileContainingSymbol)
	return i, nil
}
func (m *ServerReflectionRequest_FileContainingExtension) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FileContainingExtension != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintReflection(dAtA, i, uint64(m.FileContainingExtension.Size()))
		n2, err := m.FileContainingExtension.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *ServerReflectionRequest_AllExtensionNumbersOfType) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x32
	i++
	i = encodeVarintReflection(dAtA, i, uint64(len(m.AllExtensionNumbersOfType)))
	i += copy(dAtA[i:], m.AllExtensionNumbersOfType)
	return i, nil
}
func (m *ServerReflectionRequest_ListServices) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x3a
	i++
	i = encodeVarintReflection(dAtA, i, uint64(len(m.ListServices)))
	i += copy(dAtA[i:], m.ListServices)
	return i, nil
}
func (m *ExtensionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtensionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContainingType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReflection(dAtA, i, uint64(len(m.ContainingType)))
		i += copy(dAtA[i:], m.ContainingType)
	}
	if m.ExtensionNumber != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintReflection(dAtA, i, uint64(m.ExtensionNumber))
	}
	return i, nil
}

func (m *ServerReflectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerReflectionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ValidHost) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReflection(dAtA, i, uint64(len(m.ValidHost)))
		i += copy(dAtA[i:], m.ValidHost)
	}
	if m.OriginalRequest != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintReflection(dAtA, i, uint64(m.OriginalRequest.Size()))
		n3, err := m.OriginalRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.MessageResponse != nil {
		nn4, err := m.MessageResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	return i, nil
}

func (m *ServerReflectionResponse_FileDescriptorResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FileDescriptorResponse != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintReflection(dAtA, i, uint64(m.FileDescriptorResponse.Size()))
		n5, err := m.FileDescriptorResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *ServerReflectionResponse_AllExtensionNumbersResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AllExtensionNumbersResponse != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintReflection(dAtA, i, uint64(m.AllExtensionNumbersResponse.Size()))
		n6, err := m.AllExtensionNumbersResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *ServerReflectionResponse_ListServicesResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ListServicesResponse != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintReflection(dAtA, i, uint64(m.ListServicesResponse.Size()))
		n7, err := m.ListServicesResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *ServerReflectionResponse_ErrorResponse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ErrorResponse != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintReflection(dAtA, i, uint64(m.ErrorResponse.Size()))
		n8, err := m.ErrorResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *FileDescriptorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileDescriptorResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FileDescriptorProto) > 0 {
		for _, b := range m.FileDescriptorProto {
			dAtA[i] = 0xa
			i++
			i = encodeVarintReflection(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *ExtensionNumberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtensionNumberResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BaseTypeName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReflection(dAtA, i, uint64(len(m.BaseTypeName)))
		i += copy(dAtA[i:], m.BaseTypeName)
	}
	if len(m.ExtensionNumber) > 0 {
		dAtA10 := make([]byte, len(m.ExtensionNumber)*10)
		var j9 int
		for _, num1 := range m.ExtensionNumber {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintReflection(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	return i, nil
}

func (m *ListServiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServiceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Service) > 0 {
		for _, msg := range m.Service {
			dAtA[i] = 0xa
			i++
			i = encodeVarintReflection(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ServiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReflection(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *ErrorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReflection(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.ErrorMessage) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintReflection(dAtA, i, uint64(len(m.ErrorMessage)))
		i += copy(dAtA[i:], m.ErrorMessage)
	}
	return i, nil
}

func encodeVarintReflection(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ServerReflectionRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovReflection(uint64(l))
	}
	if m.MessageRequest != nil {
		n += m.MessageRequest.Size()
	}
	return n
}

func (m *ServerReflectionRequest_FileByFilename) Size() (n int) {
	var l int
	_ = l
	l = len(m.FileByFilename)
	n += 1 + l + sovReflection(uint64(l))
	return n
}
func (m *ServerReflectionRequest_FileContainingSymbol) Size() (n int) {
	var l int
	_ = l
	l = len(m.FileContainingSymbol)
	n += 1 + l + sovReflection(uint64(l))
	return n
}
func (m *ServerReflectionRequest_FileContainingExtension) Size() (n int) {
	var l int
	_ = l
	if m.FileContainingExtension != nil {
		l = m.FileContainingExtension.Size()
		n += 1 + l + sovReflection(uint64(l))
	}
	return n
}
func (m *ServerReflectionRequest_AllExtensionNumbersOfType) Size() (n int) {
	var l int
	_ = l
	l = len(m.AllExtensionNumbersOfType)
	n += 1 + l + sovReflection(uint64(l))
	return n
}
func (m *ServerReflectionRequest_ListServices) Size() (n int) {
	var l int
	_ = l
	l = len(m.ListServices)
	n += 1 + l + sovReflection(uint64(l))
	return n
}
func (m *ExtensionRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ContainingType)
	if l > 0 {
		n += 1 + l + sovReflection(uint64(l))
	}
	if m.ExtensionNumber != 0 {
		n += 1 + sovReflection(uint64(m.ExtensionNumber))
	}
	return n
}

func (m *ServerReflectionResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.ValidHost)
	if l > 0 {
		n += 1 + l + sovReflection(uint64(l))
	}
	if m.OriginalRequest != nil {
		l = m.OriginalRequest.Size()
		n += 1 + l + sovReflection(uint64(l))
	}
	if m.MessageResponse != nil {
		n += m.MessageResponse.Size()
	}
	return n
}

func (m *ServerReflectionResponse_FileDescriptorResponse) Size() (n int) {
	var l int
	_ = l
	if m.FileDescriptorResponse != nil {
		l = m.FileDescriptorResponse.Size()
		n += 1 + l + sovReflection(uint64(l))
	}
	return n
}
func (m *ServerReflectionResponse_AllExtensionNumbersResponse) Size() (n int) {
	var l int
	_ = l
	if m.AllExtensionNumbersResponse != nil {
		l = m.AllExtensionNumbersResponse.Size()
		n += 1 + l + sovReflection(uint64(l))
	}
	return n
}
func (m *ServerReflectionResponse_ListServicesResponse) Size() (n int) {
	var l int
	_ = l
	if m.ListServicesResponse != nil {
		l = m.ListServicesResponse.Size()
		n += 1 + l + sovReflection(uint64(l))
	}
	return n
}
func (m *ServerReflectionResponse_ErrorResponse) Size() (n int) {
	var l int
	_ = l
	if m.ErrorResponse != nil {
		l = m.ErrorResponse.Size()
		n += 1 + l + sovReflection(uint64(l))
	}
	return n
}
func (m *FileDescriptorResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.FileDescriptorProto) > 0 {
		for _, b := range m.FileDescriptorProto {
			l = len(b)
			n += 1 + l + sovReflection(uint64(l))
		}
	}
	return n
}

func (m *ExtensionNumberResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.BaseTypeName)
	if l > 0 {
		n += 1 + l + sovReflection(uint64(l))
	}
	if len(m.ExtensionNumber) > 0 {
		l = 0
		for _, e := range m.ExtensionNumber {
			l += sovReflection(uint64(e))
		}
		n += 1 + sovReflection(uint64(l)) + l
	}
	return n
}

func (m *ListServiceResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Service) > 0 {
		for _, e := range m.Service {
			l = e.Size()
			n += 1 + l + sovReflection(uint64(l))
		}
	}
	return n
}

func (m *ServiceResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovReflection(uint64(l))
	}
	return n
}

func (m *ErrorResponse) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovReflection(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovReflection(uint64(l))
	}
	return n
}

func sovReflection(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozReflection(x uint64) (n int) {
	return sovReflection(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ServerReflectionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionRequest{`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`MessageRequest:` + fmt.Sprintf("%v", this.MessageRequest) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerReflectionRequest_FileByFilename) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionRequest_FileByFilename{`,
		`FileByFilename:` + fmt.Sprintf("%v", this.FileByFilename) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerReflectionRequest_FileContainingSymbol) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionRequest_FileContainingSymbol{`,
		`FileContainingSymbol:` + fmt.Sprintf("%v", this.FileContainingSymbol) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerReflectionRequest_FileContainingExtension) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionRequest_FileContainingExtension{`,
		`FileContainingExtension:` + strings.Replace(fmt.Sprintf("%v", this.FileContainingExtension), "ExtensionRequest", "ExtensionRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerReflectionRequest_AllExtensionNumbersOfType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionRequest_AllExtensionNumbersOfType{`,
		`AllExtensionNumbersOfType:` + fmt.Sprintf("%v", this.AllExtensionNumbersOfType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerReflectionRequest_ListServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionRequest_ListServices{`,
		`ListServices:` + fmt.Sprintf("%v", this.ListServices) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExtensionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExtensionRequest{`,
		`ContainingType:` + fmt.Sprintf("%v", this.ContainingType) + `,`,
		`ExtensionNumber:` + fmt.Sprintf("%v", this.ExtensionNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerReflectionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionResponse{`,
		`ValidHost:` + fmt.Sprintf("%v", this.ValidHost) + `,`,
		`OriginalRequest:` + strings.Replace(fmt.Sprintf("%v", this.OriginalRequest), "ServerReflectionRequest", "ServerReflectionRequest", 1) + `,`,
		`MessageResponse:` + fmt.Sprintf("%v", this.MessageResponse) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerReflectionResponse_FileDescriptorResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionResponse_FileDescriptorResponse{`,
		`FileDescriptorResponse:` + strings.Replace(fmt.Sprintf("%v", this.FileDescriptorResponse), "FileDescriptorResponse", "FileDescriptorResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerReflectionResponse_AllExtensionNumbersResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionResponse_AllExtensionNumbersResponse{`,
		`AllExtensionNumbersResponse:` + strings.Replace(fmt.Sprintf("%v", this.AllExtensionNumbersResponse), "ExtensionNumberResponse", "ExtensionNumberResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerReflectionResponse_ListServicesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionResponse_ListServicesResponse{`,
		`ListServicesResponse:` + strings.Replace(fmt.Sprintf("%v", this.ListServicesResponse), "ListServiceResponse", "ListServiceResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerReflectionResponse_ErrorResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerReflectionResponse_ErrorResponse{`,
		`ErrorResponse:` + strings.Replace(fmt.Sprintf("%v", this.ErrorResponse), "ErrorResponse", "ErrorResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FileDescriptorResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FileDescriptorResponse{`,
		`FileDescriptorProto:` + fmt.Sprintf("%v", this.FileDescriptorProto) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExtensionNumberResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExtensionNumberResponse{`,
		`BaseTypeName:` + fmt.Sprintf("%v", this.BaseTypeName) + `,`,
		`ExtensionNumber:` + fmt.Sprintf("%v", this.ExtensionNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListServiceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListServiceResponse{`,
		`Service:` + strings.Replace(fmt.Sprintf("%v", this.Service), "ServiceResponse", "ServiceResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceResponse{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ErrorResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ErrorResponse{`,
		`ErrorCode:` + fmt.Sprintf("%v", this.ErrorCode) + `,`,
		`ErrorMessage:` + fmt.Sprintf("%v", this.ErrorMessage) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringReflection(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ServerReflectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReflection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerReflectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerReflectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileByFilename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageRequest = &ServerReflectionRequest_FileByFilename{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileContainingSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageRequest = &ServerReflectionRequest_FileContainingSymbol{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileContainingExtension", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExtensionRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageRequest = &ServerReflectionRequest_FileContainingExtension{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllExtensionNumbersOfType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageRequest = &ServerReflectionRequest_AllExtensionNumbersOfType{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListServices", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageRequest = &ServerReflectionRequest_ListServices{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReflection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReflection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtensionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReflection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtensionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtensionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainingType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainingType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionNumber", wireType)
			}
			m.ExtensionNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtensionNumber |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReflection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReflection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerReflectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReflection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerReflectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerReflectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginalRequest == nil {
				m.OriginalRequest = &ServerReflectionRequest{}
			}
			if err := m.OriginalRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileDescriptorResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FileDescriptorResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageResponse = &ServerReflectionResponse_FileDescriptorResponse{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllExtensionNumbersResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExtensionNumberResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageResponse = &ServerReflectionResponse_AllExtensionNumbersResponse{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListServicesResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListServiceResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageResponse = &ServerReflectionResponse_ListServicesResponse{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ErrorResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageResponse = &ServerReflectionResponse_ErrorResponse{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReflection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReflection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileDescriptorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReflection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileDescriptorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileDescriptorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileDescriptorProto", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileDescriptorProto = append(m.FileDescriptorProto, make([]byte, postIndex-iNdEx))
			copy(m.FileDescriptorProto[len(m.FileDescriptorProto)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReflection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReflection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtensionNumberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReflection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtensionNumberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtensionNumberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseTypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReflection
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExtensionNumber = append(m.ExtensionNumber, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReflection
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthReflection
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReflection
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExtensionNumber = append(m.ExtensionNumber, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionNumber", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReflection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReflection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReflection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListServiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListServiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = append(m.Service, &ServiceResponse{})
			if err := m.Service[len(m.Service)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReflection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReflection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReflection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReflection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReflection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReflection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReflection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReflection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReflection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReflection(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReflection
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReflection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthReflection
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowReflection
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipReflection(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthReflection = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReflection   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("grpcreflectionv1alpha/reflection.proto", fileDescriptorReflection) }

var fileDescriptorReflection = []byte{
	// 714 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xce, 0xb6, 0x49, 0xab, 0x4c, 0xd2, 0x24, 0xff, 0xb6, 0x7f, 0xe3, 0xfe, 0xbf, 0x6a, 0x45,
	0x81, 0x42, 0x8a, 0xaa, 0xb4, 0x0d, 0x12, 0x0f, 0x90, 0x02, 0x0a, 0x52, 0x69, 0x91, 0xc3, 0x05,
	0x71, 0x58, 0x39, 0xc9, 0x26, 0x35, 0x38, 0xde, 0xb0, 0xeb, 0x06, 0x72, 0x82, 0x47, 0x40, 0xe2,
	0x25, 0x78, 0x13, 0x38, 0xf6, 0xc8, 0x91, 0x9a, 0x0b, 0xc7, 0x1e, 0x39, 0xa2, 0x5d, 0x3b, 0x8e,
	0xe3, 0xc6, 0xa0, 0x9e, 0x12, 0x7d, 0x33, 0xb3, 0xdf, 0xcc, 0x7c, 0xdf, 0x18, 0x6a, 0x03, 0x3e,
	0xea, 0x12, 0x4e, 0xfb, 0x36, 0xed, 0xba, 0x16, 0x73, 0xc8, 0xf8, 0xd0, 0xb4, 0x47, 0x67, 0xe6,
	0xfe, 0x0c, 0xaa, 0x8f, 0x38, 0x73, 0x19, 0x2e, 0xcb, 0xcc, 0x7a, 0x04, 0x0e, 0x32, 0xab, 0xbf,
	0x96, 0xa0, 0xdc, 0xa6, 0x7c, 0x4c, 0xb9, 0x11, 0x06, 0x0d, 0xfa, 0xe6, 0x9c, 0x0a, 0x17, 0x63,
	0x48, 0x9f, 0x31, 0xe1, 0x6a, 0xa8, 0x82, 0x6a, 0x59, 0x43, 0xfd, 0xc7, 0xf7, 0xa0, 0xd4, 0xb7,
	0x6c, 0x4a, 0x3a, 0x13, 0x22, 0x7f, 0x1d, 0x73, 0x48, 0xb5, 0x65, 0x19, 0x6f, 0xa5, 0x8c, 0x82,
	0x44, 0x9a, 0x93, 0xc7, 0x01, 0x8e, 0x1f, 0xc0, 0xa6, 0xca, 0xed, 0x32, 0xc7, 0x35, 0x2d, 0xc7,
	0x72, 0x06, 0x44, 0x4c, 0x86, 0x1d, 0x66, 0x6b, 0xe9, 0xa0, 0x62, 0x43, 0xc6, 0x8f, 0xc2, 0x70,
	0x5b, 0x45, 0xf1, 0x00, 0xb6, 0xe2, 0x75, 0xf4, 0x9d, 0x4b, 0x1d, 0x61, 0x31, 0x47, 0xcb, 0x54,
	0x50, 0x2d, 0xd7, 0xd8, 0xad, 0x27, 0x0c, 0x54, 0x7f, 0x34, 0xcd, 0x0c, 0xa6, 0x68, 0xa5, 0x8c,
	0xf2, 0x3c, 0x4b, 0x98, 0x81, 0x9b, 0xb0, 0x6d, 0xda, 0xf6, 0xec, 0x71, 0xe2, 0x9c, 0x0f, 0x3b,
	0x94, 0x0b, 0xc2, 0xfa, 0xc4, 0x9d, 0x8c, 0xa8, 0xb6, 0x12, 0xf4, 0xb9, 0x65, 0xda, 0x76, 0x58,
	0x76, 0xe2, 0x27, 0x9d, 0xf6, 0x9f, 0x4f, 0x46, 0x14, 0xef, 0xc0, 0x9a, 0x6d, 0x09, 0x97, 0x08,
	0xca, 0xc7, 0x56, 0x97, 0x0a, 0x6d, 0x35, 0xa8, 0xc9, 0x4b, 0xb8, 0x1d, 0xa0, 0xcd, 0x7f, 0xa0,
	0x38, 0xa4, 0x42, 0x98, 0x03, 0x4a, 0xb8, 0xdf, 0x58, 0xb5, 0x0f, 0xa5, 0x78, 0xb3, 0xf8, 0x2e,
	0x14, 0x23, 0x53, 0xab, 0x1e, 0xfc, 0xed, 0x17, 0x66, 0xb0, 0xa2, 0xdd, 0x85, 0x52, 0xbc, 0x6d,
	0x6d, 0xa9, 0x82, 0x6a, 0x19, 0xa3, 0x48, 0xe7, 0x1b, 0xad, 0x7e, 0x49, 0x83, 0x76, 0x5d, 0x62,
	0x31, 0x62, 0x8e, 0xa0, 0x78, 0x1b, 0x60, 0x6c, 0xda, 0x56, 0x8f, 0x44, 0x94, 0xce, 0x2a, 0xa4,
	0x25, 0xe5, 0x7e, 0x09, 0x25, 0xc6, 0xad, 0x81, 0xe5, 0x98, 0xf6, 0xb4, 0x6f, 0x45, 0x93, 0x6b,
	0x1c, 0x24, 0x2a, 0x90, 0x60, 0x27, 0xa3, 0x38, 0x7d, 0x69, 0x3a, 0xec, 0x6b, 0xd0, 0x94, 0xce,
	0x3d, 0x2a, 0xba, 0xdc, 0x1a, 0xb9, 0x8c, 0x13, 0x1e, 0xf4, 0xa5, 0x1c, 0x92, 0x6b, 0xec, 0x27,
	0x92, 0x48, 0x93, 0x3d, 0x0c, 0xeb, 0xa6, 0xe3, 0xb4, 0x52, 0x86, 0xb2, 0xdc, 0xf5, 0x08, 0x7e,
	0x0b, 0xfa, 0x62, 0xad, 0x43, 0xca, 0xcc, 0x5f, 0xe6, 0x8a, 0x19, 0x20, 0xc2, 0xf9, 0xff, 0x02,
	0x7b, 0x84, 0xc4, 0x3d, 0xd8, 0x9c, 0x33, 0xc8, 0x8c, 0x70, 0x45, 0x11, 0xee, 0x25, 0x12, 0x1e,
	0xcf, 0x0c, 0x14, 0x21, 0xdb, 0x88, 0xfa, 0x2a, 0x64, 0x39, 0x85, 0x02, 0xe5, 0x3c, 0xba, 0xc1,
	0x55, 0xf5, 0xfa, 0x9d, 0xe4, 0x71, 0x64, 0x7a, 0xe4, 0xdd, 0x35, 0x1a, 0x05, 0x9a, 0x18, 0x4a,
	0x33, 0xc3, 0xfa, 0x58, 0xf5, 0x18, 0x36, 0x17, 0xef, 0x1d, 0x37, 0xe0, 0xdf, 0xb8, 0x94, 0xea,
	0xc3, 0xa3, 0xa1, 0xca, 0x72, 0x2d, 0x6f, 0xac, 0xcf, 0x8b, 0xf2, 0x4c, 0x86, 0xaa, 0xaf, 0xa0,
	0x9c, 0xb0, 0x52, 0x7c, 0x1b, 0x0a, 0x1d, 0x53, 0x50, 0x75, 0x00, 0x44, 0x7d, 0x63, 0x7c, 0x67,
	0xe6, 0x25, 0x2a, 0xfd, 0x7f, 0x22, 0xbf, 0x2f, 0x8b, 0x6f, 0x60, 0x79, 0xd1, 0x0d, 0xbc, 0x80,
	0xf5, 0x05, 0xdb, 0xc4, 0x4d, 0x58, 0x0d, 0x64, 0x51, 0x8d, 0xe6, 0x1a, 0xb5, 0x3f, 0xba, 0x3a,
	0x52, 0x6a, 0x4c, 0x0b, 0xab, 0x3b, 0x50, 0x8c, 0x3f, 0x8b, 0x21, 0x1d, 0x69, 0x5a, 0xfd, 0xaf,
	0xb6, 0x61, 0x6d, 0x6e, 0xe3, 0xf2, 0xf2, 0x7c, 0xc5, 0xba, 0xac, 0xe7, 0xa7, 0x66, 0x8c, 0xac,
	0x42, 0x8e, 0x58, 0x8f, 0xe2, 0x5b, 0xe0, 0x0b, 0x42, 0x02, 0x15, 0xd4, 0xd9, 0x65, 0x8d, 0xbc,
	0x02, 0x9f, 0xfa, 0x58, 0xe3, 0x13, 0x82, 0x52, 0xfc, 0xdc, 0xf0, 0x7b, 0xd8, 0x88, 0x63, 0x4f,
	0x9c, 0x3e, 0xc3, 0x37, 0xbe, 0xd8, 0xff, 0x0e, 0x6f, 0x50, 0xe1, 0x4f, 0x55, 0x43, 0x07, 0xa8,
	0xb9, 0x77, 0x71, 0xa9, 0xa7, 0xbe, 0x5d, 0xea, 0xa9, 0xab, 0x4b, 0x1d, 0x7d, 0xf0, 0x74, 0xf4,
	0xd9, 0xd3, 0xd1, 0x57, 0x4f, 0x47, 0x17, 0x9e, 0x8e, 0xbe, 0x7b, 0x3a, 0xfa, 0xe9, 0xe9, 0xa9,
	0x2b, 0x4f, 0x47, 0x1f, 0x7f, 0xe8, 0xa9, 0xce, 0x8a, 0x32, 0xca, 0xfd, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x6c, 0xd1, 0x0b, 0x1f, 0xcd, 0x06, 0x00, 0x00,
}
