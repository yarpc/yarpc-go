// Code generated by thriftrw v1.9.0. DO NOT EDIT.
// @generated

package sharder

import (
	"fmt"
	"go.uber.org/thriftrw/wire"
	"strings"
)

type ShardInfoRequest struct {
}

// ToWire translates a ShardInfoRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *ShardInfoRequest) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a ShardInfoRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ShardInfoRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v ShardInfoRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *ShardInfoRequest) FromWire(w wire.Value) error {

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}

	return nil
}

// String returns a readable string representation of a ShardInfoRequest
// struct.
func (v *ShardInfoRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [0]string
	i := 0

	return fmt.Sprintf("ShardInfoRequest{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this ShardInfoRequest match the
// provided ShardInfoRequest.
//
// This function performs a deep comparison.
func (v *ShardInfoRequest) Equals(rhs *ShardInfoRequest) bool {

	return true
}

type ShardInfoResponse struct {
	Identifier      *string  `json:"identifier,omitempty"`
	SupportedShards []string `json:"supportedShards,omitempty"`
}

type _List_String_ValueList []string

func (v _List_String_ValueList) ForEach(f func(wire.Value) error) error {
	for _, x := range v {
		w, err := wire.NewValueString(x), error(nil)
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_String_ValueList) Size() int {
	return len(v)
}

func (_List_String_ValueList) ValueType() wire.Type {
	return wire.TBinary
}

func (_List_String_ValueList) Close() {}

// ToWire translates a ShardInfoResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *ShardInfoResponse) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Identifier != nil {
		w, err = wire.NewValueString(*(v.Identifier)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.SupportedShards != nil {
		w, err = wire.NewValueList(_List_String_ValueList(v.SupportedShards)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _List_String_Read(l wire.ValueList) ([]string, error) {
	if l.ValueType() != wire.TBinary {
		return nil, nil
	}

	o := make([]string, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := x.GetString(), error(nil)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

// FromWire deserializes a ShardInfoResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ShardInfoResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v ShardInfoResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *ShardInfoResponse) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Identifier = &x
				if err != nil {
					return err
				}

			}
		case 2:
			if field.Value.Type() == wire.TList {
				v.SupportedShards, err = _List_String_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a ShardInfoResponse
// struct.
func (v *ShardInfoResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	if v.Identifier != nil {
		fields[i] = fmt.Sprintf("Identifier: %v", *(v.Identifier))
		i++
	}
	if v.SupportedShards != nil {
		fields[i] = fmt.Sprintf("SupportedShards: %v", v.SupportedShards)
		i++
	}

	return fmt.Sprintf("ShardInfoResponse{%v}", strings.Join(fields[:i], ", "))
}

func _String_EqualsPtr(lhs, rhs *string) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _List_String_Equals(lhs, rhs []string) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for i, lv := range lhs {
		rv := rhs[i]
		if !(lv == rv) {
			return false
		}
	}

	return true
}

// Equals returns true if all the fields of this ShardInfoResponse match the
// provided ShardInfoResponse.
//
// This function performs a deep comparison.
func (v *ShardInfoResponse) Equals(rhs *ShardInfoResponse) bool {
	if !_String_EqualsPtr(v.Identifier, rhs.Identifier) {
		return false
	}
	if !((v.SupportedShards == nil && rhs.SupportedShards == nil) || (v.SupportedShards != nil && rhs.SupportedShards != nil && _List_String_Equals(v.SupportedShards, rhs.SupportedShards))) {
		return false
	}

	return true
}

// GetIdentifier returns the value of Identifier if it is set or its
// zero value if it is unset.
func (v *ShardInfoResponse) GetIdentifier() (o string) {
	if v.Identifier != nil {
		return *v.Identifier
	}

	return
}
