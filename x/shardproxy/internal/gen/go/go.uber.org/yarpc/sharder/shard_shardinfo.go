// Code generated by thriftrw v1.9.0. DO NOT EDIT.
// @generated

package sharder

import (
	"errors"
	"fmt"
	"go.uber.org/thriftrw/wire"
	"strings"
)

// Shard_ShardInfo_Args represents the arguments for the Shard.shardInfo function.
//
// The arguments for shardInfo are sent and received over the wire as this struct.
type Shard_ShardInfo_Args struct {
	R *ShardInfoRequest `json:"r,omitempty"`
}

// ToWire translates a Shard_ShardInfo_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Shard_ShardInfo_Args) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.R != nil {
		w, err = v.R.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _ShardInfoRequest_Read(w wire.Value) (*ShardInfoRequest, error) {
	var v ShardInfoRequest
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a Shard_ShardInfo_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Shard_ShardInfo_Args struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Shard_ShardInfo_Args
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Shard_ShardInfo_Args) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.R, err = _ShardInfoRequest_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a Shard_ShardInfo_Args
// struct.
func (v *Shard_ShardInfo_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.R != nil {
		fields[i] = fmt.Sprintf("R: %v", v.R)
		i++
	}

	return fmt.Sprintf("Shard_ShardInfo_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Shard_ShardInfo_Args match the
// provided Shard_ShardInfo_Args.
//
// This function performs a deep comparison.
func (v *Shard_ShardInfo_Args) Equals(rhs *Shard_ShardInfo_Args) bool {
	if !((v.R == nil && rhs.R == nil) || (v.R != nil && rhs.R != nil && v.R.Equals(rhs.R))) {
		return false
	}

	return true
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "shardInfo" for this struct.
func (v *Shard_ShardInfo_Args) MethodName() string {
	return "shardInfo"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *Shard_ShardInfo_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// Shard_ShardInfo_Helper provides functions that aid in handling the
// parameters and return values of the Shard.shardInfo
// function.
var Shard_ShardInfo_Helper = struct {
	// Args accepts the parameters of shardInfo in-order and returns
	// the arguments struct for the function.
	Args func(
		r *ShardInfoRequest,
	) *Shard_ShardInfo_Args

	// IsException returns true if the given error can be thrown
	// by shardInfo.
	//
	// An error can be thrown by shardInfo only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for shardInfo
	// given its return value and error.
	//
	// This allows mapping values and errors returned by
	// shardInfo into a serializable result struct.
	// WrapResponse returns a non-nil error if the provided
	// error cannot be thrown by shardInfo
	//
	//   value, err := shardInfo(args)
	//   result, err := Shard_ShardInfo_Helper.WrapResponse(value, err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from shardInfo: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(*ShardInfoResponse, error) (*Shard_ShardInfo_Result, error)

	// UnwrapResponse takes the result struct for shardInfo
	// and returns the value or error returned by it.
	//
	// The error is non-nil only if shardInfo threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   value, err := Shard_ShardInfo_Helper.UnwrapResponse(result)
	UnwrapResponse func(*Shard_ShardInfo_Result) (*ShardInfoResponse, error)
}{}

func init() {
	Shard_ShardInfo_Helper.Args = func(
		r *ShardInfoRequest,
	) *Shard_ShardInfo_Args {
		return &Shard_ShardInfo_Args{
			R: r,
		}
	}

	Shard_ShardInfo_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}

	Shard_ShardInfo_Helper.WrapResponse = func(success *ShardInfoResponse, err error) (*Shard_ShardInfo_Result, error) {
		if err == nil {
			return &Shard_ShardInfo_Result{Success: success}, nil
		}

		return nil, err
	}
	Shard_ShardInfo_Helper.UnwrapResponse = func(result *Shard_ShardInfo_Result) (success *ShardInfoResponse, err error) {

		if result.Success != nil {
			success = result.Success
			return
		}

		err = errors.New("expected a non-void result")
		return
	}

}

// Shard_ShardInfo_Result represents the result of a Shard.shardInfo function call.
//
// The result of a shardInfo execution is sent and received over the wire as this struct.
//
// Success is set only if the function did not throw an exception.
type Shard_ShardInfo_Result struct {
	// Value returned by shardInfo after a successful execution.
	Success *ShardInfoResponse `json:"success,omitempty"`
}

// ToWire translates a Shard_ShardInfo_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Shard_ShardInfo_Result) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Success != nil {
		w, err = v.Success.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("Shard_ShardInfo_Result should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _ShardInfoResponse_Read(w wire.Value) (*ShardInfoResponse, error) {
	var v ShardInfoResponse
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a Shard_ShardInfo_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Shard_ShardInfo_Result struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Shard_ShardInfo_Result
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Shard_ShardInfo_Result) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TStruct {
				v.Success, err = _ShardInfoResponse_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("Shard_ShardInfo_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a Shard_ShardInfo_Result
// struct.
func (v *Shard_ShardInfo_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", v.Success)
		i++
	}

	return fmt.Sprintf("Shard_ShardInfo_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Shard_ShardInfo_Result match the
// provided Shard_ShardInfo_Result.
//
// This function performs a deep comparison.
func (v *Shard_ShardInfo_Result) Equals(rhs *Shard_ShardInfo_Result) bool {
	if !((v.Success == nil && rhs.Success == nil) || (v.Success != nil && rhs.Success != nil && v.Success.Equals(rhs.Success))) {
		return false
	}

	return true
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "shardInfo" for this struct.
func (v *Shard_ShardInfo_Result) MethodName() string {
	return "shardInfo"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *Shard_ShardInfo_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}
