// Code generated by thriftrw-plugin-yarpc
// @generated

package metaclient

import (
	"context"
	"go.uber.org/thriftrw/wire"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/thrift"
	"go.uber.org/yarpc/x/shardproxy/internal/gen/go/github.com/uber/tchannel/meta"
	"reflect"
)

// Interface is a client for the Meta service.
type Interface interface {
	Health(
		ctx context.Context,
		Hr *meta.HealthRequest,
		opts ...yarpc.CallOption,
	) (*meta.HealthStatus, error)

	ThriftIDL(
		ctx context.Context,
		opts ...yarpc.CallOption,
	) (*meta.ThriftIDLs, error)

	VersionInfo(
		ctx context.Context,
		opts ...yarpc.CallOption,
	) (*meta.VersionInfo, error)
}

// New builds a new client for the Meta service.
//
// 	client := metaclient.New(dispatcher.ClientConfig("meta"))
func New(c transport.ClientConfig, opts ...thrift.ClientOption) Interface {
	return client{
		c: thrift.New(thrift.Config{
			Service:      "Meta",
			ClientConfig: c,
		}, opts...),
	}
}

func init() {
	yarpc.RegisterClientBuilder(
		func(c transport.ClientConfig, f reflect.StructField) Interface {
			return New(c, thrift.ClientBuilderOptions(c, f)...)
		},
	)
}

type client struct {
	c thrift.Client
}

func (c client) Health(
	ctx context.Context,
	_Hr *meta.HealthRequest,
	opts ...yarpc.CallOption,
) (success *meta.HealthStatus, err error) {

	args := meta.Meta_Health_Helper.Args(_Hr)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result meta.Meta_Health_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = meta.Meta_Health_Helper.UnwrapResponse(&result)
	return
}

func (c client) ThriftIDL(
	ctx context.Context,
	opts ...yarpc.CallOption,
) (success *meta.ThriftIDLs, err error) {

	args := meta.Meta_ThriftIDL_Helper.Args()

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result meta.Meta_ThriftIDL_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = meta.Meta_ThriftIDL_Helper.UnwrapResponse(&result)
	return
}

func (c client) VersionInfo(
	ctx context.Context,
	opts ...yarpc.CallOption,
) (success *meta.VersionInfo, err error) {

	args := meta.Meta_VersionInfo_Helper.Args()

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result meta.Meta_VersionInfo_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = meta.Meta_VersionInfo_Helper.UnwrapResponse(&result)
	return
}
