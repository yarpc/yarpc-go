// Code generated by thriftrw v1.9.0. DO NOT EDIT.
// @generated

package meta

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"go.uber.org/thriftrw/wire"
	"math"
	"strconv"
	"strings"
)

type HealthRequest struct {
	Type *HealthRequestType `json:"type,omitempty"`
}

// ToWire translates a HealthRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *HealthRequest) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Type != nil {
		w, err = v.Type.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _HealthRequestType_Read(w wire.Value) (HealthRequestType, error) {
	var v HealthRequestType
	err := v.FromWire(w)
	return v, err
}

// FromWire deserializes a HealthRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a HealthRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v HealthRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *HealthRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TI32 {
				var x HealthRequestType
				x, err = _HealthRequestType_Read(field.Value)
				v.Type = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a HealthRequest
// struct.
func (v *HealthRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Type != nil {
		fields[i] = fmt.Sprintf("Type: %v", *(v.Type))
		i++
	}

	return fmt.Sprintf("HealthRequest{%v}", strings.Join(fields[:i], ", "))
}

func _HealthRequestType_EqualsPtr(lhs, rhs *HealthRequestType) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return x.Equals(y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this HealthRequest match the
// provided HealthRequest.
//
// This function performs a deep comparison.
func (v *HealthRequest) Equals(rhs *HealthRequest) bool {
	if !_HealthRequestType_EqualsPtr(v.Type, rhs.Type) {
		return false
	}

	return true
}

// GetType returns the value of Type if it is set or its
// zero value if it is unset.
func (v *HealthRequest) GetType() (o HealthRequestType) {
	if v.Type != nil {
		return *v.Type
	}

	return
}

type HealthRequestType int32

const (
	HealthRequestTypeProcess HealthRequestType = 0
	HealthRequestTypeTraffic HealthRequestType = 1
)

// HealthRequestType_Values returns all recognized values of HealthRequestType.
func HealthRequestType_Values() []HealthRequestType {
	return []HealthRequestType{
		HealthRequestTypeProcess,
		HealthRequestTypeTraffic,
	}
}

// UnmarshalText tries to decode HealthRequestType from a byte slice
// containing its name.
//
//   var v HealthRequestType
//   err := v.UnmarshalText([]byte("PROCESS"))
func (v *HealthRequestType) UnmarshalText(value []byte) error {
	switch string(value) {
	case "PROCESS":
		*v = HealthRequestTypeProcess
		return nil
	case "TRAFFIC":
		*v = HealthRequestTypeTraffic
		return nil
	default:
		return fmt.Errorf("unknown enum value %q for %q", value, "HealthRequestType")
	}
}

// Ptr returns a pointer to this enum value.
func (v HealthRequestType) Ptr() *HealthRequestType {
	return &v
}

// ToWire translates HealthRequestType into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// Enums are represented as 32-bit integers over the wire.
func (v HealthRequestType) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

// FromWire deserializes HealthRequestType from its Thrift-level
// representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TI32)
//   if err != nil {
//     return HealthRequestType(0), err
//   }
//
//   var v HealthRequestType
//   if err := v.FromWire(x); err != nil {
//     return HealthRequestType(0), err
//   }
//   return v, nil
func (v *HealthRequestType) FromWire(w wire.Value) error {
	*v = (HealthRequestType)(w.GetI32())
	return nil
}

// String returns a readable string representation of HealthRequestType.
func (v HealthRequestType) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "PROCESS"
	case 1:
		return "TRAFFIC"
	}
	return fmt.Sprintf("HealthRequestType(%d)", w)
}

// Equals returns true if this HealthRequestType value matches the provided
// value.
func (v HealthRequestType) Equals(rhs HealthRequestType) bool {
	return v == rhs
}

// MarshalJSON serializes HealthRequestType into JSON.
//
// If the enum value is recognized, its name is returned. Otherwise,
// its integer value is returned.
//
// This implements json.Marshaler.
func (v HealthRequestType) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"PROCESS\""), nil
	case 1:
		return ([]byte)("\"TRAFFIC\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

// UnmarshalJSON attempts to decode HealthRequestType from its JSON
// representation.
//
// This implementation supports both, numeric and string inputs. If a
// string is provided, it must be a known enum name.
//
// This implements json.Unmarshaler.
func (v *HealthRequestType) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}

	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "HealthRequestType")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "HealthRequestType")
		}
		*v = (HealthRequestType)(x)
		return nil
	case string:
		return v.UnmarshalText([]byte(w))
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "HealthRequestType")
	}
}

type HealthState int32

const (
	HealthStateRefusing  HealthState = 0
	HealthStateAccepting HealthState = 1
	HealthStateStopping  HealthState = 2
	HealthStateStopped   HealthState = 3
)

// HealthState_Values returns all recognized values of HealthState.
func HealthState_Values() []HealthState {
	return []HealthState{
		HealthStateRefusing,
		HealthStateAccepting,
		HealthStateStopping,
		HealthStateStopped,
	}
}

// UnmarshalText tries to decode HealthState from a byte slice
// containing its name.
//
//   var v HealthState
//   err := v.UnmarshalText([]byte("REFUSING"))
func (v *HealthState) UnmarshalText(value []byte) error {
	switch string(value) {
	case "REFUSING":
		*v = HealthStateRefusing
		return nil
	case "ACCEPTING":
		*v = HealthStateAccepting
		return nil
	case "STOPPING":
		*v = HealthStateStopping
		return nil
	case "STOPPED":
		*v = HealthStateStopped
		return nil
	default:
		return fmt.Errorf("unknown enum value %q for %q", value, "HealthState")
	}
}

// Ptr returns a pointer to this enum value.
func (v HealthState) Ptr() *HealthState {
	return &v
}

// ToWire translates HealthState into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// Enums are represented as 32-bit integers over the wire.
func (v HealthState) ToWire() (wire.Value, error) {
	return wire.NewValueI32(int32(v)), nil
}

// FromWire deserializes HealthState from its Thrift-level
// representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TI32)
//   if err != nil {
//     return HealthState(0), err
//   }
//
//   var v HealthState
//   if err := v.FromWire(x); err != nil {
//     return HealthState(0), err
//   }
//   return v, nil
func (v *HealthState) FromWire(w wire.Value) error {
	*v = (HealthState)(w.GetI32())
	return nil
}

// String returns a readable string representation of HealthState.
func (v HealthState) String() string {
	w := int32(v)
	switch w {
	case 0:
		return "REFUSING"
	case 1:
		return "ACCEPTING"
	case 2:
		return "STOPPING"
	case 3:
		return "STOPPED"
	}
	return fmt.Sprintf("HealthState(%d)", w)
}

// Equals returns true if this HealthState value matches the provided
// value.
func (v HealthState) Equals(rhs HealthState) bool {
	return v == rhs
}

// MarshalJSON serializes HealthState into JSON.
//
// If the enum value is recognized, its name is returned. Otherwise,
// its integer value is returned.
//
// This implements json.Marshaler.
func (v HealthState) MarshalJSON() ([]byte, error) {
	switch int32(v) {
	case 0:
		return ([]byte)("\"REFUSING\""), nil
	case 1:
		return ([]byte)("\"ACCEPTING\""), nil
	case 2:
		return ([]byte)("\"STOPPING\""), nil
	case 3:
		return ([]byte)("\"STOPPED\""), nil
	}
	return ([]byte)(strconv.FormatInt(int64(v), 10)), nil
}

// UnmarshalJSON attempts to decode HealthState from its JSON
// representation.
//
// This implementation supports both, numeric and string inputs. If a
// string is provided, it must be a known enum name.
//
// This implements json.Unmarshaler.
func (v *HealthState) UnmarshalJSON(text []byte) error {
	d := json.NewDecoder(bytes.NewReader(text))
	d.UseNumber()
	t, err := d.Token()
	if err != nil {
		return err
	}

	switch w := t.(type) {
	case json.Number:
		x, err := w.Int64()
		if err != nil {
			return err
		}
		if x > math.MaxInt32 {
			return fmt.Errorf("enum overflow from JSON %q for %q", text, "HealthState")
		}
		if x < math.MinInt32 {
			return fmt.Errorf("enum underflow from JSON %q for %q", text, "HealthState")
		}
		*v = (HealthState)(x)
		return nil
	case string:
		return v.UnmarshalText([]byte(w))
	default:
		return fmt.Errorf("invalid JSON value %q (%T) to unmarshal into %q", t, t, "HealthState")
	}
}

type HealthStatus struct {
	Ok      bool         `json:"ok,required"`
	Message *string      `json:"message,omitempty"`
	State   *HealthState `json:"state,omitempty"`
}

// ToWire translates a HealthStatus struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *HealthStatus) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueBool(v.Ok), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++
	if v.Message != nil {
		w, err = wire.NewValueString(*(v.Message)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	if v.State != nil {
		w, err = v.State.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 3, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _HealthState_Read(w wire.Value) (HealthState, error) {
	var v HealthState
	err := v.FromWire(w)
	return v, err
}

// FromWire deserializes a HealthStatus struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a HealthStatus struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v HealthStatus
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *HealthStatus) FromWire(w wire.Value) error {
	var err error

	okIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBool {
				v.Ok, err = field.Value.GetBool(), error(nil)
				if err != nil {
					return err
				}
				okIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Message = &x
				if err != nil {
					return err
				}

			}
		case 3:
			if field.Value.Type() == wire.TI32 {
				var x HealthState
				x, err = _HealthState_Read(field.Value)
				v.State = &x
				if err != nil {
					return err
				}

			}
		}
	}

	if !okIsSet {
		return errors.New("field Ok of HealthStatus is required")
	}

	return nil
}

// String returns a readable string representation of a HealthStatus
// struct.
func (v *HealthStatus) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	fields[i] = fmt.Sprintf("Ok: %v", v.Ok)
	i++
	if v.Message != nil {
		fields[i] = fmt.Sprintf("Message: %v", *(v.Message))
		i++
	}
	if v.State != nil {
		fields[i] = fmt.Sprintf("State: %v", *(v.State))
		i++
	}

	return fmt.Sprintf("HealthStatus{%v}", strings.Join(fields[:i], ", "))
}

func _String_EqualsPtr(lhs, rhs *string) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _HealthState_EqualsPtr(lhs, rhs *HealthState) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return x.Equals(y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this HealthStatus match the
// provided HealthStatus.
//
// This function performs a deep comparison.
func (v *HealthStatus) Equals(rhs *HealthStatus) bool {
	if !(v.Ok == rhs.Ok) {
		return false
	}
	if !_String_EqualsPtr(v.Message, rhs.Message) {
		return false
	}
	if !_HealthState_EqualsPtr(v.State, rhs.State) {
		return false
	}

	return true
}

// GetMessage returns the value of Message if it is set or its
// zero value if it is unset.
func (v *HealthStatus) GetMessage() (o string) {
	if v.Message != nil {
		return *v.Message
	}

	return
}

// GetState returns the value of State if it is set or its
// zero value if it is unset.
func (v *HealthStatus) GetState() (o HealthState) {
	if v.State != nil {
		return *v.State
	}

	return
}

type ThriftIDLs struct {
	Idls       map[Filename]string `json:"idls,required"`
	EntryPoint Filename            `json:"entryPoint,required"`
}

type _Map_Filename_String_MapItemList map[Filename]string

func (m _Map_Filename_String_MapItemList) ForEach(f func(wire.MapItem) error) error {
	for k, v := range m {
		kw, err := k.ToWire()
		if err != nil {
			return err
		}

		vw, err := wire.NewValueString(v), error(nil)
		if err != nil {
			return err
		}
		err = f(wire.MapItem{Key: kw, Value: vw})
		if err != nil {
			return err
		}
	}
	return nil
}

func (m _Map_Filename_String_MapItemList) Size() int {
	return len(m)
}

func (_Map_Filename_String_MapItemList) KeyType() wire.Type {
	return wire.TBinary
}

func (_Map_Filename_String_MapItemList) ValueType() wire.Type {
	return wire.TBinary
}

func (_Map_Filename_String_MapItemList) Close() {}

// ToWire translates a ThriftIDLs struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *ThriftIDLs) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Idls == nil {
		return w, errors.New("field Idls of ThriftIDLs is required")
	}
	w, err = wire.NewValueMap(_Map_Filename_String_MapItemList(v.Idls)), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	w, err = v.EntryPoint.ToWire()
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Filename_Read(w wire.Value) (Filename, error) {
	var x Filename
	err := x.FromWire(w)
	return x, err
}

func _Map_Filename_String_Read(m wire.MapItemList) (map[Filename]string, error) {
	if m.KeyType() != wire.TBinary {
		return nil, nil
	}

	if m.ValueType() != wire.TBinary {
		return nil, nil
	}

	o := make(map[Filename]string, m.Size())
	err := m.ForEach(func(x wire.MapItem) error {
		k, err := _Filename_Read(x.Key)
		if err != nil {
			return err
		}

		v, err := x.Value.GetString(), error(nil)
		if err != nil {
			return err
		}

		o[k] = v
		return nil
	})
	m.Close()
	return o, err
}

// FromWire deserializes a ThriftIDLs struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ThriftIDLs struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v ThriftIDLs
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *ThriftIDLs) FromWire(w wire.Value) error {
	var err error

	idlsIsSet := false
	entryPointIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TMap {
				v.Idls, err = _Map_Filename_String_Read(field.Value.GetMap())
				if err != nil {
					return err
				}
				idlsIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				v.EntryPoint, err = _Filename_Read(field.Value)
				if err != nil {
					return err
				}
				entryPointIsSet = true
			}
		}
	}

	if !idlsIsSet {
		return errors.New("field Idls of ThriftIDLs is required")
	}

	if !entryPointIsSet {
		return errors.New("field EntryPoint of ThriftIDLs is required")
	}

	return nil
}

// String returns a readable string representation of a ThriftIDLs
// struct.
func (v *ThriftIDLs) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	fields[i] = fmt.Sprintf("Idls: %v", v.Idls)
	i++
	fields[i] = fmt.Sprintf("EntryPoint: %v", v.EntryPoint)
	i++

	return fmt.Sprintf("ThriftIDLs{%v}", strings.Join(fields[:i], ", "))
}

func _Map_Filename_String_Equals(lhs, rhs map[Filename]string) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for lk, lv := range lhs {
		rv, ok := rhs[lk]
		if !ok {
			return false
		}
		if !(lv == rv) {
			return false
		}
	}
	return true
}

// Equals returns true if all the fields of this ThriftIDLs match the
// provided ThriftIDLs.
//
// This function performs a deep comparison.
func (v *ThriftIDLs) Equals(rhs *ThriftIDLs) bool {
	if !_Map_Filename_String_Equals(v.Idls, rhs.Idls) {
		return false
	}
	if !(v.EntryPoint == rhs.EntryPoint) {
		return false
	}

	return true
}

type VersionInfo struct {
	Language        string `json:"language,required"`
	LanguageVersion string `json:"language_version,required"`
	Version         string `json:"version,required"`
}

// ToWire translates a VersionInfo struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *VersionInfo) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueString(v.Language), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	w, err = wire.NewValueString(v.LanguageVersion), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++

	w, err = wire.NewValueString(v.Version), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 3, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a VersionInfo struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a VersionInfo struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v VersionInfo
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *VersionInfo) FromWire(w wire.Value) error {
	var err error

	languageIsSet := false
	language_versionIsSet := false
	versionIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Language, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				languageIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				v.LanguageVersion, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				language_versionIsSet = true
			}
		case 3:
			if field.Value.Type() == wire.TBinary {
				v.Version, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				versionIsSet = true
			}
		}
	}

	if !languageIsSet {
		return errors.New("field Language of VersionInfo is required")
	}

	if !language_versionIsSet {
		return errors.New("field LanguageVersion of VersionInfo is required")
	}

	if !versionIsSet {
		return errors.New("field Version of VersionInfo is required")
	}

	return nil
}

// String returns a readable string representation of a VersionInfo
// struct.
func (v *VersionInfo) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	fields[i] = fmt.Sprintf("Language: %v", v.Language)
	i++
	fields[i] = fmt.Sprintf("LanguageVersion: %v", v.LanguageVersion)
	i++
	fields[i] = fmt.Sprintf("Version: %v", v.Version)
	i++

	return fmt.Sprintf("VersionInfo{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this VersionInfo match the
// provided VersionInfo.
//
// This function performs a deep comparison.
func (v *VersionInfo) Equals(rhs *VersionInfo) bool {
	if !(v.Language == rhs.Language) {
		return false
	}
	if !(v.LanguageVersion == rhs.LanguageVersion) {
		return false
	}
	if !(v.Version == rhs.Version) {
		return false
	}

	return true
}

type Filename string

// ToWire translates Filename into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
func (v Filename) ToWire() (wire.Value, error) {
	x := (string)(v)
	return wire.NewValueString(x), error(nil)
}

// String returns a readable string representation of Filename.
func (v Filename) String() string {
	x := (string)(v)
	return fmt.Sprint(x)
}

// FromWire deserializes Filename from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
func (v *Filename) FromWire(w wire.Value) error {
	x, err := w.GetString(), error(nil)
	*v = (Filename)(x)
	return err
}

// Equals returns true if this Filename is equal to the provided
// Filename.
func (lhs Filename) Equals(rhs Filename) bool {
	return (lhs == rhs)
}
