// Code generated by protoc-gen-yarpc-go
// source: encoding/protobuf/protoc-gen-yarpc-go/internal/testing/testing.proto
// DO NOT EDIT!

package testing

import (
	"context"
	"io/ioutil"
	"reflect"

	"github.com/gogo/protobuf/proto"
	"go.uber.org/fx"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/protobuf"
	"go.uber.org/yarpc/yarpcproto"
)

var _ = ioutil.NopCloser

// KeyValueYARPCClient is the YARPC client-side interface for the KeyValue service.
type KeyValueYARPCClient interface {
	GetValue(context.Context, *GetValueRequest, ...yarpc.CallOption) (*GetValueResponse, error)
	SetValue(context.Context, *SetValueRequest, ...yarpc.CallOption) (*SetValueResponse, error)
}

// NewKeyValueYARPCClient builds a new YARPC client for the KeyValue service.
func NewKeyValueYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) KeyValueYARPCClient {
	return &_KeyValueYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "uber.yarpc.encoding.protobuf.protocgenyarpcgo.internal.testing.KeyValue",
			ClientConfig: clientConfig,
			Options:      options,
		},
	)}
}

// KeyValueYARPCServer is the YARPC server-side interface for the KeyValue service.
type KeyValueYARPCServer interface {
	GetValue(context.Context, *GetValueRequest) (*GetValueResponse, error)
	SetValue(context.Context, *SetValueRequest) (*SetValueResponse, error)
}

// BuildKeyValueYARPCProcedures prepares an implementation of the KeyValue service for YARPC registration.
func BuildKeyValueYARPCProcedures(server KeyValueYARPCServer) []transport.Procedure {
	handler := &_KeyValueYARPCHandler{server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "uber.yarpc.encoding.protobuf.protocgenyarpcgo.internal.testing.KeyValue",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "GetValue",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:     handler.GetValue,
							NewRequest: newKeyValueServiceGetValueYARPCRequest,
						},
					),
				},
				{
					MethodName: "SetValue",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:     handler.SetValue,
							NewRequest: newKeyValueServiceSetValueYARPCRequest,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{},
		},
	)
}

// FxKeyValueYARPCClientParams defines the input
// for NewFxKeyValueYARPCClient. It provides the
// paramaters to get a KeyValueYARPCClient in an
// Fx application.
type FxKeyValueYARPCClientParams struct {
	fx.In

	Provider yarpc.ClientConfig
}

// FxKeyValueYARPCClientResult defines the output
// of NewFxKeyValueYARPCClient. It provides a
// KeyValueYARPCClient to an Fx application.
type FxKeyValueYARPCClientResult struct {
	fx.Out

	Client KeyValueYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxKeyValueYARPCClient provides a KeyValueYARPCClient
// to an Fx application using the given name for routing.
//
//  fx.Provide(
//    testing.NewFxKeyValueYARPCClient,
//    ...
//  )
func NewFxKeyValueYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxKeyValueYARPCClientParams) FxKeyValueYARPCClientResult {
		return FxKeyValueYARPCClientResult{
			Client: NewKeyValueYARPCClient(params.Provider.ClientConfig(name), options...),
		}
	}
}

// FxKeyValueYARPCProceduresParams defines the input
// for NewFxKeyValueYARPCProcedures. It provides the
// paramaters to get KeyValueYARPCServer procedures in an
// Fx application.
type FxKeyValueYARPCProceduresParams struct {
	fx.In

	Server KeyValueYARPCServer
}

// FxKeyValueYARPCProceduresResult defines the output
// of NewFxKeyValueYARPCProcedures. It provides
// KeyValueYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxKeyValueYARPCProceduresResult struct {
	fx.Out

	Procedures []transport.Procedure `group:"yarpcfx"`
}

// NewFxKeyValueYARPCProcedures provides KeyValueYARPCServer procedures to an Fx application.
// It expects a KeyValueYARPCServer to be present in the container.
//
//  fx.Provide(
//    testing.NewFxKeyValueYARPCProcedures,
//    ...
//  )
func NewFxKeyValueYARPCProcedures() interface{} {
	return func(params FxKeyValueYARPCProceduresParams) FxKeyValueYARPCProceduresResult {
		return FxKeyValueYARPCProceduresResult{
			Procedures: BuildKeyValueYARPCProcedures(params.Server),
		}
	}
}

type _KeyValueYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_KeyValueYARPCCaller) GetValue(ctx context.Context, request *GetValueRequest, options ...yarpc.CallOption) (*GetValueResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetValue", request, newKeyValueServiceGetValueYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetValueResponse)
	if !ok {
		return nil, protobuf.CastError(emptyKeyValueServiceGetValueYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_KeyValueYARPCCaller) SetValue(ctx context.Context, request *SetValueRequest, options ...yarpc.CallOption) (*SetValueResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "SetValue", request, newKeyValueServiceSetValueYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*SetValueResponse)
	if !ok {
		return nil, protobuf.CastError(emptyKeyValueServiceSetValueYARPCResponse, responseMessage)
	}
	return response, err
}

type _KeyValueYARPCHandler struct {
	server KeyValueYARPCServer
}

func (h *_KeyValueYARPCHandler) GetValue(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetValueRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetValueRequest)
		if !ok {
			return nil, protobuf.CastError(emptyKeyValueServiceGetValueYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetValue(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_KeyValueYARPCHandler) SetValue(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *SetValueRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*SetValueRequest)
		if !ok {
			return nil, protobuf.CastError(emptyKeyValueServiceSetValueYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.SetValue(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func newKeyValueServiceGetValueYARPCRequest() proto.Message {
	return &GetValueRequest{}
}

func newKeyValueServiceGetValueYARPCResponse() proto.Message {
	return &GetValueResponse{}
}

func newKeyValueServiceSetValueYARPCRequest() proto.Message {
	return &SetValueRequest{}
}

func newKeyValueServiceSetValueYARPCResponse() proto.Message {
	return &SetValueResponse{}
}

var (
	emptyKeyValueServiceGetValueYARPCRequest  = &GetValueRequest{}
	emptyKeyValueServiceGetValueYARPCResponse = &GetValueResponse{}
	emptyKeyValueServiceSetValueYARPCRequest  = &SetValueRequest{}
	emptyKeyValueServiceSetValueYARPCResponse = &SetValueResponse{}
)

// SinkYARPCClient is the YARPC client-side interface for the Sink service.
type SinkYARPCClient interface {
	Fire(context.Context, *FireRequest, ...yarpc.CallOption) (yarpc.Ack, error)
}

// NewSinkYARPCClient builds a new YARPC client for the Sink service.
func NewSinkYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) SinkYARPCClient {
	return &_SinkYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "uber.yarpc.encoding.protobuf.protocgenyarpcgo.internal.testing.Sink",
			ClientConfig: clientConfig,
			Options:      options,
		},
	)}
}

// SinkYARPCServer is the YARPC server-side interface for the Sink service.
type SinkYARPCServer interface {
	Fire(context.Context, *FireRequest) error
}

// BuildSinkYARPCProcedures prepares an implementation of the Sink service for YARPC registration.
func BuildSinkYARPCProcedures(server SinkYARPCServer) []transport.Procedure {
	handler := &_SinkYARPCHandler{server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName:        "uber.yarpc.encoding.protobuf.protocgenyarpcgo.internal.testing.Sink",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{
				{
					MethodName: "Fire",
					Handler: protobuf.NewOnewayHandler(
						protobuf.OnewayHandlerParams{
							Handle:     handler.Fire,
							NewRequest: newSinkServiceFireYARPCRequest,
						},
					),
				},
			},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{},
		},
	)
}

// FxSinkYARPCClientParams defines the input
// for NewFxSinkYARPCClient. It provides the
// paramaters to get a SinkYARPCClient in an
// Fx application.
type FxSinkYARPCClientParams struct {
	fx.In

	Provider yarpc.ClientConfig
}

// FxSinkYARPCClientResult defines the output
// of NewFxSinkYARPCClient. It provides a
// SinkYARPCClient to an Fx application.
type FxSinkYARPCClientResult struct {
	fx.Out

	Client SinkYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxSinkYARPCClient provides a SinkYARPCClient
// to an Fx application using the given name for routing.
//
//  fx.Provide(
//    testing.NewFxSinkYARPCClient,
//    ...
//  )
func NewFxSinkYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxSinkYARPCClientParams) FxSinkYARPCClientResult {
		return FxSinkYARPCClientResult{
			Client: NewSinkYARPCClient(params.Provider.ClientConfig(name), options...),
		}
	}
}

// FxSinkYARPCProceduresParams defines the input
// for NewFxSinkYARPCProcedures. It provides the
// paramaters to get SinkYARPCServer procedures in an
// Fx application.
type FxSinkYARPCProceduresParams struct {
	fx.In

	Server SinkYARPCServer
}

// FxSinkYARPCProceduresResult defines the output
// of NewFxSinkYARPCProcedures. It provides
// SinkYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxSinkYARPCProceduresResult struct {
	fx.Out

	Procedures []transport.Procedure `group:"yarpcfx"`
}

// NewFxSinkYARPCProcedures provides SinkYARPCServer procedures to an Fx application.
// It expects a SinkYARPCServer to be present in the container.
//
//  fx.Provide(
//    testing.NewFxSinkYARPCProcedures,
//    ...
//  )
func NewFxSinkYARPCProcedures() interface{} {
	return func(params FxSinkYARPCProceduresParams) FxSinkYARPCProceduresResult {
		return FxSinkYARPCProceduresResult{
			Procedures: BuildSinkYARPCProcedures(params.Server),
		}
	}
}

type _SinkYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_SinkYARPCCaller) Fire(ctx context.Context, request *FireRequest, options ...yarpc.CallOption) (yarpc.Ack, error) {
	return c.streamClient.CallOneway(ctx, "Fire", request, options...)
}

type _SinkYARPCHandler struct {
	server SinkYARPCServer
}

func (h *_SinkYARPCHandler) Fire(ctx context.Context, requestMessage proto.Message) error {
	var request *FireRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*FireRequest)
		if !ok {
			return protobuf.CastError(emptySinkServiceFireYARPCRequest, requestMessage)
		}
	}
	return h.server.Fire(ctx, request)
}

func newSinkServiceFireYARPCRequest() proto.Message {
	return &FireRequest{}
}

func newSinkServiceFireYARPCResponse() proto.Message {
	return &yarpcproto.Oneway{}
}

var (
	emptySinkServiceFireYARPCRequest  = &FireRequest{}
	emptySinkServiceFireYARPCResponse = &yarpcproto.Oneway{}
)

// AllYARPCClient is the YARPC client-side interface for the All service.
type AllYARPCClient interface {
	GetValue(context.Context, *GetValueRequest, ...yarpc.CallOption) (*GetValueResponse, error)
	SetValue(context.Context, *SetValueRequest, ...yarpc.CallOption) (*SetValueResponse, error)
	Fire(context.Context, *FireRequest, ...yarpc.CallOption) (yarpc.Ack, error)
	HelloOne(context.Context, ...yarpc.CallOption) (AllServiceHelloOneYARPCClient, error)
	HelloTwo(context.Context, *HelloRequest, ...yarpc.CallOption) (AllServiceHelloTwoYARPCClient, error)
	HelloThree(context.Context, ...yarpc.CallOption) (AllServiceHelloThreeYARPCClient, error)
}

// AllServiceHelloOneYARPCClient sends HelloRequests and receives the single HelloResponse when sending is done.
type AllServiceHelloOneYARPCClient interface {
	Context() context.Context
	Send(*HelloRequest, ...yarpc.StreamOption) error
	CloseAndRecv(...yarpc.StreamOption) (*HelloResponse, error)
}

// AllServiceHelloTwoYARPCClient receives HelloResponses, returning io.EOF when the stream is complete.
type AllServiceHelloTwoYARPCClient interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*HelloResponse, error)
	CloseSend(...yarpc.StreamOption) error
}

// AllServiceHelloThreeYARPCClient sends HelloRequests and receives HelloResponses, returning io.EOF when the stream is complete.
type AllServiceHelloThreeYARPCClient interface {
	Context() context.Context
	Send(*HelloRequest, ...yarpc.StreamOption) error
	Recv(...yarpc.StreamOption) (*HelloResponse, error)
	CloseSend(...yarpc.StreamOption) error
}

// NewAllYARPCClient builds a new YARPC client for the All service.
func NewAllYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) AllYARPCClient {
	return &_AllYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "uber.yarpc.encoding.protobuf.protocgenyarpcgo.internal.testing.All",
			ClientConfig: clientConfig,
			Options:      options,
		},
	)}
}

// AllYARPCServer is the YARPC server-side interface for the All service.
type AllYARPCServer interface {
	GetValue(context.Context, *GetValueRequest) (*GetValueResponse, error)
	SetValue(context.Context, *SetValueRequest) (*SetValueResponse, error)
	Fire(context.Context, *FireRequest) error
	HelloOne(AllServiceHelloOneYARPCServer) (*HelloResponse, error)
	HelloTwo(*HelloRequest, AllServiceHelloTwoYARPCServer) error
	HelloThree(AllServiceHelloThreeYARPCServer) error
}

// AllServiceHelloOneYARPCServer receives HelloRequests.
type AllServiceHelloOneYARPCServer interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*HelloRequest, error)
}

// AllServiceHelloTwoYARPCServer sends HelloResponses.
type AllServiceHelloTwoYARPCServer interface {
	Context() context.Context
	Send(*HelloResponse, ...yarpc.StreamOption) error
}

// AllServiceHelloThreeYARPCServer receives HelloRequests and sends HelloResponse.
type AllServiceHelloThreeYARPCServer interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*HelloRequest, error)
	Send(*HelloResponse, ...yarpc.StreamOption) error
}

// BuildAllYARPCProcedures prepares an implementation of the All service for YARPC registration.
func BuildAllYARPCProcedures(server AllYARPCServer) []transport.Procedure {
	handler := &_AllYARPCHandler{server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "uber.yarpc.encoding.protobuf.protocgenyarpcgo.internal.testing.All",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "GetValue",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:     handler.GetValue,
							NewRequest: newAllServiceGetValueYARPCRequest,
						},
					),
				},
				{
					MethodName: "SetValue",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:     handler.SetValue,
							NewRequest: newAllServiceSetValueYARPCRequest,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{
				{
					MethodName: "Fire",
					Handler: protobuf.NewOnewayHandler(
						protobuf.OnewayHandlerParams{
							Handle:     handler.Fire,
							NewRequest: newAllServiceFireYARPCRequest,
						},
					),
				},
			},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{
				{
					MethodName: "HelloThree",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.HelloThree,
						},
					),
				},

				{
					MethodName: "HelloTwo",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.HelloTwo,
						},
					),
				},

				{
					MethodName: "HelloOne",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.HelloOne,
						},
					),
				},
			},
		},
	)
}

// FxAllYARPCClientParams defines the input
// for NewFxAllYARPCClient. It provides the
// paramaters to get a AllYARPCClient in an
// Fx application.
type FxAllYARPCClientParams struct {
	fx.In

	Provider yarpc.ClientConfig
}

// FxAllYARPCClientResult defines the output
// of NewFxAllYARPCClient. It provides a
// AllYARPCClient to an Fx application.
type FxAllYARPCClientResult struct {
	fx.Out

	Client AllYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxAllYARPCClient provides a AllYARPCClient
// to an Fx application using the given name for routing.
//
//  fx.Provide(
//    testing.NewFxAllYARPCClient,
//    ...
//  )
func NewFxAllYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxAllYARPCClientParams) FxAllYARPCClientResult {
		return FxAllYARPCClientResult{
			Client: NewAllYARPCClient(params.Provider.ClientConfig(name), options...),
		}
	}
}

// FxAllYARPCProceduresParams defines the input
// for NewFxAllYARPCProcedures. It provides the
// paramaters to get AllYARPCServer procedures in an
// Fx application.
type FxAllYARPCProceduresParams struct {
	fx.In

	Server AllYARPCServer
}

// FxAllYARPCProceduresResult defines the output
// of NewFxAllYARPCProcedures. It provides
// AllYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxAllYARPCProceduresResult struct {
	fx.Out

	Procedures []transport.Procedure `group:"yarpcfx"`
}

// NewFxAllYARPCProcedures provides AllYARPCServer procedures to an Fx application.
// It expects a AllYARPCServer to be present in the container.
//
//  fx.Provide(
//    testing.NewFxAllYARPCProcedures,
//    ...
//  )
func NewFxAllYARPCProcedures() interface{} {
	return func(params FxAllYARPCProceduresParams) FxAllYARPCProceduresResult {
		return FxAllYARPCProceduresResult{
			Procedures: BuildAllYARPCProcedures(params.Server),
		}
	}
}

type _AllYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_AllYARPCCaller) GetValue(ctx context.Context, request *GetValueRequest, options ...yarpc.CallOption) (*GetValueResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetValue", request, newAllServiceGetValueYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetValueResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAllServiceGetValueYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AllYARPCCaller) SetValue(ctx context.Context, request *SetValueRequest, options ...yarpc.CallOption) (*SetValueResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "SetValue", request, newAllServiceSetValueYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*SetValueResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAllServiceSetValueYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AllYARPCCaller) Fire(ctx context.Context, request *FireRequest, options ...yarpc.CallOption) (yarpc.Ack, error) {
	return c.streamClient.CallOneway(ctx, "Fire", request, options...)
}

func (c *_AllYARPCCaller) HelloOne(ctx context.Context, options ...yarpc.CallOption) (AllServiceHelloOneYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "HelloOne", options...)
	if err != nil {
		return nil, err
	}
	return &_AllServiceHelloOneYARPCClient{stream: stream}, nil
}

func (c *_AllYARPCCaller) HelloTwo(ctx context.Context, request *HelloRequest, options ...yarpc.CallOption) (AllServiceHelloTwoYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "HelloTwo", options...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(request); err != nil {
		return nil, err
	}
	return &_AllServiceHelloTwoYARPCClient{stream: stream}, nil
}

func (c *_AllYARPCCaller) HelloThree(ctx context.Context, options ...yarpc.CallOption) (AllServiceHelloThreeYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "HelloThree", options...)
	if err != nil {
		return nil, err
	}
	return &_AllServiceHelloThreeYARPCClient{stream: stream}, nil
}

type _AllYARPCHandler struct {
	server AllYARPCServer
}

func (h *_AllYARPCHandler) GetValue(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetValueRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetValueRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAllServiceGetValueYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetValue(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AllYARPCHandler) SetValue(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *SetValueRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*SetValueRequest)
		if !ok {
			return nil, protobuf.CastError(emptyAllServiceSetValueYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.SetValue(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_AllYARPCHandler) Fire(ctx context.Context, requestMessage proto.Message) error {
	var request *FireRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*FireRequest)
		if !ok {
			return protobuf.CastError(emptyAllServiceFireYARPCRequest, requestMessage)
		}
	}
	return h.server.Fire(ctx, request)
}

func (h *_AllYARPCHandler) HelloOne(serverStream *protobuf.ServerStream) error {
	response, err := h.server.HelloOne(&_AllServiceHelloOneYARPCServer{serverStream: serverStream})
	if err != nil {
		return err
	}
	return serverStream.Send(response)
}

func (h *_AllYARPCHandler) HelloTwo(serverStream *protobuf.ServerStream) error {
	requestMessage, err := serverStream.Receive(newAllServiceHelloTwoYARPCRequest)
	if requestMessage == nil {
		return err
	}

	request, ok := requestMessage.(*HelloRequest)
	if !ok {
		return protobuf.CastError(emptyAllServiceHelloTwoYARPCRequest, requestMessage)
	}
	return h.server.HelloTwo(request, &_AllServiceHelloTwoYARPCServer{serverStream: serverStream})
}

func (h *_AllYARPCHandler) HelloThree(serverStream *protobuf.ServerStream) error {
	return h.server.HelloThree(&_AllServiceHelloThreeYARPCServer{serverStream: serverStream})
}

type _AllServiceHelloOneYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_AllServiceHelloOneYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_AllServiceHelloOneYARPCClient) Send(request *HelloRequest, options ...yarpc.StreamOption) error {
	return c.stream.Send(request, options...)
}

func (c *_AllServiceHelloOneYARPCClient) CloseAndRecv(options ...yarpc.StreamOption) (*HelloResponse, error) {
	if err := c.stream.Close(options...); err != nil {
		return nil, err
	}
	responseMessage, err := c.stream.Receive(newAllServiceHelloOneYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAllServiceHelloOneYARPCResponse, responseMessage)
	}
	return response, err
}

type _AllServiceHelloTwoYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_AllServiceHelloTwoYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_AllServiceHelloTwoYARPCClient) Recv(options ...yarpc.StreamOption) (*HelloResponse, error) {
	responseMessage, err := c.stream.Receive(newAllServiceHelloTwoYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAllServiceHelloTwoYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AllServiceHelloTwoYARPCClient) CloseSend(options ...yarpc.StreamOption) error {
	return c.stream.Close(options...)
}

type _AllServiceHelloThreeYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_AllServiceHelloThreeYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_AllServiceHelloThreeYARPCClient) Send(request *HelloRequest, options ...yarpc.StreamOption) error {
	return c.stream.Send(request, options...)
}

func (c *_AllServiceHelloThreeYARPCClient) Recv(options ...yarpc.StreamOption) (*HelloResponse, error) {
	responseMessage, err := c.stream.Receive(newAllServiceHelloThreeYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloResponse)
	if !ok {
		return nil, protobuf.CastError(emptyAllServiceHelloThreeYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_AllServiceHelloThreeYARPCClient) CloseSend(options ...yarpc.StreamOption) error {
	return c.stream.Close(options...)
}

type _AllServiceHelloOneYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_AllServiceHelloOneYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_AllServiceHelloOneYARPCServer) Recv(options ...yarpc.StreamOption) (*HelloRequest, error) {
	requestMessage, err := s.serverStream.Receive(newAllServiceHelloOneYARPCRequest, options...)
	if requestMessage == nil {
		return nil, err
	}
	request, ok := requestMessage.(*HelloRequest)
	if !ok {
		return nil, protobuf.CastError(emptyAllServiceHelloOneYARPCRequest, requestMessage)
	}
	return request, err
}

type _AllServiceHelloTwoYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_AllServiceHelloTwoYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_AllServiceHelloTwoYARPCServer) Send(response *HelloResponse, options ...yarpc.StreamOption) error {
	return s.serverStream.Send(response, options...)
}

type _AllServiceHelloThreeYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_AllServiceHelloThreeYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_AllServiceHelloThreeYARPCServer) Recv(options ...yarpc.StreamOption) (*HelloRequest, error) {
	requestMessage, err := s.serverStream.Receive(newAllServiceHelloThreeYARPCRequest, options...)
	if requestMessage == nil {
		return nil, err
	}
	request, ok := requestMessage.(*HelloRequest)
	if !ok {
		return nil, protobuf.CastError(emptyAllServiceHelloThreeYARPCRequest, requestMessage)
	}
	return request, err
}

func (s *_AllServiceHelloThreeYARPCServer) Send(response *HelloResponse, options ...yarpc.StreamOption) error {
	return s.serverStream.Send(response, options...)
}

func newAllServiceGetValueYARPCRequest() proto.Message {
	return &GetValueRequest{}
}

func newAllServiceGetValueYARPCResponse() proto.Message {
	return &GetValueResponse{}
}

func newAllServiceSetValueYARPCRequest() proto.Message {
	return &SetValueRequest{}
}

func newAllServiceSetValueYARPCResponse() proto.Message {
	return &SetValueResponse{}
}

func newAllServiceFireYARPCRequest() proto.Message {
	return &FireRequest{}
}

func newAllServiceFireYARPCResponse() proto.Message {
	return &yarpcproto.Oneway{}
}

func newAllServiceHelloOneYARPCRequest() proto.Message {
	return &HelloRequest{}
}

func newAllServiceHelloOneYARPCResponse() proto.Message {
	return &HelloResponse{}
}

func newAllServiceHelloTwoYARPCRequest() proto.Message {
	return &HelloRequest{}
}

func newAllServiceHelloTwoYARPCResponse() proto.Message {
	return &HelloResponse{}
}

func newAllServiceHelloThreeYARPCRequest() proto.Message {
	return &HelloRequest{}
}

func newAllServiceHelloThreeYARPCResponse() proto.Message {
	return &HelloResponse{}
}

var (
	emptyAllServiceGetValueYARPCRequest    = &GetValueRequest{}
	emptyAllServiceGetValueYARPCResponse   = &GetValueResponse{}
	emptyAllServiceSetValueYARPCRequest    = &SetValueRequest{}
	emptyAllServiceSetValueYARPCResponse   = &SetValueResponse{}
	emptyAllServiceFireYARPCRequest        = &FireRequest{}
	emptyAllServiceFireYARPCResponse       = &yarpcproto.Oneway{}
	emptyAllServiceHelloOneYARPCRequest    = &HelloRequest{}
	emptyAllServiceHelloOneYARPCResponse   = &HelloResponse{}
	emptyAllServiceHelloTwoYARPCRequest    = &HelloRequest{}
	emptyAllServiceHelloTwoYARPCResponse   = &HelloResponse{}
	emptyAllServiceHelloThreeYARPCRequest  = &HelloRequest{}
	emptyAllServiceHelloThreeYARPCResponse = &HelloResponse{}
)

func init() {
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) KeyValueYARPCClient {
			return NewKeyValueYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) SinkYARPCClient {
			return NewSinkYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) AllYARPCClient {
			return NewAllYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
}
