// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package main

import (
	"path/filepath"

	"go.uber.org/thriftrw/plugin"
)

const fxTemplate = `
// Code generated by thriftrw-plugin-yarpc
// @generated

<$pkgname := printf "%sfx" (lower .Name)>
package <$pkgname>

<$yarpc  := import "go.uber.org/yarpc">
<$thrift := import "go.uber.org/yarpc/encoding/thrift">
<$client := import .ClientPackagePath>

// Client provides a <.Name> client to an Fx application using the given name
// for routing.
//
// 	fx.Provide(
// 		<$pkgname>.Client("..."),
// 		newHandler,
// 	)
func Client(name string, opts ...<$thrift>.ClientOption) interface{} {
	return func(d *<$yarpc>.Dispatcher) <$client>.Interface {
		return <$client>.New(d.ClientConfig(name), opts...)
	}
}
`

func fxGenerator(data *templateData, files map[string][]byte) (err error) {
	packageName := filepath.Base(data.FxPackagePath())
	// kv.thrift => .../kv/keyvaluefx/client.go
	path := filepath.Join(data.Module.Directory, packageName, "client.go")
	files[path], err = plugin.GoFileFromTemplate(path, fxTemplate, data, templateOptions...)
	return
}
