// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package main

const uberfxServerTemplate = `
// Code generated by thriftrw-plugin-yarpc and thriftrw-plugin-fx
// @generated

<$pkgname := printf "%sserver" (lower .Service.Name)>
package <$pkgname>

<$fx        := import "go.uber.org/fx">
<$rpc       := import "go.uber.org/fx/modules/rpc">
<$service   := import "go.uber.org/fx/service">
<$yarpc     := import "go.uber.org/yarpc">
<$transport := import "go.uber.org/yarpc/api/transport">
<$thrift    := import "go.uber.org/yarpc/encoding/thrift">

// Interface is the server-side interface for the <.Service.Name> service.
type Interface interface {
	<if .Parent>
		<$parentPath := printf "%s/yarpc/%sserver" .ParentModule.ImportPath (lower .Parent.Name)>
		<import $parentPath>.Interface
	<end>

	<range .Service.Functions>
		<.Name>(
			ctx <$fx>.Context,
			reqMeta <$yarpc>.ReqMeta, <range .Arguments>
			<.Name> <formatType .Type>,<end>
		)<if .OneWay> error
		<else if .ReturnType> (<formatType .ReturnType>, <$yarpc>.ResMeta, error)
		<else> (<$yarpc>.ResMeta, error)
		<end>
	<end>
}

// New prepares an implementation of the <.Service.Name> service for
// registration.
//
// 	handler := <.Service.Name>Handler{}
// 	dispatcher.Register(<$pkgname>.New(handler))
func New(svc service.Host, impl Interface, opts ...<$thrift>.RegisterOption) []<$transport>.Registrant {
	h := handler{impl}
	service := <$thrift>.Service{
		Name: "<.Service.Name>",
		Methods: map[string]<$thrift>.UnaryHandler{
			<range .Service.Functions><if not .OneWay>"<.ThriftName>": <$rpc>.WrapUnary(svc, h.<.Name>),<end>
		<end>},
		OnewayMethods: map[string]<$thrift>.OnewayHandler{
			<range .Service.Functions><if .OneWay>"<.ThriftName>": <$rpc>.WrapOneway(svc, h.<.Name>),<end>
		<end>},
	}
	return <$thrift>.BuildRegistrants(service, opts...)
}

type handler struct{ impl Interface }

<$service := .Service>
<$module := .Module>
<range .Service.Functions>
<$prefix := printf "%s.%s_%s_" (import $module.ImportPath) $service.Name .Name>

<$wire := import "go.uber.org/thriftrw/wire">

<if .OneWay>
func (h handler) <.Name>(
	ctx <$fx>.Context,
	reqMeta <$yarpc>.ReqMeta,
	body <$wire>.Value,
) error {
	var args <$prefix>Args
	if err := args.FromWire(body); err != nil {
		return err
	}

	return h.impl.<.Name>(ctx, reqMeta, <range .Arguments>args.<.Name>,<end>)
}
<else>
func (h handler) <.Name>(
	ctx <$fx>.Context,
	reqMeta <$yarpc>.ReqMeta,
	body <$wire>.Value,
) (<$thrift>.Response, error) {
	var args <$prefix>Args
	if err := args.FromWire(body); err != nil {
		return <$thrift>.Response{}, err
	}

	<if .ReturnType>
		success, resMeta, err := h.impl.<.Name>(ctx, reqMeta, <range .Arguments>args.<.Name>,<end>)
	<else>
		resMeta, err := h.impl.<.Name>(ctx, reqMeta, <range .Arguments>args.<.Name>,<end>)
	<end>

	hadError := err != nil
	result, err := <$prefix>Helper.WrapResponse(<if .ReturnType>success,<end> err)

	var response <$thrift>.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}
<end>
<end>
`
