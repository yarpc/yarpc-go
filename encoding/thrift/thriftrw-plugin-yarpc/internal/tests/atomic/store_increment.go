// Code generated by thriftrw v1.2.0
// @generated

package atomic

import (
	"fmt"
	"go.uber.org/thriftrw/wire"
	"strings"
)

type Store_Increment_Args struct {
	Key   *string `json:"key,omitempty"`
	Value *int64  `json:"value,omitempty"`
}

func (v *Store_Increment_Args) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Key != nil {
		w, err = wire.NewValueString(*(v.Key)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	if v.Value != nil {
		w, err = wire.NewValueI64(*(v.Value)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 2, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *Store_Increment_Args) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Key = &x
				if err != nil {
					return err
				}
			}
		case 2:
			if field.Value.Type() == wire.TI64 {
				var x int64
				x, err = field.Value.GetI64(), error(nil)
				v.Value = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *Store_Increment_Args) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [2]string
	i := 0
	if v.Key != nil {
		fields[i] = fmt.Sprintf("Key: %v", *(v.Key))
		i++
	}
	if v.Value != nil {
		fields[i] = fmt.Sprintf("Value: %v", *(v.Value))
		i++
	}
	return fmt.Sprintf("Store_Increment_Args{%v}", strings.Join(fields[:i], ", "))
}

func (v *Store_Increment_Args) Equals(rhs *Store_Increment_Args) bool {
	if !_String_EqualsPtr(v.Key, rhs.Key) {
		return false
	}
	if !_I64_EqualsPtr(v.Value, rhs.Value) {
		return false
	}
	return true
}

func (v *Store_Increment_Args) MethodName() string {
	return "increment"
}

func (v *Store_Increment_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

var Store_Increment_Helper = struct {
	Args           func(key *string, value *int64) *Store_Increment_Args
	IsException    func(error) bool
	WrapResponse   func(error) (*Store_Increment_Result, error)
	UnwrapResponse func(*Store_Increment_Result) error
}{}

func init() {
	Store_Increment_Helper.Args = func(key *string, value *int64) *Store_Increment_Args {
		return &Store_Increment_Args{Key: key, Value: value}
	}
	Store_Increment_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}
	Store_Increment_Helper.WrapResponse = func(err error) (*Store_Increment_Result, error) {
		if err == nil {
			return &Store_Increment_Result{}, nil
		}
		return nil, err
	}
	Store_Increment_Helper.UnwrapResponse = func(result *Store_Increment_Result) (err error) {
		return
	}
}

type Store_Increment_Result struct{}

func (v *Store_Increment_Result) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *Store_Increment_Result) FromWire(w wire.Value) error {
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}
	return nil
}

func (v *Store_Increment_Result) String() string {
	if v == nil {
		return "<nil>"
	}
	var fields [0]string
	i := 0
	return fmt.Sprintf("Store_Increment_Result{%v}", strings.Join(fields[:i], ", "))
}

func (v *Store_Increment_Result) Equals(rhs *Store_Increment_Result) bool {
	return true
}

func (v *Store_Increment_Result) MethodName() string {
	return "increment"
}

func (v *Store_Increment_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}
