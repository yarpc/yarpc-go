// Code generated by thriftrw v1.9.0. DO NOT EDIT.
// @generated

package atomic

import (
	"errors"
	"fmt"
	"go.uber.org/thriftrw/wire"
	"strings"
)

type CompareAndSwap struct {
	Key          string `json:"key,required"`
	CurrentValue int64  `json:"currentValue,required"`
	NewValue     int64  `json:"newValue,required"`
}

// ToWire translates a CompareAndSwap struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *CompareAndSwap) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueString(v.Key), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	w, err = wire.NewValueI64(v.CurrentValue), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++

	w, err = wire.NewValueI64(v.NewValue), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 3, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a CompareAndSwap struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a CompareAndSwap struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v CompareAndSwap
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *CompareAndSwap) FromWire(w wire.Value) error {
	var err error

	keyIsSet := false
	currentValueIsSet := false
	newValueIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Key, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				keyIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TI64 {
				v.CurrentValue, err = field.Value.GetI64(), error(nil)
				if err != nil {
					return err
				}
				currentValueIsSet = true
			}
		case 3:
			if field.Value.Type() == wire.TI64 {
				v.NewValue, err = field.Value.GetI64(), error(nil)
				if err != nil {
					return err
				}
				newValueIsSet = true
			}
		}
	}

	if !keyIsSet {
		return errors.New("field Key of CompareAndSwap is required")
	}

	if !currentValueIsSet {
		return errors.New("field CurrentValue of CompareAndSwap is required")
	}

	if !newValueIsSet {
		return errors.New("field NewValue of CompareAndSwap is required")
	}

	return nil
}

// String returns a readable string representation of a CompareAndSwap
// struct.
func (v *CompareAndSwap) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	fields[i] = fmt.Sprintf("Key: %v", v.Key)
	i++
	fields[i] = fmt.Sprintf("CurrentValue: %v", v.CurrentValue)
	i++
	fields[i] = fmt.Sprintf("NewValue: %v", v.NewValue)
	i++

	return fmt.Sprintf("CompareAndSwap{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this CompareAndSwap match the
// provided CompareAndSwap.
//
// This function performs a deep comparison.
func (v *CompareAndSwap) Equals(rhs *CompareAndSwap) bool {
	if !(v.Key == rhs.Key) {
		return false
	}
	if !(v.CurrentValue == rhs.CurrentValue) {
		return false
	}
	if !(v.NewValue == rhs.NewValue) {
		return false
	}

	return true
}

type IntegerMismatchError struct {
	ExpectedValue int64 `json:"expectedValue,required"`
	GotValue      int64 `json:"gotValue,required"`
}

// ToWire translates a IntegerMismatchError struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *IntegerMismatchError) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueI64(v.ExpectedValue), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	w, err = wire.NewValueI64(v.GotValue), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a IntegerMismatchError struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a IntegerMismatchError struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v IntegerMismatchError
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *IntegerMismatchError) FromWire(w wire.Value) error {
	var err error

	expectedValueIsSet := false
	gotValueIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TI64 {
				v.ExpectedValue, err = field.Value.GetI64(), error(nil)
				if err != nil {
					return err
				}
				expectedValueIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TI64 {
				v.GotValue, err = field.Value.GetI64(), error(nil)
				if err != nil {
					return err
				}
				gotValueIsSet = true
			}
		}
	}

	if !expectedValueIsSet {
		return errors.New("field ExpectedValue of IntegerMismatchError is required")
	}

	if !gotValueIsSet {
		return errors.New("field GotValue of IntegerMismatchError is required")
	}

	return nil
}

// String returns a readable string representation of a IntegerMismatchError
// struct.
func (v *IntegerMismatchError) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	fields[i] = fmt.Sprintf("ExpectedValue: %v", v.ExpectedValue)
	i++
	fields[i] = fmt.Sprintf("GotValue: %v", v.GotValue)
	i++

	return fmt.Sprintf("IntegerMismatchError{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this IntegerMismatchError match the
// provided IntegerMismatchError.
//
// This function performs a deep comparison.
func (v *IntegerMismatchError) Equals(rhs *IntegerMismatchError) bool {
	if !(v.ExpectedValue == rhs.ExpectedValue) {
		return false
	}
	if !(v.GotValue == rhs.GotValue) {
		return false
	}

	return true
}

func (v *IntegerMismatchError) Error() string {
	return v.String()
}

type KeyDoesNotExist struct {
	Key *string `json:"key,omitempty"`
}

// ToWire translates a KeyDoesNotExist struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *KeyDoesNotExist) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Key != nil {
		w, err = wire.NewValueString(*(v.Key)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a KeyDoesNotExist struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a KeyDoesNotExist struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v KeyDoesNotExist
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *KeyDoesNotExist) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.Key = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a KeyDoesNotExist
// struct.
func (v *KeyDoesNotExist) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Key != nil {
		fields[i] = fmt.Sprintf("Key: %v", *(v.Key))
		i++
	}

	return fmt.Sprintf("KeyDoesNotExist{%v}", strings.Join(fields[:i], ", "))
}

func _String_EqualsPtr(lhs, rhs *string) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this KeyDoesNotExist match the
// provided KeyDoesNotExist.
//
// This function performs a deep comparison.
func (v *KeyDoesNotExist) Equals(rhs *KeyDoesNotExist) bool {
	if !_String_EqualsPtr(v.Key, rhs.Key) {
		return false
	}

	return true
}

// GetKey returns the value of Key if it is set or its
// zero value if it is unset.
func (v *KeyDoesNotExist) GetKey() (o string) {
	if v.Key != nil {
		return *v.Key
	}

	return
}

func (v *KeyDoesNotExist) Error() string {
	return v.String()
}
