// Code generated by thriftrw-plugin-yarpc
// @generated

package storeclient

import (
	"context"
	"go.uber.org/thriftrw/wire"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/thrift"
	"go.uber.org/yarpc/encoding/thrift/thriftrw-plugin-yarpc/internal/tests/atomic"
	"go.uber.org/yarpc/encoding/thrift/thriftrw-plugin-yarpc/internal/tests/atomic/readonlystoreclient"
	"reflect"
)

// Interface is a client for the Store service.
type Interface interface {
	readonlystoreclient.Interface

	CompareAndSwap(
		ctx context.Context,
		request *atomic.CompareAndSwap,
		opts ...yarpc.CallOption,
	) error

	Forget(
		ctx context.Context,
		key *string,
		opts ...yarpc.CallOption,
	) (yarpc.Ack, error)

	Increment(
		ctx context.Context,
		key *string,
		value *int64,
		opts ...yarpc.CallOption,
	) error
}

// New builds a new client for the Store service.
//
// 	client := storeclient.New(dispatcher.ClientConfig("store"))
func New(c transport.ClientConfig, opts ...thrift.ClientOption) Interface {
	return client{
		c: thrift.New(thrift.Config{
			Service:      "Store",
			ClientConfig: c,
		}, opts...),
		Interface: readonlystoreclient.New(c, opts...),
	}
}

func init() {
	yarpc.RegisterClientBuilder(
		func(c transport.ClientConfig, f reflect.StructField) Interface {
			return New(c, thrift.ClientBuilderOptions(c, f)...)
		},
	)
}

type client struct {
	readonlystoreclient.Interface

	c thrift.Client
}

func (c client) CompareAndSwap(
	ctx context.Context,
	requestArg *atomic.CompareAndSwap,
	opts ...yarpc.CallOption,
) (err error) {

	args := atomic.Store_CompareAndSwap_Helper.Args(requestArg)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result atomic.Store_CompareAndSwap_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	err = atomic.Store_CompareAndSwap_Helper.UnwrapResponse(&result)
	return
}

func (c client) Forget(
	ctx context.Context,
	keyArg *string,
	opts ...yarpc.CallOption,
) (yarpc.Ack, error) {
	args := atomic.Store_Forget_Helper.Args(keyArg)
	return c.c.CallOneway(ctx, args, opts...)
}

func (c client) Increment(
	ctx context.Context,
	keyArg *string,
	valueArg *int64,
	opts ...yarpc.CallOption,
) (err error) {

	args := atomic.Store_Increment_Helper.Args(keyArg, valueArg)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result atomic.Store_Increment_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	err = atomic.Store_Increment_Helper.UnwrapResponse(&result)
	return
}
