// Code generated by thriftrw-plugin-yarpc
// @generated

package fooclient

import (
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/thrift"
	"go.uber.org/yarpc/encoding/thrift/thriftrw-plugin-yarpc/internal/tests/extends/nameclient"
	"reflect"
)

// Interface is a client for the Foo service.
type Interface interface {
	nameclient.Interface
}

// New builds a new client for the Foo service.
//
// 	client := fooclient.New(dispatcher.ClientConfig("foo"))
func New(c transport.ClientConfig, opts ...thrift.ClientOption) Interface {
	return client{
		c: thrift.New(thrift.Config{
			Service:      "Foo",
			ClientConfig: c,
		}, opts...),

		Interface: nameclient.New(
			c,
			append(
				opts,
				thrift.Named("Foo"),
			)...,
		),
	}
}

func init() {
	yarpc.RegisterClientBuilder(
		func(c transport.ClientConfig, f reflect.StructField) Interface {
			return New(c, thrift.ClientBuilderOptions(c, f)...)
		},
	)
}

type client struct {
	nameclient.Interface

	c thrift.Client
}
