// Code generated by thriftrw-plugin-yarpc
// @generated

package baseserviceclient

import (
	"context"
	"go.uber.org/thriftrw/wire"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/thrift"
	"go.uber.org/yarpc/encoding/thrift/thriftrw-plugin-yarpc/internal/tests/common"
	"reflect"
)

// Interface is a client for the BaseService service.
type Interface interface {
	Healthy(
		ctx context.Context,
		opts ...yarpc.CallOption,
	) (bool, error)
}

// New builds a new client for the BaseService service.
//
// 	client := baseserviceclient.New(dispatcher.ClientConfig("baseservice"))
func New(c transport.ClientConfig, opts ...thrift.ClientOption) Interface {
	return client{
		c: thrift.New(thrift.Config{
			Service:      "BaseService",
			ClientConfig: c,
		}, opts...),
	}
}

func init() {
	yarpc.RegisterClientBuilder(
		func(c transport.ClientConfig, f reflect.StructField) Interface {
			return New(c, thrift.ClientBuilderOptions(c, f)...)
		},
	)
}

type client struct {
	c thrift.Client
}

func (c client) Healthy(
	ctx context.Context,
	opts ...yarpc.CallOption,
) (success bool, err error) {

	args := common.BaseService_Healthy_Helper.Args()

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result common.BaseService_Healthy_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = common.BaseService_Healthy_Helper.UnwrapResponse(&result)
	return
}
