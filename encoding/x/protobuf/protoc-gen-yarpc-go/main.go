// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
Package main provides a protoc plugin that generates code for the protobuf encoding for YARPC.

To use:
	go get github.com/protobuf/golang/protoc-gen-go
	go get go.uber.org/yarpc/encoding/x/protobuf/protoc-gen-yarpc-go
	protoc --go_out=. foo.proto
	protoc --yarpc-go_out=. foo.proto
*/
package main

import (
	"fmt"
	"log"
	"text/template"

	"go.uber.org/yarpc/internal/protoplugin"
)

const tmpl = `
// Code generated by protoc-gen-yarpc-go
// source: {{.GetName}}
// DO NOT EDIT!

package {{.GoPackage.Name}}

import (
	{{range $i := .Imports}}{{if $i.Standard}}{{$i | printf "%s\n"}}{{end}}{{end}}

	{{range $i := .Imports}}{{if not $i.Standard}}{{$i | printf "%s\n"}}{{end}}{{end}}
)

{{range $service := .Services }}
// {{$service.GetName}}Client is the client-side interface for the {{$service.GetName}} service.
type {{$service.GetName}}Client interface {
	{{range $method := $service.UnaryMethods}}{{$method.GetName}}(context.Context, *{{$method.RequestType.DefaultGoType}}, ...yarpc.CallOption) (*{{$method.ResponseType.DefaultGoType}}, error)
	{{end}}
}

// New{{$service.GetName}}Client builds a new client for the {{$service.GetName}} service.
func New{{$service.GetName}}Client(clientConfig transport.ClientConfig) {{$service.GetName}}Client {
	return &_{{$service.GetName}}Caller{protobuf.NewClient("{{$service.GetName}}", clientConfig)}
}

// {{$service.GetName}}Server is the server-side interface for the {{$service.GetName}} service.
type {{$service.GetName}}Server interface {
	{{range $method := $service.UnaryMethods}}{{$method.GetName}}(context.Context, *{{$method.RequestType.DefaultGoType}}) (*{{$method.ResponseType.DefaultGoType}}, error)
	{{end}}
}

// Build{{$service.GetName}}Procedures prepares an implementation of the {{$service.GetName}} service for registration.
func Build{{$service.GetName}}Procedures(server {{$service.GetName}}Server) []transport.Procedure {
	handler := &_{{$service.GetName}}Handler{server}
	return protobuf.BuildProcedures(
		"{{$service.GetName}}",
		map[string]transport.UnaryHandler{
		{{range $method := $service.UnaryMethods}}"{{$method.GetName}}": protobuf.NewUnaryHandler(handler.{{$method.GetName}}, new{{$service.GetName}}_{{$method.GetName}}Request),
		{{end}}
		},
	)
}

// ***** all code below is private *****

type _{{$service.GetName}}Caller struct {
	client protobuf.Client
}

{{range $method := $service.UnaryMethods}}
func (c *_{{$service.GetName}}Caller) {{$method.GetName}}(ctx context.Context, request *{{$method.RequestType.DefaultGoType}}, options ...yarpc.CallOption) (*{{$method.ResponseType.DefaultGoType}}, error) {
	responseMessage, err := c.client.Call(ctx, "{{$method.GetName}}", request, new{{$service.GetName}}_{{$method.GetName}}Response, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*{{$method.ResponseType.DefaultGoType}})
	if !ok {
		return nil, protobuf.CastError(empty{{$service.GetName}}_{{$method.GetName}}Response, responseMessage)
	}
	return response, err
}
{{end}}

type _{{$service.GetName}}Handler struct {
	server {{$service.GetName}}Server
}

{{range $method := $service.UnaryMethods}}
func (h *_{{$service.GetName}}Handler) {{$method.GetName}}(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *{{$method.RequestType.DefaultGoType}}
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*{{$method.RequestType.DefaultGoType}})
		if !ok {
			return nil, protobuf.CastError(empty{{$service.GetName}}_{{$method.GetName}}Request, requestMessage)
		}
	}
	return h.server.{{$method.GetName}}(ctx, request)
}
{{end}}

{{range $method := $service.UnaryMethods}}
func new{{$service.GetName}}_{{$method.GetName}}Request() proto.Message {
	return &{{$method.RequestType.DefaultGoType}}{}
}

func new{{$service.GetName}}_{{$method.GetName}}Response() proto.Message {
	return &{{$method.ResponseType.DefaultGoType}}{}
}
{{end}}
var (
{{range $method := $service.UnaryMethods}}
	empty{{$service.GetName}}_{{$method.GetName}}Request = &{{$method.RequestType.DefaultGoType}}{}
	empty{{$service.GetName}}_{{$method.GetName}}Response = &{{$method.ResponseType.DefaultGoType}}{}{{end}}
)
{{end}}
`

func main() {
	if err := protoplugin.Run(
		template.Must(template.New("tmpl").Parse(tmpl)),
		checkTemplateInfo,
		[]string{
			"context",
			"github.com/golang/protobuf/proto",
			"go.uber.org/yarpc",
			"go.uber.org/yarpc/api/transport",
			"go.uber.org/yarpc/encoding/x/protobuf",
		},
		"pb.yarpc.go",
	); err != nil {
		log.Fatal(err)
	}
}

func checkTemplateInfo(templateInfo *protoplugin.TemplateInfo) error {
	for _, service := range templateInfo.Services {
		if len(service.StreamingMethods()) > 0 {
			return fmt.Errorf("service %s contains streaming methods", service.GetName())
		}
	}
	return nil
}
