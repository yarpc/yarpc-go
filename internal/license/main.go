// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

const (
	// how many lines to check for an existing copyright
	// this logic is not great and we should probably do something else
	// but this was copied from the python script
	copyrightLineLimit = 5
	headerPrefix       = "// Copyright (c)"
	headerFmtString    = headerPrefix + " %d Uber Technologies, Inc."
	licenseFmtString   = headerFmtString + `
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.`
)

var (
	defaultFileMode  os.FileMode = 0644
	lineSkipPrefixes             = []string{
		"// Code generated by",
		"// @generated",
	}
	errHelp = fmt.Errorf("Usage: %s GO_FILE...", os.Args[0])
)

func main() {
	if err := do(); err != nil {
		fmt.Fprintln(os.Stderr, err.Error())
		os.Exit(1)
	}
	os.Exit(0)
}

func do() error {
	if len(os.Args) < 2 {
		return errHelp
	}
	for _, filePath := range os.Args[1:] {
		if filepath.Ext(filePath) == ".go" {
			if err := updateFile(filePath); err != nil {
				return err
			}
		}
	}
	return nil
}

func updateFile(filePath string) error {
	data, err := ioutil.ReadFile(filePath)
	if err != nil {
		return err
	}
	newData := []byte(strings.Join(updateLines(strings.Split(string(data), "\n")), "\n"))
	if !bytes.Equal(data, newData) {
		// we could do something more complicated so that we do not
		// need defaultFileMode, but in this case it should never
		// actually be used to create a file since we know the file
		// already exists, and it's easier to use the ReadFile/WriteFile
		// logic as it is right now, and since this is just a generation
		// program, this should be acceptable
		return ioutil.WriteFile(filePath, newData, defaultFileMode)
	}
	return nil
}

// a value in the returned slice may contain newlines itself
func updateLines(lines []string) []string {
	for i, line := range lines {
		if i >= copyrightLineLimit {
			break
		}
		if strings.HasPrefix(line, headerPrefix) {
			lines[i] = headerString()
			return lines
		}
	}
	return addToLines(lines)
}

// a value in the returned slice may contain newlines itself
func addToLines(lines []string) []string {
	i := 0
	for len(lines) > i && lineContainsSkipPrefix(lines[i]) {
		i++
	}
	if i == 0 {
		return append([]string{licenseString() + "\n"}, lines...)
	}
	return append(lines[0:i], append([]string{"\n" + licenseString()}, lines[i:]...)...)
}

func lineContainsSkipPrefix(line string) bool {
	for _, skipPrefix := range lineSkipPrefixes {
		if strings.HasPrefix(line, skipPrefix) {
			return true
		}
	}
	return false
}

func headerString() string {
	return fmt.Sprintf(headerFmtString, year())
}

func licenseString() string {
	return fmt.Sprintf(licenseFmtString, year())
}

func year() int {
	return time.Now().UTC().Year()
}
