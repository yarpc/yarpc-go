// Code generated by thriftrw-plugin-yarpc
// @generated

// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package thrifttestserver

import (
	"context"
	"go.uber.org/thriftrw/wire"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/thrift"
	"go.uber.org/yarpc/internal/crossdock/thrift/gauntlet"
)

// Interface is the server-side interface for the ThriftTest service.
type Interface interface {
	TestBinary(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		Thing []byte,
	) ([]byte, yarpc.ResMeta, error)

	TestByte(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		Thing *int8,
	) (int8, yarpc.ResMeta, error)

	TestDouble(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		Thing *float64,
	) (float64, yarpc.ResMeta, error)

	TestEnum(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		Thing *gauntlet.Numberz,
	) (gauntlet.Numberz, yarpc.ResMeta, error)

	TestException(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		Arg *string,
	) (yarpc.ResMeta, error)

	TestI32(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		Thing *int32,
	) (int32, yarpc.ResMeta, error)

	TestI64(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		Thing *int64,
	) (int64, yarpc.ResMeta, error)

	TestInsanity(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		Argument *gauntlet.Insanity,
	) (map[gauntlet.UserId]map[gauntlet.Numberz]*gauntlet.Insanity, yarpc.ResMeta, error)

	TestList(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		Thing []int32,
	) ([]int32, yarpc.ResMeta, error)

	TestMap(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		Thing map[int32]int32,
	) (map[int32]int32, yarpc.ResMeta, error)

	TestMapMap(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		Hello *int32,
	) (map[int32]map[int32]int32, yarpc.ResMeta, error)

	TestMulti(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		Arg0 *int8,
		Arg1 *int32,
		Arg2 *int64,
		Arg3 map[int16]string,
		Arg4 *gauntlet.Numberz,
		Arg5 *gauntlet.UserId,
	) (*gauntlet.Xtruct, yarpc.ResMeta, error)

	TestMultiException(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		Arg0 *string,
		Arg1 *string,
	) (*gauntlet.Xtruct, yarpc.ResMeta, error)

	TestNest(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		Thing *gauntlet.Xtruct2,
	) (*gauntlet.Xtruct2, yarpc.ResMeta, error)

	TestOneway(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		SecondsToSleep *int32,
	) error

	TestSet(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		Thing map[int32]struct{},
	) (map[int32]struct{}, yarpc.ResMeta, error)

	TestString(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		Thing *string,
	) (string, yarpc.ResMeta, error)

	TestStringMap(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		Thing map[string]string,
	) (map[string]string, yarpc.ResMeta, error)

	TestStruct(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		Thing *gauntlet.Xtruct,
	) (*gauntlet.Xtruct, yarpc.ResMeta, error)

	TestTypedef(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		Thing *gauntlet.UserId,
	) (gauntlet.UserId, yarpc.ResMeta, error)

	TestVoid(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
	) (yarpc.ResMeta, error)
}

// New prepares an implementation of the ThriftTest service for
// registration.
//
// 	handler := ThriftTestHandler{}
// 	dispatcher.Register(thrifttestserver.New(handler))
func New(impl Interface, opts ...thrift.RegisterOption) []transport.Procedure {
	h := handler{impl}
	service := thrift.Service{
		Name: "ThriftTest",
		Methods: map[string]thrift.UnaryHandler{
			"testBinary":         thrift.UnaryHandlerFunc(h.TestBinary),
			"testByte":           thrift.UnaryHandlerFunc(h.TestByte),
			"testDouble":         thrift.UnaryHandlerFunc(h.TestDouble),
			"testEnum":           thrift.UnaryHandlerFunc(h.TestEnum),
			"testException":      thrift.UnaryHandlerFunc(h.TestException),
			"testI32":            thrift.UnaryHandlerFunc(h.TestI32),
			"testI64":            thrift.UnaryHandlerFunc(h.TestI64),
			"testInsanity":       thrift.UnaryHandlerFunc(h.TestInsanity),
			"testList":           thrift.UnaryHandlerFunc(h.TestList),
			"testMap":            thrift.UnaryHandlerFunc(h.TestMap),
			"testMapMap":         thrift.UnaryHandlerFunc(h.TestMapMap),
			"testMulti":          thrift.UnaryHandlerFunc(h.TestMulti),
			"testMultiException": thrift.UnaryHandlerFunc(h.TestMultiException),
			"testNest":           thrift.UnaryHandlerFunc(h.TestNest),

			"testSet":       thrift.UnaryHandlerFunc(h.TestSet),
			"testString":    thrift.UnaryHandlerFunc(h.TestString),
			"testStringMap": thrift.UnaryHandlerFunc(h.TestStringMap),
			"testStruct":    thrift.UnaryHandlerFunc(h.TestStruct),
			"testTypedef":   thrift.UnaryHandlerFunc(h.TestTypedef),
			"testVoid":      thrift.UnaryHandlerFunc(h.TestVoid),
		},
		OnewayMethods: map[string]thrift.OnewayHandler{

			"testOneway": thrift.OnewayHandlerFunc(h.TestOneway),
		},
	}
	return thrift.BuildProcedures(service, opts...)
}

type handler struct{ impl Interface }

func (h handler) TestBinary(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) (thrift.Response, error) {
	var args gauntlet.ThriftTest_TestBinary_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, resMeta, err := h.impl.TestBinary(ctx, reqMeta, args.Thing)

	hadError := err != nil
	result, err := gauntlet.ThriftTest_TestBinary_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}

func (h handler) TestByte(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) (thrift.Response, error) {
	var args gauntlet.ThriftTest_TestByte_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, resMeta, err := h.impl.TestByte(ctx, reqMeta, args.Thing)

	hadError := err != nil
	result, err := gauntlet.ThriftTest_TestByte_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}

func (h handler) TestDouble(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) (thrift.Response, error) {
	var args gauntlet.ThriftTest_TestDouble_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, resMeta, err := h.impl.TestDouble(ctx, reqMeta, args.Thing)

	hadError := err != nil
	result, err := gauntlet.ThriftTest_TestDouble_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}

func (h handler) TestEnum(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) (thrift.Response, error) {
	var args gauntlet.ThriftTest_TestEnum_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, resMeta, err := h.impl.TestEnum(ctx, reqMeta, args.Thing)

	hadError := err != nil
	result, err := gauntlet.ThriftTest_TestEnum_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}

func (h handler) TestException(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) (thrift.Response, error) {
	var args gauntlet.ThriftTest_TestException_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	resMeta, err := h.impl.TestException(ctx, reqMeta, args.Arg)

	hadError := err != nil
	result, err := gauntlet.ThriftTest_TestException_Helper.WrapResponse(err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}

func (h handler) TestI32(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) (thrift.Response, error) {
	var args gauntlet.ThriftTest_TestI32_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, resMeta, err := h.impl.TestI32(ctx, reqMeta, args.Thing)

	hadError := err != nil
	result, err := gauntlet.ThriftTest_TestI32_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}

func (h handler) TestI64(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) (thrift.Response, error) {
	var args gauntlet.ThriftTest_TestI64_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, resMeta, err := h.impl.TestI64(ctx, reqMeta, args.Thing)

	hadError := err != nil
	result, err := gauntlet.ThriftTest_TestI64_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}

func (h handler) TestInsanity(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) (thrift.Response, error) {
	var args gauntlet.ThriftTest_TestInsanity_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, resMeta, err := h.impl.TestInsanity(ctx, reqMeta, args.Argument)

	hadError := err != nil
	result, err := gauntlet.ThriftTest_TestInsanity_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}

func (h handler) TestList(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) (thrift.Response, error) {
	var args gauntlet.ThriftTest_TestList_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, resMeta, err := h.impl.TestList(ctx, reqMeta, args.Thing)

	hadError := err != nil
	result, err := gauntlet.ThriftTest_TestList_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}

func (h handler) TestMap(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) (thrift.Response, error) {
	var args gauntlet.ThriftTest_TestMap_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, resMeta, err := h.impl.TestMap(ctx, reqMeta, args.Thing)

	hadError := err != nil
	result, err := gauntlet.ThriftTest_TestMap_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}

func (h handler) TestMapMap(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) (thrift.Response, error) {
	var args gauntlet.ThriftTest_TestMapMap_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, resMeta, err := h.impl.TestMapMap(ctx, reqMeta, args.Hello)

	hadError := err != nil
	result, err := gauntlet.ThriftTest_TestMapMap_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}

func (h handler) TestMulti(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) (thrift.Response, error) {
	var args gauntlet.ThriftTest_TestMulti_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, resMeta, err := h.impl.TestMulti(ctx, reqMeta, args.Arg0, args.Arg1, args.Arg2, args.Arg3, args.Arg4, args.Arg5)

	hadError := err != nil
	result, err := gauntlet.ThriftTest_TestMulti_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}

func (h handler) TestMultiException(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) (thrift.Response, error) {
	var args gauntlet.ThriftTest_TestMultiException_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, resMeta, err := h.impl.TestMultiException(ctx, reqMeta, args.Arg0, args.Arg1)

	hadError := err != nil
	result, err := gauntlet.ThriftTest_TestMultiException_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}

func (h handler) TestNest(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) (thrift.Response, error) {
	var args gauntlet.ThriftTest_TestNest_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, resMeta, err := h.impl.TestNest(ctx, reqMeta, args.Thing)

	hadError := err != nil
	result, err := gauntlet.ThriftTest_TestNest_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}

func (h handler) TestOneway(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) error {
	var args gauntlet.ThriftTest_TestOneway_Args
	if err := args.FromWire(body); err != nil {
		return err
	}

	return h.impl.TestOneway(ctx, reqMeta, args.SecondsToSleep)
}

func (h handler) TestSet(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) (thrift.Response, error) {
	var args gauntlet.ThriftTest_TestSet_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, resMeta, err := h.impl.TestSet(ctx, reqMeta, args.Thing)

	hadError := err != nil
	result, err := gauntlet.ThriftTest_TestSet_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}

func (h handler) TestString(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) (thrift.Response, error) {
	var args gauntlet.ThriftTest_TestString_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, resMeta, err := h.impl.TestString(ctx, reqMeta, args.Thing)

	hadError := err != nil
	result, err := gauntlet.ThriftTest_TestString_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}

func (h handler) TestStringMap(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) (thrift.Response, error) {
	var args gauntlet.ThriftTest_TestStringMap_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, resMeta, err := h.impl.TestStringMap(ctx, reqMeta, args.Thing)

	hadError := err != nil
	result, err := gauntlet.ThriftTest_TestStringMap_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}

func (h handler) TestStruct(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) (thrift.Response, error) {
	var args gauntlet.ThriftTest_TestStruct_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, resMeta, err := h.impl.TestStruct(ctx, reqMeta, args.Thing)

	hadError := err != nil
	result, err := gauntlet.ThriftTest_TestStruct_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}

func (h handler) TestTypedef(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) (thrift.Response, error) {
	var args gauntlet.ThriftTest_TestTypedef_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, resMeta, err := h.impl.TestTypedef(ctx, reqMeta, args.Thing)

	hadError := err != nil
	result, err := gauntlet.ThriftTest_TestTypedef_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}

func (h handler) TestVoid(
	ctx context.Context,
	reqMeta yarpc.ReqMeta,
	body wire.Value,
) (thrift.Response, error) {
	var args gauntlet.ThriftTest_TestVoid_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	resMeta, err := h.impl.TestVoid(ctx, reqMeta)

	hadError := err != nil
	result, err := gauntlet.ThriftTest_TestVoid_Helper.WrapResponse(err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}
