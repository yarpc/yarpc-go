// Code generated by thriftrw v1.9.0. DO NOT EDIT.
// @generated

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package echobinary

import (
	"bytes"
	"errors"
	"fmt"
	"go.uber.org/thriftrw/wire"
	"strings"
)

type EchoBinaryRequest struct {
	Message []byte `json:"message,required"`
	Count   int16  `json:"count,required"`
}

// ToWire translates a EchoBinaryRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *EchoBinaryRequest) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Message == nil {
		return w, errors.New("field Message of EchoBinaryRequest is required")
	}
	w, err = wire.NewValueBinary(v.Message), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	w, err = wire.NewValueI16(v.Count), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a EchoBinaryRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a EchoBinaryRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v EchoBinaryRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *EchoBinaryRequest) FromWire(w wire.Value) error {
	var err error

	messageIsSet := false
	countIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Message, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
				messageIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TI16 {
				v.Count, err = field.Value.GetI16(), error(nil)
				if err != nil {
					return err
				}
				countIsSet = true
			}
		}
	}

	if !messageIsSet {
		return errors.New("field Message of EchoBinaryRequest is required")
	}

	if !countIsSet {
		return errors.New("field Count of EchoBinaryRequest is required")
	}

	return nil
}

// String returns a readable string representation of a EchoBinaryRequest
// struct.
func (v *EchoBinaryRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	fields[i] = fmt.Sprintf("Message: %v", v.Message)
	i++
	fields[i] = fmt.Sprintf("Count: %v", v.Count)
	i++

	return fmt.Sprintf("EchoBinaryRequest{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this EchoBinaryRequest match the
// provided EchoBinaryRequest.
//
// This function performs a deep comparison.
func (v *EchoBinaryRequest) Equals(rhs *EchoBinaryRequest) bool {
	if !bytes.Equal(v.Message, rhs.Message) {
		return false
	}
	if !(v.Count == rhs.Count) {
		return false
	}

	return true
}

type EchoBinaryResponse struct {
	Message []byte `json:"message,required"`
	Count   int16  `json:"count,required"`
}

// ToWire translates a EchoBinaryResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *EchoBinaryResponse) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Message == nil {
		return w, errors.New("field Message of EchoBinaryResponse is required")
	}
	w, err = wire.NewValueBinary(v.Message), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	w, err = wire.NewValueI16(v.Count), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a EchoBinaryResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a EchoBinaryResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v EchoBinaryResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *EchoBinaryResponse) FromWire(w wire.Value) error {
	var err error

	messageIsSet := false
	countIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Message, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
				messageIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TI16 {
				v.Count, err = field.Value.GetI16(), error(nil)
				if err != nil {
					return err
				}
				countIsSet = true
			}
		}
	}

	if !messageIsSet {
		return errors.New("field Message of EchoBinaryResponse is required")
	}

	if !countIsSet {
		return errors.New("field Count of EchoBinaryResponse is required")
	}

	return nil
}

// String returns a readable string representation of a EchoBinaryResponse
// struct.
func (v *EchoBinaryResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	fields[i] = fmt.Sprintf("Message: %v", v.Message)
	i++
	fields[i] = fmt.Sprintf("Count: %v", v.Count)
	i++

	return fmt.Sprintf("EchoBinaryResponse{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this EchoBinaryResponse match the
// provided EchoBinaryResponse.
//
// This function performs a deep comparison.
func (v *EchoBinaryResponse) Equals(rhs *EchoBinaryResponse) bool {
	if !bytes.Equal(v.Message, rhs.Message) {
		return false
	}
	if !(v.Count == rhs.Count) {
		return false
	}

	return true
}
