// Code generated by protoc-gen-yarpc-go
// source: internal/examples/streaming/stream.proto
// DO NOT EDIT!

// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package streaming

import (
	"context"
	"io/ioutil"
	"reflect"

	"github.com/gogo/protobuf/proto"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/protobuf"
)

var _ = ioutil.NopCloser

// HelloYARPCClient is the YARPC client-side interface for the Hello service.
type HelloYARPCClient interface {
	HelloUnary(context.Context, *HelloRequest, ...yarpc.CallOption) (*HelloResponse, error)
	HelloOutStream(context.Context, ...yarpc.CallOption) (HelloServiceHelloOutStreamYARPCClient, error)
	HelloInStream(context.Context, *HelloRequest, ...yarpc.CallOption) (HelloServiceHelloInStreamYARPCClient, error)
	HelloThere(context.Context, ...yarpc.CallOption) (HelloServiceHelloThereYARPCClient, error)
}

// HelloServiceHelloOutStreamYARPCClient sends HelloRequests and receives the single HelloResponse when sending is done.
type HelloServiceHelloOutStreamYARPCClient interface {
	Context() context.Context
	RequestMeta() *transport.RequestMeta
	ResponseMeta() *transport.ResponseMeta
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
}

// HelloServiceHelloInStreamYARPCClient receives HelloResponses, returning io.EOF when the stream is complete.
type HelloServiceHelloInStreamYARPCClient interface {
	Context() context.Context
	RequestMeta() *transport.RequestMeta
	ResponseMeta() *transport.ResponseMeta
	Recv() (*HelloResponse, error)
}

// HelloServiceHelloThereYARPCClient sends HelloRequests and receives HelloResponses, returning io.EOF when the stream is complete.
type HelloServiceHelloThereYARPCClient interface {
	Context() context.Context
	RequestMeta() *transport.RequestMeta
	ResponseMeta() *transport.ResponseMeta
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	CloseSend() error
}

// NewHelloYARPCClient builds a new YARPC client for the Hello service.
func NewHelloYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) HelloYARPCClient {
	return &_HelloYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "uber.yarpc.internal.examples.streaming.Hello",
			ClientConfig: clientConfig,
			Options:      options,
		},
	)}
}

// HelloYARPCServer is the YARPC server-side interface for the Hello service.
type HelloYARPCServer interface {
	HelloUnary(context.Context, *HelloRequest) (*HelloResponse, error)
	HelloOutStream(HelloServiceHelloOutStreamYARPCServer) (*HelloResponse, error)
	HelloInStream(*HelloRequest, HelloServiceHelloInStreamYARPCServer) error
	HelloThere(HelloServiceHelloThereYARPCServer) error
}

// HelloServiceHelloOutStreamYARPCServer receives HelloRequests.
type HelloServiceHelloOutStreamYARPCServer interface {
	Context() context.Context
	RequestMeta() *transport.RequestMeta
	SetResponseMeta(*transport.ResponseMeta)
	Recv() (*HelloRequest, error)
}

// HelloServiceHelloInStreamYARPCServer sends HelloResponses.
type HelloServiceHelloInStreamYARPCServer interface {
	Context() context.Context
	RequestMeta() *transport.RequestMeta
	SetResponseMeta(*transport.ResponseMeta)
	Send(*HelloResponse) error
}

// HelloServiceHelloThereYARPCServer receives HelloRequests and sends HelloResponse.
type HelloServiceHelloThereYARPCServer interface {
	Context() context.Context
	RequestMeta() *transport.RequestMeta
	SetResponseMeta(*transport.ResponseMeta)
	Recv() (*HelloRequest, error)
	Send(*HelloResponse) error
}

// BuildHelloYARPCProcedures prepares an implementation of the Hello service for YARPC registration.
func BuildHelloYARPCProcedures(server HelloYARPCServer) []transport.Procedure {
	handler := &_HelloYARPCHandler{server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "uber.yarpc.internal.examples.streaming.Hello",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "HelloUnary",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:     handler.HelloUnary,
							NewRequest: newHelloServiceHelloUnaryYARPCRequest,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{
				{
					MethodName: "HelloThere",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.HelloThere,
						},
					),
				},

				{
					MethodName: "HelloInStream",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.HelloInStream,
						},
					),
				},

				{
					MethodName: "HelloOutStream",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.HelloOutStream,
						},
					),
				},
			},
		},
	)
}

type _HelloYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_HelloYARPCCaller) HelloUnary(ctx context.Context, request *HelloRequest, options ...yarpc.CallOption) (*HelloResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "HelloUnary", request, newHelloServiceHelloUnaryYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHelloServiceHelloUnaryYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HelloYARPCCaller) HelloOutStream(ctx context.Context, options ...yarpc.CallOption) (HelloServiceHelloOutStreamYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "HelloOutStream", options...)
	if err != nil {
		return nil, err
	}
	return &_HelloServiceHelloOutStreamYARPCClient{stream: stream}, nil
}

func (c *_HelloYARPCCaller) HelloInStream(ctx context.Context, request *HelloRequest, options ...yarpc.CallOption) (HelloServiceHelloInStreamYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "HelloInStream", options...)
	if err != nil {
		return nil, err
	}
	readCloser, err := protobuf.ToReader(request, stream.RequestMeta().Encoding)
	if err != nil {
		return nil, err
	}
	if err := stream.SendMsg(&transport.StreamMessage{ReadCloser: readCloser}); err != nil {
		return nil, err
	}
	return &_HelloServiceHelloInStreamYARPCClient{stream: stream}, nil
}

func (c *_HelloYARPCCaller) HelloThere(ctx context.Context, options ...yarpc.CallOption) (HelloServiceHelloThereYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "HelloThere", options...)
	if err != nil {
		return nil, err
	}
	return &_HelloServiceHelloThereYARPCClient{stream: stream}, nil
}

type _HelloYARPCHandler struct {
	server HelloYARPCServer
}

func (h *_HelloYARPCHandler) HelloUnary(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *HelloRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*HelloRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHelloServiceHelloUnaryYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.HelloUnary(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HelloYARPCHandler) HelloOutStream(serverStream transport.ServerStream) error {
	response, err := h.server.HelloOutStream(&_HelloServiceHelloOutStreamYARPCServer{serverStream: serverStream})
	if err != nil {
		return err
	}
	readCloser, err := protobuf.ToReader(response, serverStream.RequestMeta().Encoding)
	if err != nil {
		return err
	}
	return serverStream.SendMsg(&transport.StreamMessage{ReadCloser: readCloser})
}

func (h *_HelloYARPCHandler) HelloInStream(serverStream transport.ServerStream) error {
	src, err := serverStream.RecvMsg()
	if err != nil {
		return err
	}
	requestMessage, err := protobuf.ToProtoMessage(src, serverStream.RequestMeta().Encoding, newHelloServiceHelloInStreamYARPCRequest)
	if requestMessage == nil {
		return err
	}
	request, ok := requestMessage.(*HelloRequest)
	if !ok {
		return protobuf.CastError(emptyHelloServiceHelloInStreamYARPCRequest, requestMessage)
	}
	return h.server.HelloInStream(request, &_HelloServiceHelloInStreamYARPCServer{serverStream: serverStream})
}

func (h *_HelloYARPCHandler) HelloThere(serverStream transport.ServerStream) error {
	return h.server.HelloThere(&_HelloServiceHelloThereYARPCServer{serverStream: serverStream})
}

type _HelloServiceHelloOutStreamYARPCClient struct {
	stream transport.ClientStream
}

func (c *_HelloServiceHelloOutStreamYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_HelloServiceHelloOutStreamYARPCClient) RequestMeta() *transport.RequestMeta {
	return c.stream.RequestMeta()
}

func (c *_HelloServiceHelloOutStreamYARPCClient) ResponseMeta() *transport.ResponseMeta {
	return c.stream.ResponseMeta()
}

func (c *_HelloServiceHelloOutStreamYARPCClient) Send(request *HelloRequest) error {
	readCloser, err := protobuf.ToReader(request, c.stream.RequestMeta().Encoding)
	if err != nil {
		return err
	}
	return c.stream.SendMsg(&transport.StreamMessage{ReadCloser: readCloser})
}

func (c *_HelloServiceHelloOutStreamYARPCClient) CloseAndRecv() (*HelloResponse, error) {
	if err := c.stream.Close(); err != nil {
		return nil, err
	}
	src, err := c.stream.RecvMsg()
	if err != nil {
		return nil, err
	}
	responseMessage, err := protobuf.ToProtoMessage(src, c.stream.RequestMeta().Encoding, newHelloServiceHelloOutStreamYARPCResponse)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHelloServiceHelloOutStreamYARPCResponse, responseMessage)
	}
	return response, err
}

type _HelloServiceHelloInStreamYARPCClient struct {
	stream transport.ClientStream
}

func (c *_HelloServiceHelloInStreamYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_HelloServiceHelloInStreamYARPCClient) RequestMeta() *transport.RequestMeta {
	return c.stream.RequestMeta()
}

func (c *_HelloServiceHelloInStreamYARPCClient) ResponseMeta() *transport.ResponseMeta {
	return c.stream.ResponseMeta()
}

func (c *_HelloServiceHelloInStreamYARPCClient) Recv() (*HelloResponse, error) {
	src, err := c.stream.RecvMsg()
	if err != nil {
		return nil, err
	}
	responseMessage, err := protobuf.ToProtoMessage(src, c.stream.RequestMeta().Encoding, newHelloServiceHelloInStreamYARPCResponse)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHelloServiceHelloInStreamYARPCResponse, responseMessage)
	}
	return response, err
}

type _HelloServiceHelloThereYARPCClient struct {
	stream transport.ClientStream
}

func (c *_HelloServiceHelloThereYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_HelloServiceHelloThereYARPCClient) RequestMeta() *transport.RequestMeta {
	return c.stream.RequestMeta()
}

func (c *_HelloServiceHelloThereYARPCClient) ResponseMeta() *transport.ResponseMeta {
	return c.stream.ResponseMeta()
}

func (c *_HelloServiceHelloThereYARPCClient) Send(request *HelloRequest) error {
	readCloser, err := protobuf.ToReader(request, c.stream.RequestMeta().Encoding)
	if err != nil {
		return err
	}
	return c.stream.SendMsg(&transport.StreamMessage{ReadCloser: readCloser})
}

func (c *_HelloServiceHelloThereYARPCClient) Recv() (*HelloResponse, error) {
	src, err := c.stream.RecvMsg()
	if err != nil {
		return nil, err
	}
	responseMessage, err := protobuf.ToProtoMessage(src, c.stream.RequestMeta().Encoding, newHelloServiceHelloThereYARPCResponse)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHelloServiceHelloThereYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HelloServiceHelloThereYARPCClient) CloseSend() error {
	return c.stream.Close()
}

type _HelloServiceHelloOutStreamYARPCServer struct {
	serverStream transport.ServerStream
}

func (s *_HelloServiceHelloOutStreamYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_HelloServiceHelloOutStreamYARPCServer) RequestMeta() *transport.RequestMeta {
	return s.serverStream.RequestMeta()
}

func (s *_HelloServiceHelloOutStreamYARPCServer) SetResponseMeta(responseMeta *transport.ResponseMeta) {
	s.serverStream.SetResponseMeta(responseMeta)
}

func (s *_HelloServiceHelloOutStreamYARPCServer) Recv() (*HelloRequest, error) {
	src, err := s.serverStream.RecvMsg()
	if err != nil {
		return nil, err
	}
	responseMessage, err := protobuf.ToProtoMessage(src, s.serverStream.RequestMeta().Encoding, newHelloServiceHelloOutStreamYARPCRequest)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloRequest)
	if !ok {
		return nil, protobuf.CastError(emptyHelloServiceHelloOutStreamYARPCRequest, responseMessage)
	}
	return response, err
}

type _HelloServiceHelloInStreamYARPCServer struct {
	serverStream transport.ServerStream
}

func (s *_HelloServiceHelloInStreamYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_HelloServiceHelloInStreamYARPCServer) RequestMeta() *transport.RequestMeta {
	return s.serverStream.RequestMeta()
}

func (s *_HelloServiceHelloInStreamYARPCServer) SetResponseMeta(responseMeta *transport.ResponseMeta) {
	s.serverStream.SetResponseMeta(responseMeta)
}

func (s *_HelloServiceHelloInStreamYARPCServer) Send(response *HelloResponse) error {
	readCloser, err := protobuf.ToReader(response, s.serverStream.RequestMeta().Encoding)
	if err != nil {
		return err
	}
	return s.serverStream.SendMsg(&transport.StreamMessage{ReadCloser: readCloser})
}

type _HelloServiceHelloThereYARPCServer struct {
	serverStream transport.ServerStream
}

func (s *_HelloServiceHelloThereYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_HelloServiceHelloThereYARPCServer) RequestMeta() *transport.RequestMeta {
	return s.serverStream.RequestMeta()
}

func (s *_HelloServiceHelloThereYARPCServer) SetResponseMeta(responseMeta *transport.ResponseMeta) {
	s.serverStream.SetResponseMeta(responseMeta)
}

func (s *_HelloServiceHelloThereYARPCServer) Recv() (*HelloRequest, error) {
	src, err := s.serverStream.RecvMsg()
	if err != nil {
		return nil, err
	}
	responseMessage, err := protobuf.ToProtoMessage(src, s.serverStream.RequestMeta().Encoding, newHelloServiceHelloThereYARPCRequest)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*HelloRequest)
	if !ok {
		return nil, protobuf.CastError(emptyHelloServiceHelloThereYARPCRequest, responseMessage)
	}
	return response, err
}

func (s *_HelloServiceHelloThereYARPCServer) Send(response *HelloResponse) error {
	readCloser, err := protobuf.ToReader(response, s.serverStream.RequestMeta().Encoding)
	if err != nil {
		return err
	}
	return s.serverStream.SendMsg(&transport.StreamMessage{ReadCloser: readCloser})
}

func newHelloServiceHelloUnaryYARPCRequest() proto.Message {
	return &HelloRequest{}
}

func newHelloServiceHelloUnaryYARPCResponse() proto.Message {
	return &HelloResponse{}
}

func newHelloServiceHelloThereYARPCRequest() proto.Message {
	return &HelloRequest{}
}

func newHelloServiceHelloThereYARPCResponse() proto.Message {
	return &HelloResponse{}
}

func newHelloServiceHelloOutStreamYARPCRequest() proto.Message {
	return &HelloRequest{}
}

func newHelloServiceHelloOutStreamYARPCResponse() proto.Message {
	return &HelloResponse{}
}

func newHelloServiceHelloInStreamYARPCRequest() proto.Message {
	return &HelloRequest{}
}

func newHelloServiceHelloInStreamYARPCResponse() proto.Message {
	return &HelloResponse{}
}

var (
	emptyHelloServiceHelloUnaryYARPCRequest      = &HelloRequest{}
	emptyHelloServiceHelloUnaryYARPCResponse     = &HelloResponse{}
	emptyHelloServiceHelloThereYARPCRequest      = &HelloRequest{}
	emptyHelloServiceHelloThereYARPCResponse     = &HelloResponse{}
	emptyHelloServiceHelloOutStreamYARPCRequest  = &HelloRequest{}
	emptyHelloServiceHelloOutStreamYARPCResponse = &HelloResponse{}
	emptyHelloServiceHelloInStreamYARPCRequest   = &HelloRequest{}
	emptyHelloServiceHelloInStreamYARPCResponse  = &HelloResponse{}
)

func init() {
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) HelloYARPCClient {
			return NewHelloYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
}
