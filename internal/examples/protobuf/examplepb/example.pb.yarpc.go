// Code generated by protoc-gen-yarpc-go
// source: internal/examples/protobuf/examplepb/example.proto
// DO NOT EDIT!

// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package examplepb

import (
	"context"

	"github.com/gogo/protobuf/proto"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/x/protobuf"
	"go.uber.org/yarpc/yarpcproto"
)

// KeyValueClient is the client-side interface for the KeyValue service.
type KeyValueClient interface {
	GetValue(context.Context, *GetValueRequest, ...yarpc.CallOption) (*GetValueResponse, error)
	SetValue(context.Context, *SetValueRequest, ...yarpc.CallOption) (*SetValueResponse, error)
}

// NewKeyValueClient builds a new client for the KeyValue service.
func NewKeyValueClient(clientConfig transport.ClientConfig) KeyValueClient {
	return &_KeyValueCaller{protobuf.NewClient("KeyValue", clientConfig)}
}

// KeyValueServer is the server-side interface for the KeyValue service.
type KeyValueServer interface {
	GetValue(context.Context, *GetValueRequest) (*GetValueResponse, error)
	SetValue(context.Context, *SetValueRequest) (*SetValueResponse, error)
}

// BuildKeyValueProcedures prepares an implementation of the KeyValue service for registration.
func BuildKeyValueProcedures(server KeyValueServer) []transport.Procedure {
	handler := &_KeyValueHandler{server}
	return protobuf.BuildProcedures(
		"KeyValue",
		map[string]transport.UnaryHandler{
			"GetValue": protobuf.NewUnaryHandler(handler.GetValue, newKeyValue_GetValueRequest),
			"SetValue": protobuf.NewUnaryHandler(handler.SetValue, newKeyValue_SetValueRequest),
		},
		map[string]transport.OnewayHandler{},
	)
}

type _KeyValueCaller struct {
	client protobuf.Client
}

func (c *_KeyValueCaller) GetValue(ctx context.Context, request *GetValueRequest, options ...yarpc.CallOption) (*GetValueResponse, error) {
	responseMessage, err := c.client.Call(ctx, "GetValue", request, newKeyValue_GetValueResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetValueResponse)
	if !ok {
		return nil, protobuf.CastError(emptyKeyValue_GetValueResponse, responseMessage)
	}
	return response, err
}

func (c *_KeyValueCaller) SetValue(ctx context.Context, request *SetValueRequest, options ...yarpc.CallOption) (*SetValueResponse, error) {
	responseMessage, err := c.client.Call(ctx, "SetValue", request, newKeyValue_SetValueResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*SetValueResponse)
	if !ok {
		return nil, protobuf.CastError(emptyKeyValue_SetValueResponse, responseMessage)
	}
	return response, err
}

type _KeyValueHandler struct {
	server KeyValueServer
}

func (h *_KeyValueHandler) GetValue(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetValueRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetValueRequest)
		if !ok {
			return nil, protobuf.CastError(emptyKeyValue_GetValueRequest, requestMessage)
		}
	}
	response, err := h.server.GetValue(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_KeyValueHandler) SetValue(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *SetValueRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*SetValueRequest)
		if !ok {
			return nil, protobuf.CastError(emptyKeyValue_SetValueRequest, requestMessage)
		}
	}
	response, err := h.server.SetValue(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func newKeyValue_GetValueRequest() proto.Message {
	return &GetValueRequest{}
}

func newKeyValue_GetValueResponse() proto.Message {
	return &GetValueResponse{}
}

func newKeyValue_SetValueRequest() proto.Message {
	return &SetValueRequest{}
}

func newKeyValue_SetValueResponse() proto.Message {
	return &SetValueResponse{}
}

var (
	emptyKeyValue_GetValueRequest  = &GetValueRequest{}
	emptyKeyValue_GetValueResponse = &GetValueResponse{}
	emptyKeyValue_SetValueRequest  = &SetValueRequest{}
	emptyKeyValue_SetValueResponse = &SetValueResponse{}
)

// SinkClient is the client-side interface for the Sink service.
type SinkClient interface {
	Fire(context.Context, *FireRequest, ...yarpc.CallOption) (yarpc.Ack, error)
}

// NewSinkClient builds a new client for the Sink service.
func NewSinkClient(clientConfig transport.ClientConfig) SinkClient {
	return &_SinkCaller{protobuf.NewClient("Sink", clientConfig)}
}

// SinkServer is the server-side interface for the Sink service.
type SinkServer interface {
	Fire(context.Context, *FireRequest) error
}

// BuildSinkProcedures prepares an implementation of the Sink service for registration.
func BuildSinkProcedures(server SinkServer) []transport.Procedure {
	handler := &_SinkHandler{server}
	return protobuf.BuildProcedures(
		"Sink",
		map[string]transport.UnaryHandler{},
		map[string]transport.OnewayHandler{
			"Fire": protobuf.NewOnewayHandler(handler.Fire, newSink_FireRequest),
		},
	)
}

type _SinkCaller struct {
	client protobuf.Client
}

func (c *_SinkCaller) Fire(ctx context.Context, request *FireRequest, options ...yarpc.CallOption) (yarpc.Ack, error) {
	return c.client.CallOneway(ctx, "Fire", request, options...)
}

type _SinkHandler struct {
	server SinkServer
}

func (h *_SinkHandler) Fire(ctx context.Context, requestMessage proto.Message) error {
	var request *FireRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*FireRequest)
		if !ok {
			return protobuf.CastError(emptySink_FireRequest, requestMessage)
		}
	}
	return h.server.Fire(ctx, request)
}

func newSink_FireRequest() proto.Message {
	return &FireRequest{}
}

func newSink_FireResponse() proto.Message {
	return &yarpcproto.Oneway{}
}

var (
	emptySink_FireRequest  = &FireRequest{}
	emptySink_FireResponse = &yarpcproto.Oneway{}
)
