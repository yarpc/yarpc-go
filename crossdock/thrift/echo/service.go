// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Parts of the code generated by thriftrw, but mostly written by hand.

package echo

import (
	"github.com/thriftrw/thriftrw-go/protocol"
	"github.com/thriftrw/thriftrw-go/wire"
	"github.com/yarpc/yarpc-go/encoding/thrift"
	"github.com/yarpc/yarpc-go/transport"
)

type Echo interface {
	Echo(req *thrift.Request, ping *Ping) (*Pong, *thrift.Response, error)
}

type echoClient struct {
	client thrift.Client
}

func NewEchoClient(c transport.Channel) Echo {
	return echoClient{
		client: thrift.New(thrift.Config{
			Service:  "Echo",
			Channel:  c,
			Protocol: protocol.Binary,
		}),
	}
}

func (c echoClient) Echo(req *thrift.Request, ping *Ping) (*Pong, *thrift.Response, error) {
	args := PingRequest{ping}
	resBody, res, err := c.client.Call("echo", req, args.ToWire())
	if err != nil {
		return nil, res, err
	}

	result, err := _PingResponse_Read(resBody)
	if err != nil {
		return nil, res, err
	}

	return result.Success, res, nil
}

type EchoHandler struct {
	impl Echo
}

func NewEchoHandler(impl Echo) EchoHandler {
	return EchoHandler{impl}
}

func (EchoHandler) Name() string {
	return "Echo"
}

func (EchoHandler) Protocol() protocol.Protocol {
	return protocol.Binary
}

func (h EchoHandler) Handlers() map[string]thrift.Handler {
	return map[string]thrift.Handler{
		"echo": thrift.HandlerFunc(h.EchoHandler),
	}
}

func (h EchoHandler) EchoHandler(req *thrift.Request, body wire.Value) (wire.Value, *thrift.Response, error) {
	args, err := _PingRequest_Read(body)
	if err != nil {
		return wire.Value{}, nil, err
	}

	success, res, err := h.impl.Echo(req, args.Ping)

	var result PingResponse
	if err != nil {
		return wire.Value{}, nil, err
	}

	result.Success = success
	return result.ToWire(), res, nil
}

type PingRequest struct{ Ping *Ping }

func (v *PingRequest) ToWire() wire.Value {
	var fs [1]wire.Field
	i := 0
	fs[i] = wire.Field{ID: 1, Value: v.Ping.ToWire()}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fs[:i]})
}

func (v *PingRequest) FromWire(w wire.Value) error {
	var err error
	for _, f := range w.GetStruct().Fields {
		switch f.ID {
		case 1:
			if f.Value.Type() == wire.TStruct {
				v.Ping, err = _Ping_Read(f.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func _PingRequest_Read(w wire.Value) (*PingRequest, error) {
	var v PingRequest
	err := v.FromWire(w)
	return &v, err
}

type PingResponse struct{ Success *Pong }

func (v *PingResponse) ToWire() wire.Value {
	var fs [1]wire.Field
	i := 0
	fs[i] = wire.Field{ID: 0, Value: v.Success.ToWire()}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fs[:i]})
}

func (v *PingResponse) FromWire(w wire.Value) error {
	var err error
	for _, f := range w.GetStruct().Fields {
		switch f.ID {
		case 0:
			if f.Value.Type() == wire.TStruct {
				v.Success, err = _Pong_Read(f.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func _PingResponse_Read(w wire.Value) (*PingResponse, error) {
	var v PingResponse
	err := v.FromWire(w)
	return &v, err
}
