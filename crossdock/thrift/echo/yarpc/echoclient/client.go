// Code generated by thriftrw-plugin-yarpc
// @generated

package echoclient

import (
	"github.com/thriftrw/thriftrw-go/protocol"
	"golang.org/x/net/context"
	"github.com/yarpc/yarpc-go"
	"github.com/yarpc/yarpc-go/crossdock/thrift/echo"
	"github.com/yarpc/yarpc-go/transport"
	"github.com/yarpc/yarpc-go/encoding/thrift"
	echo2 "github.com/yarpc/yarpc-go/crossdock/thrift/echo/service/echo"
	"github.com/thriftrw/thriftrw-go/wire"
)

// Interface is a client for the Echo service.
type Interface interface {
	Echo(
		ctx context.Context,
		reqMeta yarpc.CallReqMeta,
		ping *echo.Ping,
	) (*echo.Pong, yarpc.CallResMeta, error)
}

// New builds a new client for the Echo service.
//
// 	client := echoclient.New(dispatcher.Channel("echo"))
func New(c transport.Channel, opts ...thrift.ClientOption) Interface {
	return client{c: thrift.New(thrift.Config{
		Service:  "Echo",
		Channel:  c,
		Protocol: protocol.Binary,
	}, opts...)}
}

type client struct{ c thrift.Client }

func (c client) Echo(
	ctx context.Context, reqMeta yarpc.CallReqMeta,
	_Ping *echo.Ping,
) (success *echo.Pong, resMeta yarpc.CallResMeta, err error) {
	args := echo2.EchoHelper.Args(_Ping)

	var body wire.Value
	body, resMeta, err = c.c.Call(ctx, reqMeta, args)
	if err != nil {
		return
	}

	var result echo2.EchoResult
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = echo2.EchoHelper.UnwrapResponse(&result)
	return
}
