// Code generated by thriftrw-plugin-yarpc
// @generated

package echoserver

import (
	"github.com/thriftrw/thriftrw-go/protocol"
	"golang.org/x/net/context"
	"github.com/yarpc/yarpc-go"
	"github.com/yarpc/yarpc-go/crossdock/thrift/echo"
	"github.com/yarpc/yarpc-go/encoding/thrift"
	echo2 "github.com/yarpc/yarpc-go/crossdock/thrift/echo/service/echo"
	"github.com/thriftrw/thriftrw-go/wire"
)

// Interface is the server-side interface for the Echo service.
type Interface interface {
	Echo(
		ctx context.Context,
		reqMeta yarpc.ReqMeta,
		ping *echo.Ping,
	) (*echo.Pong, yarpc.ResMeta, error)
}

// New prepares an implementation of the Echo service for
// registration.
//
// 	handler := EchoHandler{}
// 	thrift.Register(dispatcher, echoserver.New(handler))
func New(impl Interface) thrift.Service {
	return service{handler{impl}}
}

type service struct{ h handler }

func (service) Name() string {
	return "Echo"
}

func (service) Protocol() protocol.Protocol {
	return protocol.Binary
}

func (s service) Handlers() map[string]thrift.Handler {
	return map[string]thrift.Handler{
		"echo": thrift.HandlerFunc(s.h.Echo),
	}
}

type handler struct{ impl Interface }

func (h handler) Echo(ctx context.Context, reqMeta yarpc.ReqMeta, body wire.Value) (thrift.Response, error) {
	var args echo2.EchoArgs
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, resMeta, err := h.impl.Echo(ctx, reqMeta, args.Ping)

	hadError := err != nil
	result, err := echo2.EchoHelper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Meta = resMeta
		response.Body = result
	}
	return response, err
}
