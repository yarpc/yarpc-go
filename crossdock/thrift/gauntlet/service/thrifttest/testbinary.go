// Code generated by thriftrw
// @generated

package thrifttest

import (
	"errors"
	"fmt"
	"github.com/thriftrw/thriftrw-go/wire"
	"strings"
)

type TestBinaryArgs struct {
	Thing []byte `json:"thing"`
}

func (v *TestBinaryArgs) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Thing != nil {
		w, err = wire.NewValueBinary(v.Thing), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *TestBinaryArgs) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Thing, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *TestBinaryArgs) String() string {
	var fields [1]string
	i := 0
	if v.Thing != nil {
		fields[i] = fmt.Sprintf("Thing: %v", v.Thing)
		i++
	}
	return fmt.Sprintf("TestBinaryArgs{%v}", strings.Join(fields[:i], ", "))
}

func (v *TestBinaryArgs) MethodName() string {
	return "testBinary"
}

func (v *TestBinaryArgs) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

type TestBinaryResult struct {
	Success []byte `json:"success"`
}

func (v *TestBinaryResult) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)
	if v.Success != nil {
		w, err = wire.NewValueBinary(v.Success), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}
	if i != 1 {
		return wire.Value{}, fmt.Errorf("TestBinaryResult should have exactly one field: got %v fields", i)
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func (v *TestBinaryResult) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TBinary {
				v.Success, err = field.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("TestBinaryResult should have exactly one field: got %v fields", count)
	}
	return nil
}

func (v *TestBinaryResult) String() string {
	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", v.Success)
		i++
	}
	return fmt.Sprintf("TestBinaryResult{%v}", strings.Join(fields[:i], ", "))
}

func (v *TestBinaryResult) MethodName() string {
	return "testBinary"
}

func (v *TestBinaryResult) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

var TestBinaryHelper = struct {
	IsException    func(error) bool
	Args           func(thing []byte) *TestBinaryArgs
	WrapResponse   func([]byte, error) (*TestBinaryResult, error)
	UnwrapResponse func(*TestBinaryResult) ([]byte, error)
}{}

func init() {
	TestBinaryHelper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}
	TestBinaryHelper.Args = func(thing []byte) *TestBinaryArgs {
		return &TestBinaryArgs{Thing: thing}
	}
	TestBinaryHelper.WrapResponse = func(success []byte, err error) (*TestBinaryResult, error) {
		if err == nil {
			return &TestBinaryResult{Success: success}, nil
		}
		return nil, err
	}
	TestBinaryHelper.UnwrapResponse = func(result *TestBinaryResult) (success []byte, err error) {
		if result.Success != nil {
			success = result.Success
			return
		}
		err = errors.New("expected a non-void result")
		return
	}
}
