// Code generated by thriftrw

// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package thrifttest

import (
	"errors"
	"fmt"
	"github.com/thriftrw/thriftrw-go/wire"
	"strings"
)

type TestI32Args struct {
	Thing *int32 `json:"thing,omitempty"`
}

func (v *TestI32Args) ToWire() wire.Value {
	var fields [1]wire.Field
	i := 0
	if v.Thing != nil {
		fields[i] = wire.Field{ID: 1, Value: wire.NewValueI32(*(v.Thing))}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]})
}

func (v *TestI32Args) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.Thing = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *TestI32Args) String() string {
	var fields [1]string
	i := 0
	if v.Thing != nil {
		fields[i] = fmt.Sprintf("Thing: %v", *(v.Thing))
		i++
	}
	return fmt.Sprintf("TestI32Args{%v}", strings.Join(fields[:i], ", "))
}

type TestI32Result struct {
	Success *int32 `json:"success,omitempty"`
}

func (v *TestI32Result) ToWire() wire.Value {
	var fields [1]wire.Field
	i := 0
	if v.Success != nil {
		fields[i] = wire.Field{ID: 0, Value: wire.NewValueI32(*(v.Success))}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]})
}

func (v *TestI32Result) FromWire(w wire.Value) error {
	var err error
	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TI32 {
				var x int32
				x, err = field.Value.GetI32(), error(nil)
				v.Success = &x
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}

func (v *TestI32Result) String() string {
	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", *(v.Success))
		i++
	}
	return fmt.Sprintf("TestI32Result{%v}", strings.Join(fields[:i], ", "))
}

var TestI32Helper = struct {
	IsException    func(error) bool
	Args           func(thing *int32) *TestI32Args
	WrapResponse   func(int32, error) (*TestI32Result, error)
	UnwrapResponse func(*TestI32Result) (int32, error)
}{}

func init() {
	TestI32Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}
	TestI32Helper.Args = func(thing *int32) *TestI32Args {
		return &TestI32Args{Thing: thing}
	}
	TestI32Helper.WrapResponse = func(success int32, err error) (*TestI32Result, error) {
		if err == nil {
			return &TestI32Result{Success: &success}, nil
		}
		return nil, err
	}
	TestI32Helper.UnwrapResponse = func(result *TestI32Result) (success int32, err error) {
		if result.Success != nil {
			success = *result.Success
			return
		}
		err = errors.New("expected a non-void result")
		return
	}
}
